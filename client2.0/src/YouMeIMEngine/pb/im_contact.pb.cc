// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im_contact.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im_contact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YouMeIMProtocol {

void protobuf_ShutdownFile_im_5fcontact_2eproto() {
  delete YouMeIM_Command_GetContactList::default_instance_;
  delete YouMeIM_Command_GetBlacklistList::default_instance_;
  delete YouMeIM_Command_GetContactListResponse::default_instance_;
  delete YouMeIM_Command_GetBlacklistListResponse::default_instance_;
  delete YouMeIM_Command_AddContact::default_instance_;
  delete YouMeIM_Command_AddContactRequest::default_instance_;
  delete YouMeIM_Command_ReceiveContactInvited::default_instance_;
  delete YouMeIM_Command_AgreeContactInvited::default_instance_;
  delete YouMeIM_Command_RefuseContactInvited::default_instance_;
  delete YouMeIM_Command_InvitedResponse::default_instance_;
  delete YouMeIM_Command_AddContactResponse::default_instance_;
  delete YouMeIM_Command_DeleteContact::default_instance_;
  delete YouMeIM_Command_DeleteContactResponse::default_instance_;
  delete YouMeIM_Command_WasDeleted::default_instance_;
  delete YouMeIM_Command_AddContactToBlacklist::default_instance_;
  delete YouMeIM_Command_AddContactToBlacklistResponse::default_instance_;
  delete YouMeIM_Command_AddedToBlacklist::default_instance_;
  delete YouMeIM_Command_KickedFromBlacklist::default_instance_;
  delete YouMeIM_Command_KickedFromBlacklistResponse::default_instance_;
  delete YouMeIM_Command_WasKickedFromBlacklist::default_instance_;
  delete YouMeIM_Command_GetContactInfo::default_instance_;
  delete YouMeIM_Command_GetContactInfoResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_5fcontact_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_5fcontact_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YouMeIMProtocol::protobuf_AddDesc_im_5fcommon_2eproto();
  YouMeIM_Command_GetContactList::default_instance_ = new YouMeIM_Command_GetContactList();
  YouMeIM_Command_GetBlacklistList::default_instance_ = new YouMeIM_Command_GetBlacklistList();
  YouMeIM_Command_GetContactListResponse::default_instance_ = new YouMeIM_Command_GetContactListResponse();
  YouMeIM_Command_GetBlacklistListResponse::default_instance_ = new YouMeIM_Command_GetBlacklistListResponse();
  YouMeIM_Command_AddContact::default_instance_ = new YouMeIM_Command_AddContact();
  YouMeIM_Command_AddContactRequest::default_instance_ = new YouMeIM_Command_AddContactRequest();
  YouMeIM_Command_ReceiveContactInvited::default_instance_ = new YouMeIM_Command_ReceiveContactInvited();
  YouMeIM_Command_AgreeContactInvited::default_instance_ = new YouMeIM_Command_AgreeContactInvited();
  YouMeIM_Command_RefuseContactInvited::default_instance_ = new YouMeIM_Command_RefuseContactInvited();
  YouMeIM_Command_InvitedResponse::default_instance_ = new YouMeIM_Command_InvitedResponse();
  YouMeIM_Command_AddContactResponse::default_instance_ = new YouMeIM_Command_AddContactResponse();
  YouMeIM_Command_DeleteContact::default_instance_ = new YouMeIM_Command_DeleteContact();
  YouMeIM_Command_DeleteContactResponse::default_instance_ = new YouMeIM_Command_DeleteContactResponse();
  YouMeIM_Command_WasDeleted::default_instance_ = new YouMeIM_Command_WasDeleted();
  YouMeIM_Command_AddContactToBlacklist::default_instance_ = new YouMeIM_Command_AddContactToBlacklist();
  YouMeIM_Command_AddContactToBlacklistResponse::default_instance_ = new YouMeIM_Command_AddContactToBlacklistResponse();
  YouMeIM_Command_AddedToBlacklist::default_instance_ = new YouMeIM_Command_AddedToBlacklist();
  YouMeIM_Command_KickedFromBlacklist::default_instance_ = new YouMeIM_Command_KickedFromBlacklist();
  YouMeIM_Command_KickedFromBlacklistResponse::default_instance_ = new YouMeIM_Command_KickedFromBlacklistResponse();
  YouMeIM_Command_WasKickedFromBlacklist::default_instance_ = new YouMeIM_Command_WasKickedFromBlacklist();
  YouMeIM_Command_GetContactInfo::default_instance_ = new YouMeIM_Command_GetContactInfo();
  YouMeIM_Command_GetContactInfoResponse::default_instance_ = new YouMeIM_Command_GetContactInfoResponse();
  YouMeIM_Command_GetContactList::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetBlacklistList::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetContactListResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetBlacklistListResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_AddContact::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_AddContactRequest::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ReceiveContactInvited::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_AgreeContactInvited::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_RefuseContactInvited::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_InvitedResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_AddContactResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_DeleteContact::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_DeleteContactResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_WasDeleted::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_AddContactToBlacklist::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_AddContactToBlacklistResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_AddedToBlacklist::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_KickedFromBlacklist::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_KickedFromBlacklistResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_WasKickedFromBlacklist::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetContactInfo::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetContactInfoResponse::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_5fcontact_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_5fcontact_2eproto_once_);
void protobuf_AddDesc_im_5fcontact_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_5fcontact_2eproto_once_,
                 &protobuf_AddDesc_im_5fcontact_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_5fcontact_2eproto {
  StaticDescriptorInitializer_im_5fcontact_2eproto() {
    protobuf_AddDesc_im_5fcontact_2eproto();
  }
} static_descriptor_initializer_im_5fcontact_2eproto_;
#endif
bool YouMeIM_AddContactEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetContactList::kMsgHeadFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetContactList::YouMeIM_Command_GetContactList()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_GetContactList)
}

void YouMeIM_Command_GetContactList::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_GetContactList::YouMeIM_Command_GetContactList(const YouMeIM_Command_GetContactList& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_GetContactList)
}

void YouMeIM_Command_GetContactList::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetContactList::~YouMeIM_Command_GetContactList() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_GetContactList)
  SharedDtor();
}

void YouMeIM_Command_GetContactList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetContactList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetContactList& YouMeIM_Command_GetContactList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetContactList* YouMeIM_Command_GetContactList::default_instance_ = NULL;

YouMeIM_Command_GetContactList* YouMeIM_Command_GetContactList::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetContactList* n = new YouMeIM_Command_GetContactList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetContactList::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetContactList::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_GetContactList)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_GetContactList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_GetContactList)
  return false;
#undef DO_
}

void YouMeIM_Command_GetContactList::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_GetContactList)
  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_GetContactList)
}

int YouMeIM_Command_GetContactList::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetContactList::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetContactList*>(&from));
}

void YouMeIM_Command_GetContactList::MergeFrom(const YouMeIM_Command_GetContactList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetContactList::CopyFrom(const YouMeIM_Command_GetContactList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetContactList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_GetContactList::Swap(YouMeIM_Command_GetContactList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetContactList::InternalSwap(YouMeIM_Command_GetContactList* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetContactList::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_GetContactList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetContactList

// required .YouMeProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_GetContactList::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetContactList::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetContactList::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetContactList::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_GetContactList::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetContactList.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetContactList::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetContactList.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetContactList::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetContactList::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_GetContactList.msgHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetBlacklistList::kMsgHeadFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetBlacklistList::YouMeIM_Command_GetBlacklistList()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_GetBlacklistList)
}

void YouMeIM_Command_GetBlacklistList::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_GetBlacklistList::YouMeIM_Command_GetBlacklistList(const YouMeIM_Command_GetBlacklistList& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_GetBlacklistList)
}

void YouMeIM_Command_GetBlacklistList::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetBlacklistList::~YouMeIM_Command_GetBlacklistList() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_GetBlacklistList)
  SharedDtor();
}

void YouMeIM_Command_GetBlacklistList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetBlacklistList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetBlacklistList& YouMeIM_Command_GetBlacklistList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetBlacklistList* YouMeIM_Command_GetBlacklistList::default_instance_ = NULL;

YouMeIM_Command_GetBlacklistList* YouMeIM_Command_GetBlacklistList::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetBlacklistList* n = new YouMeIM_Command_GetBlacklistList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetBlacklistList::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetBlacklistList::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_GetBlacklistList)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_GetBlacklistList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_GetBlacklistList)
  return false;
#undef DO_
}

void YouMeIM_Command_GetBlacklistList::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_GetBlacklistList)
  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_GetBlacklistList)
}

int YouMeIM_Command_GetBlacklistList::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetBlacklistList::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetBlacklistList*>(&from));
}

void YouMeIM_Command_GetBlacklistList::MergeFrom(const YouMeIM_Command_GetBlacklistList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetBlacklistList::CopyFrom(const YouMeIM_Command_GetBlacklistList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetBlacklistList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_GetBlacklistList::Swap(YouMeIM_Command_GetBlacklistList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetBlacklistList::InternalSwap(YouMeIM_Command_GetBlacklistList* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetBlacklistList::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_GetBlacklistList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetBlacklistList

// required .YouMeProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_GetBlacklistList::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetBlacklistList::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetBlacklistList::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetBlacklistList::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_GetBlacklistList::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetBlacklistList.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetBlacklistList::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetBlacklistList.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetBlacklistList::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetBlacklistList::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_GetBlacklistList.msgHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetContactListResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetContactListResponse::kContactsFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetContactListResponse::YouMeIM_Command_GetContactListResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_GetContactListResponse)
}

void YouMeIM_Command_GetContactListResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_GetContactListResponse::YouMeIM_Command_GetContactListResponse(const YouMeIM_Command_GetContactListResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_GetContactListResponse)
}

void YouMeIM_Command_GetContactListResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetContactListResponse::~YouMeIM_Command_GetContactListResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_GetContactListResponse)
  SharedDtor();
}

void YouMeIM_Command_GetContactListResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetContactListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetContactListResponse& YouMeIM_Command_GetContactListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetContactListResponse* YouMeIM_Command_GetContactListResponse::default_instance_ = NULL;

YouMeIM_Command_GetContactListResponse* YouMeIM_Command_GetContactListResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetContactListResponse* n = new YouMeIM_Command_GetContactListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetContactListResponse::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  }
  contacts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetContactListResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_GetContactListResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contacts;
        break;
      }

      // repeated .YouMeProtocol.ContactInfo contacts = 2;
      case 2: {
        if (tag == 18) {
         parse_contacts:
          DO_(input->IncrementRecursionDepth());
         parse_loop_contacts:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_contacts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_GetContactListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_GetContactListResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_GetContactListResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_GetContactListResponse)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // repeated .YouMeProtocol.ContactInfo contacts = 2;
  for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->contacts(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_GetContactListResponse)
}

int YouMeIM_Command_GetContactListResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  // repeated .YouMeProtocol.ContactInfo contacts = 2;
  total_size += 1 * this->contacts_size();
  for (int i = 0; i < this->contacts_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contacts(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetContactListResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetContactListResponse*>(&from));
}

void YouMeIM_Command_GetContactListResponse::MergeFrom(const YouMeIM_Command_GetContactListResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  contacts_.MergeFrom(from.contacts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetContactListResponse::CopyFrom(const YouMeIM_Command_GetContactListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetContactListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->contacts())) return false;
  return true;
}

void YouMeIM_Command_GetContactListResponse::Swap(YouMeIM_Command_GetContactListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetContactListResponse::InternalSwap(YouMeIM_Command_GetContactListResponse* other) {
  std::swap(msghead_, other->msghead_);
  contacts_.UnsafeArenaSwap(&other->contacts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetContactListResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_GetContactListResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetContactListResponse

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_GetContactListResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetContactListResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetContactListResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetContactListResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_GetContactListResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetContactListResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetContactListResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetContactListResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetContactListResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetContactListResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_GetContactListResponse.msgHead)
}

// repeated .YouMeProtocol.ContactInfo contacts = 2;
int YouMeIM_Command_GetContactListResponse::contacts_size() const {
  return contacts_.size();
}
void YouMeIM_Command_GetContactListResponse::clear_contacts() {
  contacts_.Clear();
}
const ::YouMeIMProtocol::ContactInfo& YouMeIM_Command_GetContactListResponse::contacts(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetContactListResponse.contacts)
  return contacts_.Get(index);
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_GetContactListResponse::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetContactListResponse.contacts)
  return contacts_.Mutable(index);
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_GetContactListResponse::add_contacts() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeIM_Command_GetContactListResponse.contacts)
  return contacts_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::ContactInfo >*
YouMeIM_Command_GetContactListResponse::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeIM_Command_GetContactListResponse.contacts)
  return &contacts_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::ContactInfo >&
YouMeIM_Command_GetContactListResponse::contacts() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeIM_Command_GetContactListResponse.contacts)
  return contacts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetBlacklistListResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetBlacklistListResponse::kContactsFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetBlacklistListResponse::YouMeIM_Command_GetBlacklistListResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse)
}

void YouMeIM_Command_GetBlacklistListResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_GetBlacklistListResponse::YouMeIM_Command_GetBlacklistListResponse(const YouMeIM_Command_GetBlacklistListResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse)
}

void YouMeIM_Command_GetBlacklistListResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetBlacklistListResponse::~YouMeIM_Command_GetBlacklistListResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse)
  SharedDtor();
}

void YouMeIM_Command_GetBlacklistListResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetBlacklistListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetBlacklistListResponse& YouMeIM_Command_GetBlacklistListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetBlacklistListResponse* YouMeIM_Command_GetBlacklistListResponse::default_instance_ = NULL;

YouMeIM_Command_GetBlacklistListResponse* YouMeIM_Command_GetBlacklistListResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetBlacklistListResponse* n = new YouMeIM_Command_GetBlacklistListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetBlacklistListResponse::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  }
  contacts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetBlacklistListResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contacts;
        break;
      }

      // repeated .YouMeProtocol.ContactInfo contacts = 2;
      case 2: {
        if (tag == 18) {
         parse_contacts:
          DO_(input->IncrementRecursionDepth());
         parse_loop_contacts:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_contacts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_GetBlacklistListResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // repeated .YouMeProtocol.ContactInfo contacts = 2;
  for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->contacts(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse)
}

int YouMeIM_Command_GetBlacklistListResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  // repeated .YouMeProtocol.ContactInfo contacts = 2;
  total_size += 1 * this->contacts_size();
  for (int i = 0; i < this->contacts_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contacts(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetBlacklistListResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetBlacklistListResponse*>(&from));
}

void YouMeIM_Command_GetBlacklistListResponse::MergeFrom(const YouMeIM_Command_GetBlacklistListResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  contacts_.MergeFrom(from.contacts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetBlacklistListResponse::CopyFrom(const YouMeIM_Command_GetBlacklistListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetBlacklistListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->contacts())) return false;
  return true;
}

void YouMeIM_Command_GetBlacklistListResponse::Swap(YouMeIM_Command_GetBlacklistListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetBlacklistListResponse::InternalSwap(YouMeIM_Command_GetBlacklistListResponse* other) {
  std::swap(msghead_, other->msghead_);
  contacts_.UnsafeArenaSwap(&other->contacts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetBlacklistListResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetBlacklistListResponse

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_GetBlacklistListResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetBlacklistListResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetBlacklistListResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetBlacklistListResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_GetBlacklistListResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetBlacklistListResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetBlacklistListResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetBlacklistListResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse.msgHead)
}

// repeated .YouMeProtocol.ContactInfo contacts = 2;
int YouMeIM_Command_GetBlacklistListResponse::contacts_size() const {
  return contacts_.size();
}
void YouMeIM_Command_GetBlacklistListResponse::clear_contacts() {
  contacts_.Clear();
}
const ::YouMeIMProtocol::ContactInfo& YouMeIM_Command_GetBlacklistListResponse::contacts(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse.contacts)
  return contacts_.Get(index);
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_GetBlacklistListResponse::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse.contacts)
  return contacts_.Mutable(index);
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_GetBlacklistListResponse::add_contacts() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse.contacts)
  return contacts_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::ContactInfo >*
YouMeIM_Command_GetBlacklistListResponse::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse.contacts)
  return &contacts_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::ContactInfo >&
YouMeIM_Command_GetBlacklistListResponse::contacts() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeIM_Command_GetBlacklistListResponse.contacts)
  return contacts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_AddContact::kMsgHeadFieldNumber;
const int YouMeIM_Command_AddContact::kYOUMEIDFieldNumber;
const int YouMeIM_Command_AddContact::kReasonFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_AddContact::YouMeIM_Command_AddContact()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_AddContact)
}

void YouMeIM_Command_AddContact::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_AddContact::YouMeIM_Command_AddContact(const YouMeIM_Command_AddContact& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_AddContact)
}

void YouMeIM_Command_AddContact::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_AddContact::~YouMeIM_Command_AddContact() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_AddContact)
  SharedDtor();
}

void YouMeIM_Command_AddContact::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_AddContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_AddContact& YouMeIM_Command_AddContact::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_AddContact* YouMeIM_Command_AddContact::default_instance_ = NULL;

YouMeIM_Command_AddContact* YouMeIM_Command_AddContact::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_AddContact* n = new YouMeIM_Command_AddContact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_AddContact::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_AddContact::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_AddContact)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_AddContact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_AddContact)
  return false;
#undef DO_
}

void YouMeIM_Command_AddContact::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_AddContact)
  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_AddContact)
}

int YouMeIM_Command_AddContact::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_AddContact::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string reason = 3;
  if (has_reason()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_AddContact::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_AddContact*>(&from));
}

void YouMeIM_Command_AddContact::MergeFrom(const YouMeIM_Command_AddContact& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_AddContact::CopyFrom(const YouMeIM_Command_AddContact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_AddContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_AddContact::Swap(YouMeIM_Command_AddContact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_AddContact::InternalSwap(YouMeIM_Command_AddContact* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_AddContact::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_AddContact";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_AddContact

// required .YouMeProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_AddContact::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_AddContact::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_AddContact::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_AddContact::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_AddContact::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContact.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_AddContact::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContact.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_AddContact::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_AddContact::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContact.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_AddContact::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_AddContact::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_AddContact::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_AddContact::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_AddContact::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContact.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContact::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_AddContact.YOUMEID)
}
 void YouMeIM_Command_AddContact::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_AddContact.YOUMEID)
}
 void YouMeIM_Command_AddContact::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_AddContact.YOUMEID)
}
 ::std::string* YouMeIM_Command_AddContact::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContact.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_AddContact::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContact::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContact.YOUMEID)
}

// optional string reason = 3;
bool YouMeIM_Command_AddContact::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_AddContact::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_AddContact::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_AddContact::clear_reason() {
  reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& YouMeIM_Command_AddContact::reason() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContact.reason)
  return reason_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContact::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_AddContact.reason)
}
 void YouMeIM_Command_AddContact::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_AddContact.reason)
}
 void YouMeIM_Command_AddContact::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_AddContact.reason)
}
 ::std::string* YouMeIM_Command_AddContact::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContact.reason)
  return reason_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_AddContact::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContact::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContact.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_AddContactRequest::kMsgHeadFieldNumber;
const int YouMeIM_Command_AddContactRequest::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_AddContactRequest::YouMeIM_Command_AddContactRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_AddContactRequest)
}

void YouMeIM_Command_AddContactRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_AddContactRequest::YouMeIM_Command_AddContactRequest(const YouMeIM_Command_AddContactRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_AddContactRequest)
}

void YouMeIM_Command_AddContactRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_AddContactRequest::~YouMeIM_Command_AddContactRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_AddContactRequest)
  SharedDtor();
}

void YouMeIM_Command_AddContactRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_AddContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_AddContactRequest& YouMeIM_Command_AddContactRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_AddContactRequest* YouMeIM_Command_AddContactRequest::default_instance_ = NULL;

YouMeIM_Command_AddContactRequest* YouMeIM_Command_AddContactRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_AddContactRequest* n = new YouMeIM_Command_AddContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_AddContactRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_AddContactRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_AddContactRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_AddContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_AddContactRequest)
  return false;
#undef DO_
}

void YouMeIM_Command_AddContactRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_AddContactRequest)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_AddContactRequest)
}

int YouMeIM_Command_AddContactRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_AddContactRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_AddContactRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_AddContactRequest*>(&from));
}

void YouMeIM_Command_AddContactRequest::MergeFrom(const YouMeIM_Command_AddContactRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_AddContactRequest::CopyFrom(const YouMeIM_Command_AddContactRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_AddContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_AddContactRequest::Swap(YouMeIM_Command_AddContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_AddContactRequest::InternalSwap(YouMeIM_Command_AddContactRequest* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_AddContactRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_AddContactRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_AddContactRequest

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_AddContactRequest::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_AddContactRequest::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_AddContactRequest::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_AddContactRequest::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_AddContactRequest::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContactRequest.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_AddContactRequest::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContactRequest.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_AddContactRequest::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_AddContactRequest::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContactRequest.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_AddContactRequest::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_AddContactRequest::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_AddContactRequest::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_AddContactRequest::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_AddContactRequest::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContactRequest.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContactRequest::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_AddContactRequest.YOUMEID)
}
 void YouMeIM_Command_AddContactRequest::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_AddContactRequest.YOUMEID)
}
 void YouMeIM_Command_AddContactRequest::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_AddContactRequest.YOUMEID)
}
 ::std::string* YouMeIM_Command_AddContactRequest::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContactRequest.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_AddContactRequest::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContactRequest::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContactRequest.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ReceiveContactInvited::kMsgHeadFieldNumber;
const int YouMeIM_Command_ReceiveContactInvited::kContactinfoFieldNumber;
const int YouMeIM_Command_ReceiveContactInvited::kReasonFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ReceiveContactInvited::YouMeIM_Command_ReceiveContactInvited()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited)
}

void YouMeIM_Command_ReceiveContactInvited::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  contactinfo_ = const_cast< ::YouMeIMProtocol::ContactInfo*>(
      ::YouMeIMProtocol::ContactInfo::internal_default_instance());
#else
  contactinfo_ = const_cast< ::YouMeIMProtocol::ContactInfo*>(&::YouMeIMProtocol::ContactInfo::default_instance());
#endif
}

YouMeIM_Command_ReceiveContactInvited::YouMeIM_Command_ReceiveContactInvited(const YouMeIM_Command_ReceiveContactInvited& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited)
}

void YouMeIM_Command_ReceiveContactInvited::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  contactinfo_ = NULL;
  reason_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ReceiveContactInvited::~YouMeIM_Command_ReceiveContactInvited() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited)
  SharedDtor();
}

void YouMeIM_Command_ReceiveContactInvited::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete contactinfo_;
  }
}

void YouMeIM_Command_ReceiveContactInvited::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ReceiveContactInvited& YouMeIM_Command_ReceiveContactInvited::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ReceiveContactInvited* YouMeIM_Command_ReceiveContactInvited::default_instance_ = NULL;

YouMeIM_Command_ReceiveContactInvited* YouMeIM_Command_ReceiveContactInvited::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ReceiveContactInvited* n = new YouMeIM_Command_ReceiveContactInvited;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ReceiveContactInvited::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_contactinfo()) {
      if (contactinfo_ != NULL) contactinfo_->::YouMeIMProtocol::ContactInfo::Clear();
    }
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ReceiveContactInvited::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contactinfo;
        break;
      }

      // required .YouMeProtocol.ContactInfo contactinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_contactinfo:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contactinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited)
  return false;
#undef DO_
}

void YouMeIM_Command_ReceiveContactInvited::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeProtocol.ContactInfo contactinfo = 2;
  if (has_contactinfo()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->contactinfo_, output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited)
}

int YouMeIM_Command_ReceiveContactInvited::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_contactinfo()) {
    // required .YouMeProtocol.ContactInfo contactinfo = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contactinfo_);
  }

  return total_size;
}
int YouMeIM_Command_ReceiveContactInvited::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeProtocol.ContactInfo contactinfo = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contactinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string reason = 3;
  if (has_reason()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ReceiveContactInvited::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ReceiveContactInvited*>(&from));
}

void YouMeIM_Command_ReceiveContactInvited::MergeFrom(const YouMeIM_Command_ReceiveContactInvited& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_contactinfo()) {
      mutable_contactinfo()->::YouMeIMProtocol::ContactInfo::MergeFrom(from.contactinfo());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ReceiveContactInvited::CopyFrom(const YouMeIM_Command_ReceiveContactInvited& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ReceiveContactInvited::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_contactinfo()) {
    if (!this->contactinfo_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ReceiveContactInvited::Swap(YouMeIM_Command_ReceiveContactInvited* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ReceiveContactInvited::InternalSwap(YouMeIM_Command_ReceiveContactInvited* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(contactinfo_, other->contactinfo_);
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ReceiveContactInvited::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_ReceiveContactInvited";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ReceiveContactInvited

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_ReceiveContactInvited::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ReceiveContactInvited::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ReceiveContactInvited::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ReceiveContactInvited::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_ReceiveContactInvited::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ReceiveContactInvited::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ReceiveContactInvited::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ReceiveContactInvited::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.msgHead)
}

// required .YouMeProtocol.ContactInfo contactinfo = 2;
bool YouMeIM_Command_ReceiveContactInvited::has_contactinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ReceiveContactInvited::set_has_contactinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ReceiveContactInvited::clear_has_contactinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ReceiveContactInvited::clear_contactinfo() {
  if (contactinfo_ != NULL) contactinfo_->::YouMeIMProtocol::ContactInfo::Clear();
  clear_has_contactinfo();
}
const ::YouMeIMProtocol::ContactInfo& YouMeIM_Command_ReceiveContactInvited::contactinfo() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.contactinfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return contactinfo_ != NULL ? *contactinfo_ : *default_instance().contactinfo_;
#else
  return contactinfo_ != NULL ? *contactinfo_ : *default_instance_->contactinfo_;
#endif
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_ReceiveContactInvited::mutable_contactinfo() {
  set_has_contactinfo();
  if (contactinfo_ == NULL) {
    contactinfo_ = new ::YouMeIMProtocol::ContactInfo;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.contactinfo)
  return contactinfo_;
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_ReceiveContactInvited::release_contactinfo() {
  clear_has_contactinfo();
  ::YouMeIMProtocol::ContactInfo* temp = contactinfo_;
  contactinfo_ = NULL;
  return temp;
}
void YouMeIM_Command_ReceiveContactInvited::set_allocated_contactinfo(::YouMeIMProtocol::ContactInfo* contactinfo) {
  delete contactinfo_;
  contactinfo_ = contactinfo;
  if (contactinfo) {
    set_has_contactinfo();
  } else {
    clear_has_contactinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.contactinfo)
}

// optional string reason = 3;
bool YouMeIM_Command_ReceiveContactInvited::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ReceiveContactInvited::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ReceiveContactInvited::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ReceiveContactInvited::clear_reason() {
  reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& YouMeIM_Command_ReceiveContactInvited::reason() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.reason)
  return reason_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ReceiveContactInvited::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.reason)
}
 void YouMeIM_Command_ReceiveContactInvited::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.reason)
}
 void YouMeIM_Command_ReceiveContactInvited::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.reason)
}
 ::std::string* YouMeIM_Command_ReceiveContactInvited::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.reason)
  return reason_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ReceiveContactInvited::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ReceiveContactInvited::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_ReceiveContactInvited.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_AgreeContactInvited::kMsgHeadFieldNumber;
const int YouMeIM_Command_AgreeContactInvited::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_AgreeContactInvited::YouMeIM_Command_AgreeContactInvited()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_AgreeContactInvited)
}

void YouMeIM_Command_AgreeContactInvited::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_AgreeContactInvited::YouMeIM_Command_AgreeContactInvited(const YouMeIM_Command_AgreeContactInvited& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_AgreeContactInvited)
}

void YouMeIM_Command_AgreeContactInvited::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_AgreeContactInvited::~YouMeIM_Command_AgreeContactInvited() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_AgreeContactInvited)
  SharedDtor();
}

void YouMeIM_Command_AgreeContactInvited::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_AgreeContactInvited::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_AgreeContactInvited& YouMeIM_Command_AgreeContactInvited::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_AgreeContactInvited* YouMeIM_Command_AgreeContactInvited::default_instance_ = NULL;

YouMeIM_Command_AgreeContactInvited* YouMeIM_Command_AgreeContactInvited::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_AgreeContactInvited* n = new YouMeIM_Command_AgreeContactInvited;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_AgreeContactInvited::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_AgreeContactInvited::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_AgreeContactInvited)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_AgreeContactInvited)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_AgreeContactInvited)
  return false;
#undef DO_
}

void YouMeIM_Command_AgreeContactInvited::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_AgreeContactInvited)
  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_AgreeContactInvited)
}

int YouMeIM_Command_AgreeContactInvited::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_AgreeContactInvited::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_AgreeContactInvited::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_AgreeContactInvited*>(&from));
}

void YouMeIM_Command_AgreeContactInvited::MergeFrom(const YouMeIM_Command_AgreeContactInvited& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_AgreeContactInvited::CopyFrom(const YouMeIM_Command_AgreeContactInvited& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_AgreeContactInvited::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_AgreeContactInvited::Swap(YouMeIM_Command_AgreeContactInvited* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_AgreeContactInvited::InternalSwap(YouMeIM_Command_AgreeContactInvited* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_AgreeContactInvited::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_AgreeContactInvited";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_AgreeContactInvited

// required .YouMeProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_AgreeContactInvited::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_AgreeContactInvited::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_AgreeContactInvited::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_AgreeContactInvited::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_AgreeContactInvited::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AgreeContactInvited.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_AgreeContactInvited::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AgreeContactInvited.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_AgreeContactInvited::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_AgreeContactInvited::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AgreeContactInvited.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_AgreeContactInvited::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_AgreeContactInvited::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_AgreeContactInvited::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_AgreeContactInvited::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_AgreeContactInvited::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AgreeContactInvited.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AgreeContactInvited::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_AgreeContactInvited.YOUMEID)
}
 void YouMeIM_Command_AgreeContactInvited::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_AgreeContactInvited.YOUMEID)
}
 void YouMeIM_Command_AgreeContactInvited::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_AgreeContactInvited.YOUMEID)
}
 ::std::string* YouMeIM_Command_AgreeContactInvited::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AgreeContactInvited.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_AgreeContactInvited::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AgreeContactInvited::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AgreeContactInvited.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_RefuseContactInvited::kMsgHeadFieldNumber;
const int YouMeIM_Command_RefuseContactInvited::kYOUMEIDFieldNumber;
const int YouMeIM_Command_RefuseContactInvited::kReasonFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_RefuseContactInvited::YouMeIM_Command_RefuseContactInvited()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_RefuseContactInvited)
}

void YouMeIM_Command_RefuseContactInvited::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_RefuseContactInvited::YouMeIM_Command_RefuseContactInvited(const YouMeIM_Command_RefuseContactInvited& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_RefuseContactInvited)
}

void YouMeIM_Command_RefuseContactInvited::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_RefuseContactInvited::~YouMeIM_Command_RefuseContactInvited() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_RefuseContactInvited)
  SharedDtor();
}

void YouMeIM_Command_RefuseContactInvited::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_RefuseContactInvited::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_RefuseContactInvited& YouMeIM_Command_RefuseContactInvited::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_RefuseContactInvited* YouMeIM_Command_RefuseContactInvited::default_instance_ = NULL;

YouMeIM_Command_RefuseContactInvited* YouMeIM_Command_RefuseContactInvited::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_RefuseContactInvited* n = new YouMeIM_Command_RefuseContactInvited;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_RefuseContactInvited::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_RefuseContactInvited::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_RefuseContactInvited)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_RefuseContactInvited)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_RefuseContactInvited)
  return false;
#undef DO_
}

void YouMeIM_Command_RefuseContactInvited::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_RefuseContactInvited)
  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_RefuseContactInvited)
}

int YouMeIM_Command_RefuseContactInvited::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_RefuseContactInvited::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string reason = 3;
  if (has_reason()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_RefuseContactInvited::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_RefuseContactInvited*>(&from));
}

void YouMeIM_Command_RefuseContactInvited::MergeFrom(const YouMeIM_Command_RefuseContactInvited& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_RefuseContactInvited::CopyFrom(const YouMeIM_Command_RefuseContactInvited& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_RefuseContactInvited::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_RefuseContactInvited::Swap(YouMeIM_Command_RefuseContactInvited* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_RefuseContactInvited::InternalSwap(YouMeIM_Command_RefuseContactInvited* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_RefuseContactInvited::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_RefuseContactInvited";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_RefuseContactInvited

// required .YouMeProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_RefuseContactInvited::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_RefuseContactInvited::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_RefuseContactInvited::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_RefuseContactInvited::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_RefuseContactInvited::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_RefuseContactInvited::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_RefuseContactInvited::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_RefuseContactInvited::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_RefuseContactInvited::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_RefuseContactInvited::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_RefuseContactInvited::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_RefuseContactInvited::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_RefuseContactInvited::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_RefuseContactInvited::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.YOUMEID)
}
 void YouMeIM_Command_RefuseContactInvited::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.YOUMEID)
}
 void YouMeIM_Command_RefuseContactInvited::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.YOUMEID)
}
 ::std::string* YouMeIM_Command_RefuseContactInvited::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_RefuseContactInvited::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_RefuseContactInvited::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.YOUMEID)
}

// optional string reason = 3;
bool YouMeIM_Command_RefuseContactInvited::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_RefuseContactInvited::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_RefuseContactInvited::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_RefuseContactInvited::clear_reason() {
  reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& YouMeIM_Command_RefuseContactInvited::reason() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.reason)
  return reason_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_RefuseContactInvited::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.reason)
}
 void YouMeIM_Command_RefuseContactInvited::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.reason)
}
 void YouMeIM_Command_RefuseContactInvited::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.reason)
}
 ::std::string* YouMeIM_Command_RefuseContactInvited::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.reason)
  return reason_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_RefuseContactInvited::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_RefuseContactInvited::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_RefuseContactInvited.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_InvitedResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_InvitedResponse::kEvtTypeFieldNumber;
const int YouMeIM_Command_InvitedResponse::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_InvitedResponse::YouMeIM_Command_InvitedResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_InvitedResponse)
}

void YouMeIM_Command_InvitedResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_InvitedResponse::YouMeIM_Command_InvitedResponse(const YouMeIM_Command_InvitedResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_InvitedResponse)
}

void YouMeIM_Command_InvitedResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  evttype_ = 0;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_InvitedResponse::~YouMeIM_Command_InvitedResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_InvitedResponse)
  SharedDtor();
}

void YouMeIM_Command_InvitedResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_InvitedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_InvitedResponse& YouMeIM_Command_InvitedResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_InvitedResponse* YouMeIM_Command_InvitedResponse::default_instance_ = NULL;

YouMeIM_Command_InvitedResponse* YouMeIM_Command_InvitedResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_InvitedResponse* n = new YouMeIM_Command_InvitedResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_InvitedResponse::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    evttype_ = 0;
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_InvitedResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_InvitedResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_evtType;
        break;
      }

      // required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
      case 2: {
        if (tag == 16) {
         parse_evtType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_AddContactEvent_IsValid(value)) {
            set_evttype(static_cast< ::YouMeIMProtocol::YouMeIM_AddContactEvent >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 3;
      case 3: {
        if (tag == 26) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_InvitedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_InvitedResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_InvitedResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_InvitedResponse)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
  if (has_evttype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->evttype(), output);
  }

  // required string YOUMEID = 3;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_InvitedResponse)
}

int YouMeIM_Command_InvitedResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_evttype()) {
    // required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->evttype());
  }

  if (has_youmeid()) {
    // required string YOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_InvitedResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->evttype());

    // required string YOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_InvitedResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_InvitedResponse*>(&from));
}

void YouMeIM_Command_InvitedResponse::MergeFrom(const YouMeIM_Command_InvitedResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_evttype()) {
      set_evttype(from.evttype());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_InvitedResponse::CopyFrom(const YouMeIM_Command_InvitedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_InvitedResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_InvitedResponse::Swap(YouMeIM_Command_InvitedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_InvitedResponse::InternalSwap(YouMeIM_Command_InvitedResponse* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(evttype_, other->evttype_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_InvitedResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_InvitedResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_InvitedResponse

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_InvitedResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_InvitedResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_InvitedResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_InvitedResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_InvitedResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_InvitedResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_InvitedResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_InvitedResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_InvitedResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_InvitedResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_InvitedResponse.msgHead)
}

// required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
bool YouMeIM_Command_InvitedResponse::has_evttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_InvitedResponse::set_has_evttype() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_InvitedResponse::clear_has_evttype() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_InvitedResponse::clear_evttype() {
  evttype_ = 0;
  clear_has_evttype();
}
 ::YouMeIMProtocol::YouMeIM_AddContactEvent YouMeIM_Command_InvitedResponse::evttype() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_InvitedResponse.evtType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_AddContactEvent >(evttype_);
}
 void YouMeIM_Command_InvitedResponse::set_evttype(::YouMeIMProtocol::YouMeIM_AddContactEvent value) {
  assert(::YouMeIMProtocol::YouMeIM_AddContactEvent_IsValid(value));
  set_has_evttype();
  evttype_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_InvitedResponse.evtType)
}

// required string YOUMEID = 3;
bool YouMeIM_Command_InvitedResponse::has_youmeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_InvitedResponse::set_has_youmeid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_InvitedResponse::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_InvitedResponse::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_InvitedResponse::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_InvitedResponse.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_InvitedResponse::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_InvitedResponse.YOUMEID)
}
 void YouMeIM_Command_InvitedResponse::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_InvitedResponse.YOUMEID)
}
 void YouMeIM_Command_InvitedResponse::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_InvitedResponse.YOUMEID)
}
 ::std::string* YouMeIM_Command_InvitedResponse::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_InvitedResponse.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_InvitedResponse::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_InvitedResponse::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_InvitedResponse.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_AddContactResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_AddContactResponse::kEvtTypeFieldNumber;
const int YouMeIM_Command_AddContactResponse::kContactinfoFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_AddContactResponse::YouMeIM_Command_AddContactResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_AddContactResponse)
}

void YouMeIM_Command_AddContactResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  contactinfo_ = const_cast< ::YouMeIMProtocol::ContactInfo*>(
      ::YouMeIMProtocol::ContactInfo::internal_default_instance());
#else
  contactinfo_ = const_cast< ::YouMeIMProtocol::ContactInfo*>(&::YouMeIMProtocol::ContactInfo::default_instance());
#endif
}

YouMeIM_Command_AddContactResponse::YouMeIM_Command_AddContactResponse(const YouMeIM_Command_AddContactResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_AddContactResponse)
}

void YouMeIM_Command_AddContactResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  evttype_ = 0;
  contactinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_AddContactResponse::~YouMeIM_Command_AddContactResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_AddContactResponse)
  SharedDtor();
}

void YouMeIM_Command_AddContactResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete contactinfo_;
  }
}

void YouMeIM_Command_AddContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_AddContactResponse& YouMeIM_Command_AddContactResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_AddContactResponse* YouMeIM_Command_AddContactResponse::default_instance_ = NULL;

YouMeIM_Command_AddContactResponse* YouMeIM_Command_AddContactResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_AddContactResponse* n = new YouMeIM_Command_AddContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_AddContactResponse::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    evttype_ = 0;
    if (has_contactinfo()) {
      if (contactinfo_ != NULL) contactinfo_->::YouMeIMProtocol::ContactInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_AddContactResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_AddContactResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_evtType;
        break;
      }

      // required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
      case 2: {
        if (tag == 16) {
         parse_evtType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_AddContactEvent_IsValid(value)) {
            set_evttype(static_cast< ::YouMeIMProtocol::YouMeIM_AddContactEvent >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_contactinfo;
        break;
      }

      // optional .YouMeProtocol.ContactInfo contactinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_contactinfo:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contactinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_AddContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_AddContactResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_AddContactResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_AddContactResponse)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
  if (has_evttype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->evttype(), output);
  }

  // optional .YouMeProtocol.ContactInfo contactinfo = 3;
  if (has_contactinfo()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->contactinfo_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_AddContactResponse)
}

int YouMeIM_Command_AddContactResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_evttype()) {
    // required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->evttype());
  }

  return total_size;
}
int YouMeIM_Command_AddContactResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->evttype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .YouMeProtocol.ContactInfo contactinfo = 3;
  if (has_contactinfo()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contactinfo_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_AddContactResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_AddContactResponse*>(&from));
}

void YouMeIM_Command_AddContactResponse::MergeFrom(const YouMeIM_Command_AddContactResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_evttype()) {
      set_evttype(from.evttype());
    }
    if (from.has_contactinfo()) {
      mutable_contactinfo()->::YouMeIMProtocol::ContactInfo::MergeFrom(from.contactinfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_AddContactResponse::CopyFrom(const YouMeIM_Command_AddContactResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_AddContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_contactinfo()) {
    if (!this->contactinfo_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_AddContactResponse::Swap(YouMeIM_Command_AddContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_AddContactResponse::InternalSwap(YouMeIM_Command_AddContactResponse* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(evttype_, other->evttype_);
  std::swap(contactinfo_, other->contactinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_AddContactResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_AddContactResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_AddContactResponse

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_AddContactResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_AddContactResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_AddContactResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_AddContactResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_AddContactResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContactResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_AddContactResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContactResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_AddContactResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_AddContactResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContactResponse.msgHead)
}

// required .YouMeProtocol.YouMeIM_AddContactEvent evtType = 2;
bool YouMeIM_Command_AddContactResponse::has_evttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_AddContactResponse::set_has_evttype() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_AddContactResponse::clear_has_evttype() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_AddContactResponse::clear_evttype() {
  evttype_ = 0;
  clear_has_evttype();
}
 ::YouMeIMProtocol::YouMeIM_AddContactEvent YouMeIM_Command_AddContactResponse::evttype() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContactResponse.evtType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_AddContactEvent >(evttype_);
}
 void YouMeIM_Command_AddContactResponse::set_evttype(::YouMeIMProtocol::YouMeIM_AddContactEvent value) {
  assert(::YouMeIMProtocol::YouMeIM_AddContactEvent_IsValid(value));
  set_has_evttype();
  evttype_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_AddContactResponse.evtType)
}

// optional .YouMeProtocol.ContactInfo contactinfo = 3;
bool YouMeIM_Command_AddContactResponse::has_contactinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_AddContactResponse::set_has_contactinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_AddContactResponse::clear_has_contactinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_AddContactResponse::clear_contactinfo() {
  if (contactinfo_ != NULL) contactinfo_->::YouMeIMProtocol::ContactInfo::Clear();
  clear_has_contactinfo();
}
const ::YouMeIMProtocol::ContactInfo& YouMeIM_Command_AddContactResponse::contactinfo() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContactResponse.contactinfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return contactinfo_ != NULL ? *contactinfo_ : *default_instance().contactinfo_;
#else
  return contactinfo_ != NULL ? *contactinfo_ : *default_instance_->contactinfo_;
#endif
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_AddContactResponse::mutable_contactinfo() {
  set_has_contactinfo();
  if (contactinfo_ == NULL) {
    contactinfo_ = new ::YouMeIMProtocol::ContactInfo;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContactResponse.contactinfo)
  return contactinfo_;
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_AddContactResponse::release_contactinfo() {
  clear_has_contactinfo();
  ::YouMeIMProtocol::ContactInfo* temp = contactinfo_;
  contactinfo_ = NULL;
  return temp;
}
void YouMeIM_Command_AddContactResponse::set_allocated_contactinfo(::YouMeIMProtocol::ContactInfo* contactinfo) {
  delete contactinfo_;
  contactinfo_ = contactinfo;
  if (contactinfo) {
    set_has_contactinfo();
  } else {
    clear_has_contactinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContactResponse.contactinfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_DeleteContact::kMsgHeadFieldNumber;
const int YouMeIM_Command_DeleteContact::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_DeleteContact::YouMeIM_Command_DeleteContact()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_DeleteContact)
}

void YouMeIM_Command_DeleteContact::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_DeleteContact::YouMeIM_Command_DeleteContact(const YouMeIM_Command_DeleteContact& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_DeleteContact)
}

void YouMeIM_Command_DeleteContact::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_DeleteContact::~YouMeIM_Command_DeleteContact() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_DeleteContact)
  SharedDtor();
}

void YouMeIM_Command_DeleteContact::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_DeleteContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_DeleteContact& YouMeIM_Command_DeleteContact::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_DeleteContact* YouMeIM_Command_DeleteContact::default_instance_ = NULL;

YouMeIM_Command_DeleteContact* YouMeIM_Command_DeleteContact::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_DeleteContact* n = new YouMeIM_Command_DeleteContact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_DeleteContact::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_DeleteContact::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_DeleteContact)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_DeleteContact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_DeleteContact)
  return false;
#undef DO_
}

void YouMeIM_Command_DeleteContact::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_DeleteContact)
  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_DeleteContact)
}

int YouMeIM_Command_DeleteContact::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_DeleteContact::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_DeleteContact::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_DeleteContact*>(&from));
}

void YouMeIM_Command_DeleteContact::MergeFrom(const YouMeIM_Command_DeleteContact& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_DeleteContact::CopyFrom(const YouMeIM_Command_DeleteContact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_DeleteContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_DeleteContact::Swap(YouMeIM_Command_DeleteContact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_DeleteContact::InternalSwap(YouMeIM_Command_DeleteContact* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_DeleteContact::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_DeleteContact";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_DeleteContact

// required .YouMeProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_DeleteContact::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_DeleteContact::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_DeleteContact::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_DeleteContact::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_DeleteContact::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_DeleteContact.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_DeleteContact::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_DeleteContact.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_DeleteContact::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_DeleteContact::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_DeleteContact.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_DeleteContact::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_DeleteContact::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_DeleteContact::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_DeleteContact::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_DeleteContact::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_DeleteContact.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_DeleteContact::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_DeleteContact.YOUMEID)
}
 void YouMeIM_Command_DeleteContact::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_DeleteContact.YOUMEID)
}
 void YouMeIM_Command_DeleteContact::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_DeleteContact.YOUMEID)
}
 ::std::string* YouMeIM_Command_DeleteContact::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_DeleteContact.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_DeleteContact::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_DeleteContact::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_DeleteContact.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_DeleteContactResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_DeleteContactResponse::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_DeleteContactResponse::YouMeIM_Command_DeleteContactResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_DeleteContactResponse)
}

void YouMeIM_Command_DeleteContactResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_DeleteContactResponse::YouMeIM_Command_DeleteContactResponse(const YouMeIM_Command_DeleteContactResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_DeleteContactResponse)
}

void YouMeIM_Command_DeleteContactResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_DeleteContactResponse::~YouMeIM_Command_DeleteContactResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_DeleteContactResponse)
  SharedDtor();
}

void YouMeIM_Command_DeleteContactResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_DeleteContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_DeleteContactResponse& YouMeIM_Command_DeleteContactResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_DeleteContactResponse* YouMeIM_Command_DeleteContactResponse::default_instance_ = NULL;

YouMeIM_Command_DeleteContactResponse* YouMeIM_Command_DeleteContactResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_DeleteContactResponse* n = new YouMeIM_Command_DeleteContactResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_DeleteContactResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_DeleteContactResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_DeleteContactResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_DeleteContactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_DeleteContactResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_DeleteContactResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_DeleteContactResponse)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_DeleteContactResponse)
}

int YouMeIM_Command_DeleteContactResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_DeleteContactResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_DeleteContactResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_DeleteContactResponse*>(&from));
}

void YouMeIM_Command_DeleteContactResponse::MergeFrom(const YouMeIM_Command_DeleteContactResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_DeleteContactResponse::CopyFrom(const YouMeIM_Command_DeleteContactResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_DeleteContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_DeleteContactResponse::Swap(YouMeIM_Command_DeleteContactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_DeleteContactResponse::InternalSwap(YouMeIM_Command_DeleteContactResponse* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_DeleteContactResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_DeleteContactResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_DeleteContactResponse

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_DeleteContactResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_DeleteContactResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_DeleteContactResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_DeleteContactResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_DeleteContactResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_DeleteContactResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_DeleteContactResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_DeleteContactResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_DeleteContactResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_DeleteContactResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_DeleteContactResponse.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_DeleteContactResponse::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_DeleteContactResponse::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_DeleteContactResponse::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_DeleteContactResponse::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_DeleteContactResponse::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_DeleteContactResponse.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_DeleteContactResponse::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_DeleteContactResponse.YOUMEID)
}
 void YouMeIM_Command_DeleteContactResponse::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_DeleteContactResponse.YOUMEID)
}
 void YouMeIM_Command_DeleteContactResponse::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_DeleteContactResponse.YOUMEID)
}
 ::std::string* YouMeIM_Command_DeleteContactResponse::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_DeleteContactResponse.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_DeleteContactResponse::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_DeleteContactResponse::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_DeleteContactResponse.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_WasDeleted::kMsgHeadFieldNumber;
const int YouMeIM_Command_WasDeleted::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_WasDeleted::YouMeIM_Command_WasDeleted()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_WasDeleted)
}

void YouMeIM_Command_WasDeleted::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_WasDeleted::YouMeIM_Command_WasDeleted(const YouMeIM_Command_WasDeleted& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_WasDeleted)
}

void YouMeIM_Command_WasDeleted::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_WasDeleted::~YouMeIM_Command_WasDeleted() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_WasDeleted)
  SharedDtor();
}

void YouMeIM_Command_WasDeleted::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_WasDeleted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_WasDeleted& YouMeIM_Command_WasDeleted::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_WasDeleted* YouMeIM_Command_WasDeleted::default_instance_ = NULL;

YouMeIM_Command_WasDeleted* YouMeIM_Command_WasDeleted::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_WasDeleted* n = new YouMeIM_Command_WasDeleted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_WasDeleted::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_WasDeleted::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_WasDeleted)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_WasDeleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_WasDeleted)
  return false;
#undef DO_
}

void YouMeIM_Command_WasDeleted::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_WasDeleted)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_WasDeleted)
}

int YouMeIM_Command_WasDeleted::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_WasDeleted::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_WasDeleted::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_WasDeleted*>(&from));
}

void YouMeIM_Command_WasDeleted::MergeFrom(const YouMeIM_Command_WasDeleted& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_WasDeleted::CopyFrom(const YouMeIM_Command_WasDeleted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_WasDeleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_WasDeleted::Swap(YouMeIM_Command_WasDeleted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_WasDeleted::InternalSwap(YouMeIM_Command_WasDeleted* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_WasDeleted::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_WasDeleted";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_WasDeleted

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_WasDeleted::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_WasDeleted::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_WasDeleted::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_WasDeleted::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_WasDeleted::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_WasDeleted.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_WasDeleted::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_WasDeleted.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_WasDeleted::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_WasDeleted::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_WasDeleted.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_WasDeleted::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_WasDeleted::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_WasDeleted::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_WasDeleted::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_WasDeleted::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_WasDeleted.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_WasDeleted::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_WasDeleted.YOUMEID)
}
 void YouMeIM_Command_WasDeleted::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_WasDeleted.YOUMEID)
}
 void YouMeIM_Command_WasDeleted::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_WasDeleted.YOUMEID)
}
 ::std::string* YouMeIM_Command_WasDeleted::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_WasDeleted.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_WasDeleted::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_WasDeleted::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_WasDeleted.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_AddContactToBlacklist::kMsgHeadFieldNumber;
const int YouMeIM_Command_AddContactToBlacklist::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_AddContactToBlacklist::YouMeIM_Command_AddContactToBlacklist()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist)
}

void YouMeIM_Command_AddContactToBlacklist::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_AddContactToBlacklist::YouMeIM_Command_AddContactToBlacklist(const YouMeIM_Command_AddContactToBlacklist& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist)
}

void YouMeIM_Command_AddContactToBlacklist::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_AddContactToBlacklist::~YouMeIM_Command_AddContactToBlacklist() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist)
  SharedDtor();
}

void YouMeIM_Command_AddContactToBlacklist::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_AddContactToBlacklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_AddContactToBlacklist& YouMeIM_Command_AddContactToBlacklist::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_AddContactToBlacklist* YouMeIM_Command_AddContactToBlacklist::default_instance_ = NULL;

YouMeIM_Command_AddContactToBlacklist* YouMeIM_Command_AddContactToBlacklist::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_AddContactToBlacklist* n = new YouMeIM_Command_AddContactToBlacklist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_AddContactToBlacklist::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_AddContactToBlacklist::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist)
  return false;
#undef DO_
}

void YouMeIM_Command_AddContactToBlacklist::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist)
  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist)
}

int YouMeIM_Command_AddContactToBlacklist::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_AddContactToBlacklist::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_AddContactToBlacklist::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_AddContactToBlacklist*>(&from));
}

void YouMeIM_Command_AddContactToBlacklist::MergeFrom(const YouMeIM_Command_AddContactToBlacklist& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_AddContactToBlacklist::CopyFrom(const YouMeIM_Command_AddContactToBlacklist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_AddContactToBlacklist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_AddContactToBlacklist::Swap(YouMeIM_Command_AddContactToBlacklist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_AddContactToBlacklist::InternalSwap(YouMeIM_Command_AddContactToBlacklist* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_AddContactToBlacklist::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_AddContactToBlacklist";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_AddContactToBlacklist

// required .YouMeProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_AddContactToBlacklist::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_AddContactToBlacklist::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_AddContactToBlacklist::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_AddContactToBlacklist::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_AddContactToBlacklist::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_AddContactToBlacklist::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_AddContactToBlacklist::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_AddContactToBlacklist::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_AddContactToBlacklist::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_AddContactToBlacklist::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_AddContactToBlacklist::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_AddContactToBlacklist::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_AddContactToBlacklist::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContactToBlacklist::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist.YOUMEID)
}
 void YouMeIM_Command_AddContactToBlacklist::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist.YOUMEID)
}
 void YouMeIM_Command_AddContactToBlacklist::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist.YOUMEID)
}
 ::std::string* YouMeIM_Command_AddContactToBlacklist::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_AddContactToBlacklist::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContactToBlacklist::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContactToBlacklist.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_AddContactToBlacklistResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_AddContactToBlacklistResponse::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_AddContactToBlacklistResponse::YouMeIM_Command_AddContactToBlacklistResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse)
}

void YouMeIM_Command_AddContactToBlacklistResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_AddContactToBlacklistResponse::YouMeIM_Command_AddContactToBlacklistResponse(const YouMeIM_Command_AddContactToBlacklistResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse)
}

void YouMeIM_Command_AddContactToBlacklistResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_AddContactToBlacklistResponse::~YouMeIM_Command_AddContactToBlacklistResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse)
  SharedDtor();
}

void YouMeIM_Command_AddContactToBlacklistResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_AddContactToBlacklistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_AddContactToBlacklistResponse& YouMeIM_Command_AddContactToBlacklistResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_AddContactToBlacklistResponse* YouMeIM_Command_AddContactToBlacklistResponse::default_instance_ = NULL;

YouMeIM_Command_AddContactToBlacklistResponse* YouMeIM_Command_AddContactToBlacklistResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_AddContactToBlacklistResponse* n = new YouMeIM_Command_AddContactToBlacklistResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_AddContactToBlacklistResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_AddContactToBlacklistResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_AddContactToBlacklistResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse)
}

int YouMeIM_Command_AddContactToBlacklistResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_AddContactToBlacklistResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_AddContactToBlacklistResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_AddContactToBlacklistResponse*>(&from));
}

void YouMeIM_Command_AddContactToBlacklistResponse::MergeFrom(const YouMeIM_Command_AddContactToBlacklistResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_AddContactToBlacklistResponse::CopyFrom(const YouMeIM_Command_AddContactToBlacklistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_AddContactToBlacklistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_AddContactToBlacklistResponse::Swap(YouMeIM_Command_AddContactToBlacklistResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_AddContactToBlacklistResponse::InternalSwap(YouMeIM_Command_AddContactToBlacklistResponse* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_AddContactToBlacklistResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_AddContactToBlacklistResponse

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_AddContactToBlacklistResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_AddContactToBlacklistResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_AddContactToBlacklistResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_AddContactToBlacklistResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_AddContactToBlacklistResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_AddContactToBlacklistResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_AddContactToBlacklistResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_AddContactToBlacklistResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_AddContactToBlacklistResponse::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_AddContactToBlacklistResponse::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_AddContactToBlacklistResponse::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_AddContactToBlacklistResponse::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_AddContactToBlacklistResponse::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContactToBlacklistResponse::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse.YOUMEID)
}
 void YouMeIM_Command_AddContactToBlacklistResponse::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse.YOUMEID)
}
 void YouMeIM_Command_AddContactToBlacklistResponse::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse.YOUMEID)
}
 ::std::string* YouMeIM_Command_AddContactToBlacklistResponse::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_AddContactToBlacklistResponse::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddContactToBlacklistResponse::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddContactToBlacklistResponse.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_AddedToBlacklist::kMsgHeadFieldNumber;
const int YouMeIM_Command_AddedToBlacklist::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_AddedToBlacklist::YouMeIM_Command_AddedToBlacklist()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_AddedToBlacklist)
}

void YouMeIM_Command_AddedToBlacklist::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_AddedToBlacklist::YouMeIM_Command_AddedToBlacklist(const YouMeIM_Command_AddedToBlacklist& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_AddedToBlacklist)
}

void YouMeIM_Command_AddedToBlacklist::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_AddedToBlacklist::~YouMeIM_Command_AddedToBlacklist() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_AddedToBlacklist)
  SharedDtor();
}

void YouMeIM_Command_AddedToBlacklist::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_AddedToBlacklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_AddedToBlacklist& YouMeIM_Command_AddedToBlacklist::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_AddedToBlacklist* YouMeIM_Command_AddedToBlacklist::default_instance_ = NULL;

YouMeIM_Command_AddedToBlacklist* YouMeIM_Command_AddedToBlacklist::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_AddedToBlacklist* n = new YouMeIM_Command_AddedToBlacklist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_AddedToBlacklist::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_AddedToBlacklist::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_AddedToBlacklist)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_AddedToBlacklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_AddedToBlacklist)
  return false;
#undef DO_
}

void YouMeIM_Command_AddedToBlacklist::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_AddedToBlacklist)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_AddedToBlacklist)
}

int YouMeIM_Command_AddedToBlacklist::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_AddedToBlacklist::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_AddedToBlacklist::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_AddedToBlacklist*>(&from));
}

void YouMeIM_Command_AddedToBlacklist::MergeFrom(const YouMeIM_Command_AddedToBlacklist& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_AddedToBlacklist::CopyFrom(const YouMeIM_Command_AddedToBlacklist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_AddedToBlacklist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_AddedToBlacklist::Swap(YouMeIM_Command_AddedToBlacklist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_AddedToBlacklist::InternalSwap(YouMeIM_Command_AddedToBlacklist* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_AddedToBlacklist::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_AddedToBlacklist";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_AddedToBlacklist

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_AddedToBlacklist::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_AddedToBlacklist::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_AddedToBlacklist::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_AddedToBlacklist::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_AddedToBlacklist::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddedToBlacklist.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_AddedToBlacklist::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddedToBlacklist.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_AddedToBlacklist::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_AddedToBlacklist::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddedToBlacklist.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_AddedToBlacklist::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_AddedToBlacklist::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_AddedToBlacklist::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_AddedToBlacklist::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_AddedToBlacklist::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_AddedToBlacklist.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddedToBlacklist::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_AddedToBlacklist.YOUMEID)
}
 void YouMeIM_Command_AddedToBlacklist::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_AddedToBlacklist.YOUMEID)
}
 void YouMeIM_Command_AddedToBlacklist::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_AddedToBlacklist.YOUMEID)
}
 ::std::string* YouMeIM_Command_AddedToBlacklist::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_AddedToBlacklist.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_AddedToBlacklist::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_AddedToBlacklist::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_AddedToBlacklist.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_KickedFromBlacklist::kMsgHeadFieldNumber;
const int YouMeIM_Command_KickedFromBlacklist::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_KickedFromBlacklist::YouMeIM_Command_KickedFromBlacklist()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist)
}

void YouMeIM_Command_KickedFromBlacklist::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_KickedFromBlacklist::YouMeIM_Command_KickedFromBlacklist(const YouMeIM_Command_KickedFromBlacklist& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist)
}

void YouMeIM_Command_KickedFromBlacklist::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_KickedFromBlacklist::~YouMeIM_Command_KickedFromBlacklist() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist)
  SharedDtor();
}

void YouMeIM_Command_KickedFromBlacklist::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_KickedFromBlacklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_KickedFromBlacklist& YouMeIM_Command_KickedFromBlacklist::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_KickedFromBlacklist* YouMeIM_Command_KickedFromBlacklist::default_instance_ = NULL;

YouMeIM_Command_KickedFromBlacklist* YouMeIM_Command_KickedFromBlacklist::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_KickedFromBlacklist* n = new YouMeIM_Command_KickedFromBlacklist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_KickedFromBlacklist::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_KickedFromBlacklist::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist)
  return false;
#undef DO_
}

void YouMeIM_Command_KickedFromBlacklist::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist)
  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist)
}

int YouMeIM_Command_KickedFromBlacklist::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_KickedFromBlacklist::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_KickedFromBlacklist::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_KickedFromBlacklist*>(&from));
}

void YouMeIM_Command_KickedFromBlacklist::MergeFrom(const YouMeIM_Command_KickedFromBlacklist& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_KickedFromBlacklist::CopyFrom(const YouMeIM_Command_KickedFromBlacklist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_KickedFromBlacklist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_KickedFromBlacklist::Swap(YouMeIM_Command_KickedFromBlacklist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_KickedFromBlacklist::InternalSwap(YouMeIM_Command_KickedFromBlacklist* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_KickedFromBlacklist::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_KickedFromBlacklist";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_KickedFromBlacklist

// required .YouMeProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_KickedFromBlacklist::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_KickedFromBlacklist::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_KickedFromBlacklist::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_KickedFromBlacklist::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_KickedFromBlacklist::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_KickedFromBlacklist::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_KickedFromBlacklist::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_KickedFromBlacklist::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_KickedFromBlacklist::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_KickedFromBlacklist::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_KickedFromBlacklist::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_KickedFromBlacklist::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_KickedFromBlacklist::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_KickedFromBlacklist::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist.YOUMEID)
}
 void YouMeIM_Command_KickedFromBlacklist::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist.YOUMEID)
}
 void YouMeIM_Command_KickedFromBlacklist::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist.YOUMEID)
}
 ::std::string* YouMeIM_Command_KickedFromBlacklist::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_KickedFromBlacklist::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_KickedFromBlacklist::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_KickedFromBlacklist.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_KickedFromBlacklistResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_KickedFromBlacklistResponse::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_KickedFromBlacklistResponse::YouMeIM_Command_KickedFromBlacklistResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse)
}

void YouMeIM_Command_KickedFromBlacklistResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_KickedFromBlacklistResponse::YouMeIM_Command_KickedFromBlacklistResponse(const YouMeIM_Command_KickedFromBlacklistResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse)
}

void YouMeIM_Command_KickedFromBlacklistResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_KickedFromBlacklistResponse::~YouMeIM_Command_KickedFromBlacklistResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse)
  SharedDtor();
}

void YouMeIM_Command_KickedFromBlacklistResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_KickedFromBlacklistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_KickedFromBlacklistResponse& YouMeIM_Command_KickedFromBlacklistResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_KickedFromBlacklistResponse* YouMeIM_Command_KickedFromBlacklistResponse::default_instance_ = NULL;

YouMeIM_Command_KickedFromBlacklistResponse* YouMeIM_Command_KickedFromBlacklistResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_KickedFromBlacklistResponse* n = new YouMeIM_Command_KickedFromBlacklistResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_KickedFromBlacklistResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_KickedFromBlacklistResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_KickedFromBlacklistResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse)
}

int YouMeIM_Command_KickedFromBlacklistResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_KickedFromBlacklistResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_KickedFromBlacklistResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_KickedFromBlacklistResponse*>(&from));
}

void YouMeIM_Command_KickedFromBlacklistResponse::MergeFrom(const YouMeIM_Command_KickedFromBlacklistResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_KickedFromBlacklistResponse::CopyFrom(const YouMeIM_Command_KickedFromBlacklistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_KickedFromBlacklistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_KickedFromBlacklistResponse::Swap(YouMeIM_Command_KickedFromBlacklistResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_KickedFromBlacklistResponse::InternalSwap(YouMeIM_Command_KickedFromBlacklistResponse* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_KickedFromBlacklistResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_KickedFromBlacklistResponse

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_KickedFromBlacklistResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_KickedFromBlacklistResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_KickedFromBlacklistResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_KickedFromBlacklistResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_KickedFromBlacklistResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_KickedFromBlacklistResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_KickedFromBlacklistResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_KickedFromBlacklistResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_KickedFromBlacklistResponse::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_KickedFromBlacklistResponse::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_KickedFromBlacklistResponse::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_KickedFromBlacklistResponse::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_KickedFromBlacklistResponse::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_KickedFromBlacklistResponse::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse.YOUMEID)
}
 void YouMeIM_Command_KickedFromBlacklistResponse::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse.YOUMEID)
}
 void YouMeIM_Command_KickedFromBlacklistResponse::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse.YOUMEID)
}
 ::std::string* YouMeIM_Command_KickedFromBlacklistResponse::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_KickedFromBlacklistResponse::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_KickedFromBlacklistResponse::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_KickedFromBlacklistResponse.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_WasKickedFromBlacklist::kMsgHeadFieldNumber;
const int YouMeIM_Command_WasKickedFromBlacklist::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_WasKickedFromBlacklist::YouMeIM_Command_WasKickedFromBlacklist()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist)
}

void YouMeIM_Command_WasKickedFromBlacklist::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_WasKickedFromBlacklist::YouMeIM_Command_WasKickedFromBlacklist(const YouMeIM_Command_WasKickedFromBlacklist& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist)
}

void YouMeIM_Command_WasKickedFromBlacklist::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_WasKickedFromBlacklist::~YouMeIM_Command_WasKickedFromBlacklist() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist)
  SharedDtor();
}

void YouMeIM_Command_WasKickedFromBlacklist::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_WasKickedFromBlacklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_WasKickedFromBlacklist& YouMeIM_Command_WasKickedFromBlacklist::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_WasKickedFromBlacklist* YouMeIM_Command_WasKickedFromBlacklist::default_instance_ = NULL;

YouMeIM_Command_WasKickedFromBlacklist* YouMeIM_Command_WasKickedFromBlacklist::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_WasKickedFromBlacklist* n = new YouMeIM_Command_WasKickedFromBlacklist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_WasKickedFromBlacklist::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_WasKickedFromBlacklist::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist)
  return false;
#undef DO_
}

void YouMeIM_Command_WasKickedFromBlacklist::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist)
}

int YouMeIM_Command_WasKickedFromBlacklist::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_WasKickedFromBlacklist::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_WasKickedFromBlacklist::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_WasKickedFromBlacklist*>(&from));
}

void YouMeIM_Command_WasKickedFromBlacklist::MergeFrom(const YouMeIM_Command_WasKickedFromBlacklist& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_WasKickedFromBlacklist::CopyFrom(const YouMeIM_Command_WasKickedFromBlacklist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_WasKickedFromBlacklist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_WasKickedFromBlacklist::Swap(YouMeIM_Command_WasKickedFromBlacklist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_WasKickedFromBlacklist::InternalSwap(YouMeIM_Command_WasKickedFromBlacklist* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_WasKickedFromBlacklist::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_WasKickedFromBlacklist

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_WasKickedFromBlacklist::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_WasKickedFromBlacklist::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_WasKickedFromBlacklist::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_WasKickedFromBlacklist::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_WasKickedFromBlacklist::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_WasKickedFromBlacklist::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_WasKickedFromBlacklist::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_WasKickedFromBlacklist::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_WasKickedFromBlacklist::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_WasKickedFromBlacklist::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_WasKickedFromBlacklist::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_WasKickedFromBlacklist::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_WasKickedFromBlacklist::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_WasKickedFromBlacklist::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist.YOUMEID)
}
 void YouMeIM_Command_WasKickedFromBlacklist::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist.YOUMEID)
}
 void YouMeIM_Command_WasKickedFromBlacklist::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist.YOUMEID)
}
 ::std::string* YouMeIM_Command_WasKickedFromBlacklist::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_WasKickedFromBlacklist::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_WasKickedFromBlacklist::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_WasKickedFromBlacklist.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetContactInfo::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetContactInfo::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetContactInfo::YouMeIM_Command_GetContactInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_GetContactInfo)
}

void YouMeIM_Command_GetContactInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_GetContactInfo::YouMeIM_Command_GetContactInfo(const YouMeIM_Command_GetContactInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_GetContactInfo)
}

void YouMeIM_Command_GetContactInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetContactInfo::~YouMeIM_Command_GetContactInfo() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_GetContactInfo)
  SharedDtor();
}

void YouMeIM_Command_GetContactInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetContactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetContactInfo& YouMeIM_Command_GetContactInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetContactInfo* YouMeIM_Command_GetContactInfo::default_instance_ = NULL;

YouMeIM_Command_GetContactInfo* YouMeIM_Command_GetContactInfo::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetContactInfo* n = new YouMeIM_Command_GetContactInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetContactInfo::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  }
  youmeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetContactInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_GetContactInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // repeated string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_GetContactInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_GetContactInfo)
  return false;
#undef DO_
}

void YouMeIM_Command_GetContactInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_GetContactInfo)
  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // repeated string YOUMEID = 2;
  for (int i = 0; i < this->youmeid_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteString(
      2, this->youmeid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_GetContactInfo)
}

int YouMeIM_Command_GetContactInfo::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  // repeated string YOUMEID = 2;
  total_size += 1 * this->youmeid_size();
  for (int i = 0; i < this->youmeid_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
      this->youmeid(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetContactInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetContactInfo*>(&from));
}

void YouMeIM_Command_GetContactInfo::MergeFrom(const YouMeIM_Command_GetContactInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  youmeid_.MergeFrom(from.youmeid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetContactInfo::CopyFrom(const YouMeIM_Command_GetContactInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetContactInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_GetContactInfo::Swap(YouMeIM_Command_GetContactInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetContactInfo::InternalSwap(YouMeIM_Command_GetContactInfo* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.UnsafeArenaSwap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetContactInfo::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_GetContactInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetContactInfo

// required .YouMeProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_GetContactInfo::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetContactInfo::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetContactInfo::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetContactInfo::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_GetContactInfo::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetContactInfo.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetContactInfo::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetContactInfo.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetContactInfo::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetContactInfo::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_GetContactInfo.msgHead)
}

// repeated string YOUMEID = 2;
int YouMeIM_Command_GetContactInfo::youmeid_size() const {
  return youmeid_.size();
}
void YouMeIM_Command_GetContactInfo::clear_youmeid() {
  youmeid_.Clear();
}
 const ::std::string& YouMeIM_Command_GetContactInfo::youmeid(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
  return youmeid_.Get(index);
}
 ::std::string* YouMeIM_Command_GetContactInfo::mutable_youmeid(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
  return youmeid_.Mutable(index);
}
 void YouMeIM_Command_GetContactInfo::set_youmeid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
  youmeid_.Mutable(index)->assign(value);
}
 void YouMeIM_Command_GetContactInfo::set_youmeid(int index, const char* value) {
  youmeid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
}
 void YouMeIM_Command_GetContactInfo::set_youmeid(int index, const char* value, size_t size) {
  youmeid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
}
 ::std::string* YouMeIM_Command_GetContactInfo::add_youmeid() {
  return youmeid_.Add();
}
 void YouMeIM_Command_GetContactInfo::add_youmeid(const ::std::string& value) {
  youmeid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
}
 void YouMeIM_Command_GetContactInfo::add_youmeid(const char* value) {
  youmeid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
}
 void YouMeIM_Command_GetContactInfo::add_youmeid(const char* value, size_t size) {
  youmeid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
YouMeIM_Command_GetContactInfo::youmeid() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
  return youmeid_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
YouMeIM_Command_GetContactInfo::mutable_youmeid() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeIM_Command_GetContactInfo.YOUMEID)
  return &youmeid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetContactInfoResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetContactInfoResponse::kContactInfoListFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetContactInfoResponse::YouMeIM_Command_GetContactInfoResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse)
}

void YouMeIM_Command_GetContactInfoResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_GetContactInfoResponse::YouMeIM_Command_GetContactInfoResponse(const YouMeIM_Command_GetContactInfoResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse)
}

void YouMeIM_Command_GetContactInfoResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetContactInfoResponse::~YouMeIM_Command_GetContactInfoResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse)
  SharedDtor();
}

void YouMeIM_Command_GetContactInfoResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetContactInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetContactInfoResponse& YouMeIM_Command_GetContactInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcontact_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcontact_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetContactInfoResponse* YouMeIM_Command_GetContactInfoResponse::default_instance_ = NULL;

YouMeIM_Command_GetContactInfoResponse* YouMeIM_Command_GetContactInfoResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetContactInfoResponse* n = new YouMeIM_Command_GetContactInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetContactInfoResponse::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  }
  contactinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetContactInfoResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contactInfoList;
        break;
      }

      // repeated .YouMeProtocol.ContactInfo contactInfoList = 2;
      case 2: {
        if (tag == 18) {
         parse_contactInfoList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_contactInfoList:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contactinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_contactInfoList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_GetContactInfoResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse)
  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // repeated .YouMeProtocol.ContactInfo contactInfoList = 2;
  for (unsigned int i = 0, n = this->contactinfolist_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->contactinfolist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse)
}

int YouMeIM_Command_GetContactInfoResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  // repeated .YouMeProtocol.ContactInfo contactInfoList = 2;
  total_size += 1 * this->contactinfolist_size();
  for (int i = 0; i < this->contactinfolist_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactinfolist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetContactInfoResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetContactInfoResponse*>(&from));
}

void YouMeIM_Command_GetContactInfoResponse::MergeFrom(const YouMeIM_Command_GetContactInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  contactinfolist_.MergeFrom(from.contactinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetContactInfoResponse::CopyFrom(const YouMeIM_Command_GetContactInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetContactInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->contactinfolist())) return false;
  return true;
}

void YouMeIM_Command_GetContactInfoResponse::Swap(YouMeIM_Command_GetContactInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetContactInfoResponse::InternalSwap(YouMeIM_Command_GetContactInfoResponse* other) {
  std::swap(msghead_, other->msghead_);
  contactinfolist_.UnsafeArenaSwap(&other->contactinfolist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetContactInfoResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeIM_Command_GetContactInfoResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetContactInfoResponse

// required .YouMeProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_GetContactInfoResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetContactInfoResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetContactInfoResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetContactInfoResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_GetContactInfoResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetContactInfoResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetContactInfoResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetContactInfoResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse.msgHead)
}

// repeated .YouMeProtocol.ContactInfo contactInfoList = 2;
int YouMeIM_Command_GetContactInfoResponse::contactinfolist_size() const {
  return contactinfolist_.size();
}
void YouMeIM_Command_GetContactInfoResponse::clear_contactinfolist() {
  contactinfolist_.Clear();
}
const ::YouMeIMProtocol::ContactInfo& YouMeIM_Command_GetContactInfoResponse::contactinfolist(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse.contactInfoList)
  return contactinfolist_.Get(index);
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_GetContactInfoResponse::mutable_contactinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse.contactInfoList)
  return contactinfolist_.Mutable(index);
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_GetContactInfoResponse::add_contactinfolist() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse.contactInfoList)
  return contactinfolist_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::ContactInfo >*
YouMeIM_Command_GetContactInfoResponse::mutable_contactinfolist() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse.contactInfoList)
  return &contactinfolist_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::ContactInfo >&
YouMeIM_Command_GetContactInfoResponse::contactinfolist() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeIM_Command_GetContactInfoResponse.contactInfoList)
  return contactinfolist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeProtocol

// @@protoc_insertion_point(global_scope)
