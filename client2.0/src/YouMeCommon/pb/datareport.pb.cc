// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datareport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datareport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YouMeCommonProtocol {

void protobuf_ShutdownFile_datareport_2eproto() {
  delete DataReportRequest::default_instance_;
  delete DataReportResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_datareport_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_datareport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YouMeCommonProtocol::protobuf_AddDesc_common_2eproto();
  DataReportRequest::default_instance_ = new DataReportRequest();
  DataReportResponse::default_instance_ = new DataReportResponse();
  DataReportRequest::default_instance_->InitAsDefaultInstance();
  DataReportResponse::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datareport_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_datareport_2eproto_once_);
void protobuf_AddDesc_datareport_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_datareport_2eproto_once_,
                 &protobuf_AddDesc_datareport_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datareport_2eproto {
  StaticDescriptorInitializer_datareport_2eproto() {
    protobuf_AddDesc_datareport_2eproto();
  }
} static_descriptor_initializer_datareport_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int DataReportRequest::kMsgHeadFieldNumber;
const int DataReportRequest::kContentsFieldNumber;
const int DataReportRequest::kReportTimeFieldNumber;
#endif  // !_MSC_VER

DataReportRequest::DataReportRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeCommonProtocol.DataReportRequest)
}

void DataReportRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeCommonProtocol::PacketHead*>(
      ::YouMeCommonProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeCommonProtocol::PacketHead*>(&::YouMeCommonProtocol::PacketHead::default_instance());
#endif
}

DataReportRequest::DataReportRequest(const DataReportRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeCommonProtocol.DataReportRequest)
}

void DataReportRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  reporttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReportRequest::~DataReportRequest() {
  // @@protoc_insertion_point(destructor:YouMeCommonProtocol.DataReportRequest)
  SharedDtor();
}

void DataReportRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void DataReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataReportRequest& DataReportRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_datareport_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_datareport_2eproto();
#endif
  return *default_instance_;
}

DataReportRequest* DataReportRequest::default_instance_ = NULL;

DataReportRequest* DataReportRequest::New(::youmecommon::protobuf::Arena* arena) const {
  DataReportRequest* n = new DataReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReportRequest::Clear() {
  if (_has_bits_[0 / 32] & 5u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeCommonProtocol::PacketHead::Clear();
    }
    reporttime_ = GOOGLE_LONGLONG(0);
  }
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DataReportRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeCommonProtocol.DataReportRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeCommonProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // repeated .YouMeCommonProtocol.NameValue contents = 2;
      case 2: {
        if (tag == 18) {
         parse_contents:
          DO_(input->IncrementRecursionDepth());
         parse_loop_contents:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_contents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_reportTime;
        break;
      }

      // optional int64 reportTime = 3;
      case 3: {
        if (tag == 24) {
         parse_reportTime:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reporttime_)));
          set_has_reporttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeCommonProtocol.DataReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeCommonProtocol.DataReportRequest)
  return false;
#undef DO_
}

void DataReportRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeCommonProtocol.DataReportRequest)
  // required .YouMeCommonProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // repeated .YouMeCommonProtocol.NameValue contents = 2;
  for (unsigned int i = 0, n = this->contents_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->contents(i), output);
  }

  // optional int64 reportTime = 3;
  if (has_reporttime()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(3, this->reporttime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeCommonProtocol.DataReportRequest)
}

int DataReportRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeCommonProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  // optional int64 reportTime = 3;
  if (has_reporttime()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->reporttime());
  }

  // repeated .YouMeCommonProtocol.NameValue contents = 2;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contents(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReportRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const DataReportRequest*>(&from));
}

void DataReportRequest::MergeFrom(const DataReportRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  contents_.MergeFrom(from.contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeCommonProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_reporttime()) {
      set_reporttime(from.reporttime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataReportRequest::CopyFrom(const DataReportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReportRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->contents())) return false;
  return true;
}

void DataReportRequest::Swap(DataReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReportRequest::InternalSwap(DataReportRequest* other) {
  std::swap(msghead_, other->msghead_);
  contents_.UnsafeArenaSwap(&other->contents_);
  std::swap(reporttime_, other->reporttime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DataReportRequest::GetTypeName() const {
  return "YouMeCommonProtocol.DataReportRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReportRequest

// required .YouMeCommonProtocol.PacketHead msgHead = 1;
bool DataReportRequest::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataReportRequest::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void DataReportRequest::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataReportRequest::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeCommonProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeCommonProtocol::PacketHead& DataReportRequest::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.DataReportRequest.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeCommonProtocol::PacketHead* DataReportRequest::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeCommonProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.DataReportRequest.msgHead)
  return msghead_;
}
::YouMeCommonProtocol::PacketHead* DataReportRequest::release_msghead() {
  clear_has_msghead();
  ::YouMeCommonProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void DataReportRequest::set_allocated_msghead(::YouMeCommonProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.DataReportRequest.msgHead)
}

// repeated .YouMeCommonProtocol.NameValue contents = 2;
int DataReportRequest::contents_size() const {
  return contents_.size();
}
void DataReportRequest::clear_contents() {
  contents_.Clear();
}
const ::YouMeCommonProtocol::NameValue& DataReportRequest::contents(int index) const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.DataReportRequest.contents)
  return contents_.Get(index);
}
::YouMeCommonProtocol::NameValue* DataReportRequest::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.DataReportRequest.contents)
  return contents_.Mutable(index);
}
::YouMeCommonProtocol::NameValue* DataReportRequest::add_contents() {
  // @@protoc_insertion_point(field_add:YouMeCommonProtocol.DataReportRequest.contents)
  return contents_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeCommonProtocol::NameValue >*
DataReportRequest::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:YouMeCommonProtocol.DataReportRequest.contents)
  return &contents_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeCommonProtocol::NameValue >&
DataReportRequest::contents() const {
  // @@protoc_insertion_point(field_list:YouMeCommonProtocol.DataReportRequest.contents)
  return contents_;
}

// optional int64 reportTime = 3;
bool DataReportRequest::has_reporttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataReportRequest::set_has_reporttime() {
  _has_bits_[0] |= 0x00000004u;
}
void DataReportRequest::clear_has_reporttime() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataReportRequest::clear_reporttime() {
  reporttime_ = GOOGLE_LONGLONG(0);
  clear_has_reporttime();
}
 ::youmecommon::protobuf::int64 DataReportRequest::reporttime() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.DataReportRequest.reportTime)
  return reporttime_;
}
 void DataReportRequest::set_reporttime(::youmecommon::protobuf::int64 value) {
  set_has_reporttime();
  reporttime_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.DataReportRequest.reportTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DataReportResponse::kServerHeadFieldNumber;
#endif  // !_MSC_VER

DataReportResponse::DataReportResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeCommonProtocol.DataReportResponse)
}

void DataReportResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  serverhead_ = const_cast< ::YouMeCommonProtocol::ServerPacketHead*>(
      ::YouMeCommonProtocol::ServerPacketHead::internal_default_instance());
#else
  serverhead_ = const_cast< ::YouMeCommonProtocol::ServerPacketHead*>(&::YouMeCommonProtocol::ServerPacketHead::default_instance());
#endif
}

DataReportResponse::DataReportResponse(const DataReportResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeCommonProtocol.DataReportResponse)
}

void DataReportResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  serverhead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReportResponse::~DataReportResponse() {
  // @@protoc_insertion_point(destructor:YouMeCommonProtocol.DataReportResponse)
  SharedDtor();
}

void DataReportResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete serverhead_;
  }
}

void DataReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataReportResponse& DataReportResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_datareport_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_datareport_2eproto();
#endif
  return *default_instance_;
}

DataReportResponse* DataReportResponse::default_instance_ = NULL;

DataReportResponse* DataReportResponse::New(::youmecommon::protobuf::Arena* arena) const {
  DataReportResponse* n = new DataReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReportResponse::Clear() {
  if (has_serverhead()) {
    if (serverhead_ != NULL) serverhead_->::YouMeCommonProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DataReportResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeCommonProtocol.DataReportResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeCommonProtocol.ServerPacketHead serverHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverhead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeCommonProtocol.DataReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeCommonProtocol.DataReportResponse)
  return false;
#undef DO_
}

void DataReportResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeCommonProtocol.DataReportResponse)
  // required .YouMeCommonProtocol.ServerPacketHead serverHead = 1;
  if (has_serverhead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->serverhead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeCommonProtocol.DataReportResponse)
}

int DataReportResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeCommonProtocol.ServerPacketHead serverHead = 1;
  if (has_serverhead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serverhead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReportResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const DataReportResponse*>(&from));
}

void DataReportResponse::MergeFrom(const DataReportResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverhead()) {
      mutable_serverhead()->::YouMeCommonProtocol::ServerPacketHead::MergeFrom(from.serverhead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataReportResponse::CopyFrom(const DataReportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReportResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_serverhead()) {
    if (!this->serverhead_->IsInitialized()) return false;
  }
  return true;
}

void DataReportResponse::Swap(DataReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReportResponse::InternalSwap(DataReportResponse* other) {
  std::swap(serverhead_, other->serverhead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DataReportResponse::GetTypeName() const {
  return "YouMeCommonProtocol.DataReportResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReportResponse

// required .YouMeCommonProtocol.ServerPacketHead serverHead = 1;
bool DataReportResponse::has_serverhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataReportResponse::set_has_serverhead() {
  _has_bits_[0] |= 0x00000001u;
}
void DataReportResponse::clear_has_serverhead() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataReportResponse::clear_serverhead() {
  if (serverhead_ != NULL) serverhead_->::YouMeCommonProtocol::ServerPacketHead::Clear();
  clear_has_serverhead();
}
const ::YouMeCommonProtocol::ServerPacketHead& DataReportResponse::serverhead() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.DataReportResponse.serverHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return serverhead_ != NULL ? *serverhead_ : *default_instance().serverhead_;
#else
  return serverhead_ != NULL ? *serverhead_ : *default_instance_->serverhead_;
#endif
}
::YouMeCommonProtocol::ServerPacketHead* DataReportResponse::mutable_serverhead() {
  set_has_serverhead();
  if (serverhead_ == NULL) {
    serverhead_ = new ::YouMeCommonProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.DataReportResponse.serverHead)
  return serverhead_;
}
::YouMeCommonProtocol::ServerPacketHead* DataReportResponse::release_serverhead() {
  clear_has_serverhead();
  ::YouMeCommonProtocol::ServerPacketHead* temp = serverhead_;
  serverhead_ = NULL;
  return temp;
}
void DataReportResponse::set_allocated_serverhead(::YouMeCommonProtocol::ServerPacketHead* serverhead) {
  delete serverhead_;
  serverhead_ = serverhead;
  if (serverhead) {
    set_has_serverhead();
  } else {
    clear_has_serverhead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.DataReportResponse.serverHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeCommonProtocol

// @@protoc_insertion_point(global_scope)
