// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YouMeIMProtocol {

void protobuf_ShutdownFile_im_5fmessage_2eproto() {
  delete YouMeIM_MessageBodyCustom::default_instance_;
  delete YouMeIM_MessageBodyText::default_instance_;
  delete YouMeIM_MessageBodyEmoji::default_instance_;
  delete YouMeIM_MessageBodyFile::default_instance_;
  delete YouMeIM_MessageBodyVoice::default_instance_;
  delete YouMeIM_Command_ClientToServerCustom::default_instance_;
  delete YouMeIM_Command_ClientToServerText::default_instance_;
  delete YouMeIM_Command_ClientToServerEmoji::default_instance_;
  delete YouMeIM_Command_ClientToServerFile::default_instance_;
  delete YouMeIM_Command_ClientToServerVoice::default_instance_;
  delete YouMeIM_Command_ServerToClientCustom::default_instance_;
  delete YouMeIM_Command_ServerToClientText::default_instance_;
  delete YouMeIM_Command_ServerToClientEmoji::default_instance_;
  delete YouMeIM_Command_ServerToClientFile::default_instance_;
  delete YouMeIM_Command_ServerToClientVoice::default_instance_;
  delete YouMeIM_Command_MessageAck::default_instance_;
  delete YouMeIM_Command_GetOfflineMsg::default_instance_;
  delete YouMeIM_Command_GetOfflineMsgResponse::default_instance_;
  delete YouMeIM_Command_GetUploadToken::default_instance_;
  delete YouMeIM_Command_GetUploadTokenResponse::default_instance_;
  delete YouMeIM_Command_GetDownloadToken::default_instance_;
  delete YouMeIM_Command_GetDownloadTokenResponse::default_instance_;
  delete YouMeIM_Command_GetMessageNotify::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YouMeIMProtocol::protobuf_AddDesc_im_5fcommon_2eproto();
  YouMeIM_MessageBodyCustom::default_instance_ = new YouMeIM_MessageBodyCustom();
  YouMeIM_MessageBodyText::default_instance_ = new YouMeIM_MessageBodyText();
  YouMeIM_MessageBodyEmoji::default_instance_ = new YouMeIM_MessageBodyEmoji();
  YouMeIM_MessageBodyFile::default_instance_ = new YouMeIM_MessageBodyFile();
  YouMeIM_MessageBodyVoice::default_instance_ = new YouMeIM_MessageBodyVoice();
  YouMeIM_Command_ClientToServerCustom::default_instance_ = new YouMeIM_Command_ClientToServerCustom();
  YouMeIM_Command_ClientToServerText::default_instance_ = new YouMeIM_Command_ClientToServerText();
  YouMeIM_Command_ClientToServerEmoji::default_instance_ = new YouMeIM_Command_ClientToServerEmoji();
  YouMeIM_Command_ClientToServerFile::default_instance_ = new YouMeIM_Command_ClientToServerFile();
  YouMeIM_Command_ClientToServerVoice::default_instance_ = new YouMeIM_Command_ClientToServerVoice();
  YouMeIM_Command_ServerToClientCustom::default_instance_ = new YouMeIM_Command_ServerToClientCustom();
  YouMeIM_Command_ServerToClientText::default_instance_ = new YouMeIM_Command_ServerToClientText();
  YouMeIM_Command_ServerToClientEmoji::default_instance_ = new YouMeIM_Command_ServerToClientEmoji();
  YouMeIM_Command_ServerToClientFile::default_instance_ = new YouMeIM_Command_ServerToClientFile();
  YouMeIM_Command_ServerToClientVoice::default_instance_ = new YouMeIM_Command_ServerToClientVoice();
  YouMeIM_Command_MessageAck::default_instance_ = new YouMeIM_Command_MessageAck();
  YouMeIM_Command_GetOfflineMsg::default_instance_ = new YouMeIM_Command_GetOfflineMsg();
  YouMeIM_Command_GetOfflineMsgResponse::default_instance_ = new YouMeIM_Command_GetOfflineMsgResponse();
  YouMeIM_Command_GetUploadToken::default_instance_ = new YouMeIM_Command_GetUploadToken();
  YouMeIM_Command_GetUploadTokenResponse::default_instance_ = new YouMeIM_Command_GetUploadTokenResponse();
  YouMeIM_Command_GetDownloadToken::default_instance_ = new YouMeIM_Command_GetDownloadToken();
  YouMeIM_Command_GetDownloadTokenResponse::default_instance_ = new YouMeIM_Command_GetDownloadTokenResponse();
  YouMeIM_Command_GetMessageNotify::default_instance_ = new YouMeIM_Command_GetMessageNotify();
  YouMeIM_MessageBodyCustom::default_instance_->InitAsDefaultInstance();
  YouMeIM_MessageBodyText::default_instance_->InitAsDefaultInstance();
  YouMeIM_MessageBodyEmoji::default_instance_->InitAsDefaultInstance();
  YouMeIM_MessageBodyFile::default_instance_->InitAsDefaultInstance();
  YouMeIM_MessageBodyVoice::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ClientToServerCustom::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ClientToServerText::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ClientToServerEmoji::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ClientToServerFile::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ClientToServerVoice::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ServerToClientCustom::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ServerToClientText::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ServerToClientEmoji::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ServerToClientFile::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ServerToClientVoice::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_MessageAck::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetOfflineMsg::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetOfflineMsgResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetUploadToken::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetUploadTokenResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetDownloadToken::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetDownloadTokenResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_GetMessageNotify::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_5fmessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_5fmessage_2eproto_once_);
void protobuf_AddDesc_im_5fmessage_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_im_5fmessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_5fmessage_2eproto {
  StaticDescriptorInitializer_im_5fmessage_2eproto() {
    protobuf_AddDesc_im_5fmessage_2eproto();
  }
} static_descriptor_initializer_im_5fmessage_2eproto_;
#endif
bool YouMeIM_ChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool YouMeIM_MessageBodyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_MessageBodyCustom::kMsgTypeFieldNumber;
const int YouMeIM_MessageBodyCustom::kCustomContentFieldNumber;
#endif  // !_MSC_VER

YouMeIM_MessageBodyCustom::YouMeIM_MessageBodyCustom()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_MessageBodyCustom)
}

void YouMeIM_MessageBodyCustom::InitAsDefaultInstance() {
}

YouMeIM_MessageBodyCustom::YouMeIM_MessageBodyCustom(const YouMeIM_MessageBodyCustom& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_MessageBodyCustom)
}

void YouMeIM_MessageBodyCustom::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  customcontent_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_MessageBodyCustom::~YouMeIM_MessageBodyCustom() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_MessageBodyCustom)
  SharedDtor();
}

void YouMeIM_MessageBodyCustom::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  customcontent_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeIM_MessageBodyCustom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_MessageBodyCustom& YouMeIM_MessageBodyCustom::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_MessageBodyCustom* YouMeIM_MessageBodyCustom::default_instance_ = NULL;

YouMeIM_MessageBodyCustom* YouMeIM_MessageBodyCustom::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_MessageBodyCustom* n = new YouMeIM_MessageBodyCustom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_MessageBodyCustom::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    msgtype_ = 0;
    if (has_customcontent()) {
      customcontent_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_MessageBodyCustom::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_MessageBodyCustom)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value)) {
            set_msgtype(static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_customContent;
        break;
      }

      // required bytes customContent = 2;
      case 2: {
        if (tag == 18) {
         parse_customContent:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_customcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_MessageBodyCustom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_MessageBodyCustom)
  return false;
#undef DO_
}

void YouMeIM_MessageBodyCustom::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_MessageBodyCustom)
  // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required bytes customContent = 2;
  if (has_customcontent()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->customcontent(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_MessageBodyCustom)
}

int YouMeIM_MessageBodyCustom::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  if (has_customcontent()) {
    // required bytes customContent = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->customcontent());
  }

  return total_size;
}
int YouMeIM_MessageBodyCustom::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

    // required bytes customContent = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->customcontent());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_MessageBodyCustom::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_MessageBodyCustom*>(&from));
}

void YouMeIM_MessageBodyCustom::MergeFrom(const YouMeIM_MessageBodyCustom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_customcontent()) {
      set_has_customcontent();
      customcontent_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.customcontent_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_MessageBodyCustom::CopyFrom(const YouMeIM_MessageBodyCustom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_MessageBodyCustom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void YouMeIM_MessageBodyCustom::Swap(YouMeIM_MessageBodyCustom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_MessageBodyCustom::InternalSwap(YouMeIM_MessageBodyCustom* other) {
  std::swap(msgtype_, other->msgtype_);
  customcontent_.Swap(&other->customcontent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_MessageBodyCustom::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_MessageBodyCustom";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_MessageBodyCustom

// required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
bool YouMeIM_MessageBodyCustom::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_MessageBodyCustom::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_MessageBodyCustom::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_MessageBodyCustom::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::YouMeIMProtocol::YouMeIM_MessageBodyType YouMeIM_MessageBodyCustom::msgtype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyCustom.msgType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(msgtype_);
}
 void YouMeIM_MessageBodyCustom::set_msgtype(::YouMeIMProtocol::YouMeIM_MessageBodyType value) {
  assert(::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyCustom.msgType)
}

// required bytes customContent = 2;
bool YouMeIM_MessageBodyCustom::has_customcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_MessageBodyCustom::set_has_customcontent() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_MessageBodyCustom::clear_has_customcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_MessageBodyCustom::clear_customcontent() {
  customcontent_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customcontent();
}
 const ::std::string& YouMeIM_MessageBodyCustom::customcontent() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyCustom.customContent)
  return customcontent_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyCustom::set_customcontent(const ::std::string& value) {
  set_has_customcontent();
  customcontent_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyCustom.customContent)
}
 void YouMeIM_MessageBodyCustom::set_customcontent(const char* value) {
  set_has_customcontent();
  customcontent_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyCustom.customContent)
}
 void YouMeIM_MessageBodyCustom::set_customcontent(const void* value, size_t size) {
  set_has_customcontent();
  customcontent_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyCustom.customContent)
}
 ::std::string* YouMeIM_MessageBodyCustom::mutable_customcontent() {
  set_has_customcontent();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyCustom.customContent)
  return customcontent_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyCustom::release_customcontent() {
  clear_has_customcontent();
  return customcontent_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyCustom::set_allocated_customcontent(::std::string* customcontent) {
  if (customcontent != NULL) {
    set_has_customcontent();
  } else {
    clear_has_customcontent();
  }
  customcontent_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), customcontent);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyCustom.customContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_MessageBodyText::kMsgTypeFieldNumber;
const int YouMeIM_MessageBodyText::kContentFieldNumber;
#endif  // !_MSC_VER

YouMeIM_MessageBodyText::YouMeIM_MessageBodyText()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_MessageBodyText)
}

void YouMeIM_MessageBodyText::InitAsDefaultInstance() {
}

YouMeIM_MessageBodyText::YouMeIM_MessageBodyText(const YouMeIM_MessageBodyText& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_MessageBodyText)
}

void YouMeIM_MessageBodyText::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  content_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_MessageBodyText::~YouMeIM_MessageBodyText() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_MessageBodyText)
  SharedDtor();
}

void YouMeIM_MessageBodyText::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeIM_MessageBodyText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_MessageBodyText& YouMeIM_MessageBodyText::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_MessageBodyText* YouMeIM_MessageBodyText::default_instance_ = NULL;

YouMeIM_MessageBodyText* YouMeIM_MessageBodyText::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_MessageBodyText* n = new YouMeIM_MessageBodyText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_MessageBodyText::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    msgtype_ = 0;
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_MessageBodyText::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_MessageBodyText)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value)) {
            set_msgtype(static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_MessageBodyText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_MessageBodyText)
  return false;
#undef DO_
}

void YouMeIM_MessageBodyText::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_MessageBodyText)
  // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_MessageBodyText)
}

int YouMeIM_MessageBodyText::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  if (has_content()) {
    // required string content = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  return total_size;
}
int YouMeIM_MessageBodyText::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

    // required string content = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->content());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_MessageBodyText::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_MessageBodyText*>(&from));
}

void YouMeIM_MessageBodyText::MergeFrom(const YouMeIM_MessageBodyText& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_MessageBodyText::CopyFrom(const YouMeIM_MessageBodyText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_MessageBodyText::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void YouMeIM_MessageBodyText::Swap(YouMeIM_MessageBodyText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_MessageBodyText::InternalSwap(YouMeIM_MessageBodyText* other) {
  std::swap(msgtype_, other->msgtype_);
  content_.Swap(&other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_MessageBodyText::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_MessageBodyText";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_MessageBodyText

// required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
bool YouMeIM_MessageBodyText::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_MessageBodyText::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_MessageBodyText::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_MessageBodyText::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::YouMeIMProtocol::YouMeIM_MessageBodyType YouMeIM_MessageBodyText::msgtype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyText.msgType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(msgtype_);
}
 void YouMeIM_MessageBodyText::set_msgtype(::YouMeIMProtocol::YouMeIM_MessageBodyType value) {
  assert(::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyText.msgType)
}

// required string content = 2;
bool YouMeIM_MessageBodyText::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_MessageBodyText::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_MessageBodyText::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_MessageBodyText::clear_content() {
  content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& YouMeIM_MessageBodyText::content() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyText.content)
  return content_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyText::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyText.content)
}
 void YouMeIM_MessageBodyText::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyText.content)
}
 void YouMeIM_MessageBodyText::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyText.content)
}
 ::std::string* YouMeIM_MessageBodyText::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyText.content)
  return content_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyText::release_content() {
  clear_has_content();
  return content_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyText::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyText.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_MessageBodyEmoji::kMsgTypeFieldNumber;
const int YouMeIM_MessageBodyEmoji::kEmojiIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_MessageBodyEmoji::YouMeIM_MessageBodyEmoji()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_MessageBodyEmoji)
}

void YouMeIM_MessageBodyEmoji::InitAsDefaultInstance() {
}

YouMeIM_MessageBodyEmoji::YouMeIM_MessageBodyEmoji(const YouMeIM_MessageBodyEmoji& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_MessageBodyEmoji)
}

void YouMeIM_MessageBodyEmoji::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  emojiid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_MessageBodyEmoji::~YouMeIM_MessageBodyEmoji() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_MessageBodyEmoji)
  SharedDtor();
}

void YouMeIM_MessageBodyEmoji::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeIM_MessageBodyEmoji::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_MessageBodyEmoji& YouMeIM_MessageBodyEmoji::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_MessageBodyEmoji* YouMeIM_MessageBodyEmoji::default_instance_ = NULL;

YouMeIM_MessageBodyEmoji* YouMeIM_MessageBodyEmoji::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_MessageBodyEmoji* n = new YouMeIM_MessageBodyEmoji;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_MessageBodyEmoji::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeIM_MessageBodyEmoji*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msgtype_, emojiid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_MessageBodyEmoji::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_MessageBodyEmoji)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value)) {
            set_msgtype(static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_emojiID;
        break;
      }

      // required int32 emojiID = 2;
      case 2: {
        if (tag == 16) {
         parse_emojiID:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emojiid_)));
          set_has_emojiid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_MessageBodyEmoji)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_MessageBodyEmoji)
  return false;
#undef DO_
}

void YouMeIM_MessageBodyEmoji::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_MessageBodyEmoji)
  // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required int32 emojiID = 2;
  if (has_emojiid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->emojiid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_MessageBodyEmoji)
}

int YouMeIM_MessageBodyEmoji::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  if (has_emojiid()) {
    // required int32 emojiID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiid());
  }

  return total_size;
}
int YouMeIM_MessageBodyEmoji::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

    // required int32 emojiID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->emojiid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_MessageBodyEmoji::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_MessageBodyEmoji*>(&from));
}

void YouMeIM_MessageBodyEmoji::MergeFrom(const YouMeIM_MessageBodyEmoji& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_emojiid()) {
      set_emojiid(from.emojiid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_MessageBodyEmoji::CopyFrom(const YouMeIM_MessageBodyEmoji& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_MessageBodyEmoji::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void YouMeIM_MessageBodyEmoji::Swap(YouMeIM_MessageBodyEmoji* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_MessageBodyEmoji::InternalSwap(YouMeIM_MessageBodyEmoji* other) {
  std::swap(msgtype_, other->msgtype_);
  std::swap(emojiid_, other->emojiid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_MessageBodyEmoji::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_MessageBodyEmoji";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_MessageBodyEmoji

// required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
bool YouMeIM_MessageBodyEmoji::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_MessageBodyEmoji::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_MessageBodyEmoji::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_MessageBodyEmoji::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::YouMeIMProtocol::YouMeIM_MessageBodyType YouMeIM_MessageBodyEmoji::msgtype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyEmoji.msgType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(msgtype_);
}
 void YouMeIM_MessageBodyEmoji::set_msgtype(::YouMeIMProtocol::YouMeIM_MessageBodyType value) {
  assert(::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyEmoji.msgType)
}

// required int32 emojiID = 2;
bool YouMeIM_MessageBodyEmoji::has_emojiid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_MessageBodyEmoji::set_has_emojiid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_MessageBodyEmoji::clear_has_emojiid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_MessageBodyEmoji::clear_emojiid() {
  emojiid_ = 0;
  clear_has_emojiid();
}
 ::youmecommon::protobuf::int32 YouMeIM_MessageBodyEmoji::emojiid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyEmoji.emojiID)
  return emojiid_;
}
 void YouMeIM_MessageBodyEmoji::set_emojiid(::youmecommon::protobuf::int32 value) {
  set_has_emojiid();
  emojiid_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyEmoji.emojiID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_MessageBodyFile::kMsgTypeFieldNumber;
const int YouMeIM_MessageBodyFile::kUrlFieldNumber;
const int YouMeIM_MessageBodyFile::kAreaCodeFieldNumber;
const int YouMeIM_MessageBodyFile::kMd5FieldNumber;
const int YouMeIM_MessageBodyFile::kSuffixFieldNumber;
const int YouMeIM_MessageBodyFile::kFileSizeFieldNumber;
const int YouMeIM_MessageBodyFile::kExtendFieldNumber;
#endif  // !_MSC_VER

YouMeIM_MessageBodyFile::YouMeIM_MessageBodyFile()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_MessageBodyFile)
}

void YouMeIM_MessageBodyFile::InitAsDefaultInstance() {
}

YouMeIM_MessageBodyFile::YouMeIM_MessageBodyFile(const YouMeIM_MessageBodyFile& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_MessageBodyFile)
}

void YouMeIM_MessageBodyFile::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  url_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  areacode_ = 0u;
  md5_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  filesize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_MessageBodyFile::~YouMeIM_MessageBodyFile() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_MessageBodyFile)
  SharedDtor();
}

void YouMeIM_MessageBodyFile::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeIM_MessageBodyFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_MessageBodyFile& YouMeIM_MessageBodyFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_MessageBodyFile* YouMeIM_MessageBodyFile::default_instance_ = NULL;

YouMeIM_MessageBodyFile* YouMeIM_MessageBodyFile::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_MessageBodyFile* n = new YouMeIM_MessageBodyFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_MessageBodyFile::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeIM_MessageBodyFile*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(msgtype_, areacode_);
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_md5()) {
      md5_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_suffix()) {
      suffix_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    filesize_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  extend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_MessageBodyFile::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_MessageBodyFile)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value)) {
            set_msgtype(static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // required string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 3;
      case 3: {
        if (tag == 24) {
         parse_areaCode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_md5;
        break;
      }

      // optional string md5 = 4;
      case 4: {
        if (tag == 34) {
         parse_md5:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_suffix;
        break;
      }

      // optional string suffix = 5;
      case 5: {
        if (tag == 42) {
         parse_suffix:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fileSize;
        break;
      }

      // optional uint32 fileSize = 6;
      case 6: {
        if (tag == 48) {
         parse_fileSize:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_extend;
        break;
      }

      // repeated .YouMeIMProtocol.NameValue extend = 7;
      case 7: {
        if (tag == 58) {
         parse_extend:
          DO_(input->IncrementRecursionDepth());
         parse_loop_extend:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_extend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_extend;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_MessageBodyFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_MessageBodyFile)
  return false;
#undef DO_
}

void YouMeIM_MessageBodyFile::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_MessageBodyFile)
  // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required string url = 2;
  if (has_url()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(3, this->areacode(), output);
  }

  // optional string md5 = 4;
  if (has_md5()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->md5(), output);
  }

  // optional string suffix = 5;
  if (has_suffix()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->suffix(), output);
  }

  // optional uint32 fileSize = 6;
  if (has_filesize()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(6, this->filesize(), output);
  }

  // repeated .YouMeIMProtocol.NameValue extend = 7;
  for (unsigned int i = 0, n = this->extend_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->extend(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_MessageBodyFile)
}

int YouMeIM_MessageBodyFile::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  return total_size;
}
int YouMeIM_MessageBodyFile::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

    // required string url = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional uint32 areaCode = 3;
    if (has_areacode()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string md5 = 4;
    if (has_md5()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional string suffix = 5;
    if (has_suffix()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional uint32 fileSize = 6;
    if (has_filesize()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

  }
  // repeated .YouMeIMProtocol.NameValue extend = 7;
  total_size += 1 * this->extend_size();
  for (int i = 0; i < this->extend_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extend(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_MessageBodyFile::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_MessageBodyFile*>(&from));
}

void YouMeIM_MessageBodyFile::MergeFrom(const YouMeIM_MessageBodyFile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  extend_.MergeFrom(from.extend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_md5()) {
      set_has_md5();
      md5_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (from.has_suffix()) {
      set_has_suffix();
      suffix_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_MessageBodyFile::CopyFrom(const YouMeIM_MessageBodyFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_MessageBodyFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->extend())) return false;
  return true;
}

void YouMeIM_MessageBodyFile::Swap(YouMeIM_MessageBodyFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_MessageBodyFile::InternalSwap(YouMeIM_MessageBodyFile* other) {
  std::swap(msgtype_, other->msgtype_);
  url_.Swap(&other->url_);
  std::swap(areacode_, other->areacode_);
  md5_.Swap(&other->md5_);
  suffix_.Swap(&other->suffix_);
  std::swap(filesize_, other->filesize_);
  extend_.UnsafeArenaSwap(&other->extend_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_MessageBodyFile::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_MessageBodyFile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_MessageBodyFile

// required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
bool YouMeIM_MessageBodyFile::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_MessageBodyFile::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_MessageBodyFile::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_MessageBodyFile::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::YouMeIMProtocol::YouMeIM_MessageBodyType YouMeIM_MessageBodyFile::msgtype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyFile.msgType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(msgtype_);
}
 void YouMeIM_MessageBodyFile::set_msgtype(::YouMeIMProtocol::YouMeIM_MessageBodyType value) {
  assert(::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyFile.msgType)
}

// required string url = 2;
bool YouMeIM_MessageBodyFile::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_MessageBodyFile::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_MessageBodyFile::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_MessageBodyFile::clear_url() {
  url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& YouMeIM_MessageBodyFile::url() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyFile.url)
  return url_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyFile::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyFile.url)
}
 void YouMeIM_MessageBodyFile::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyFile.url)
}
 void YouMeIM_MessageBodyFile::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyFile.url)
}
 ::std::string* YouMeIM_MessageBodyFile::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyFile.url)
  return url_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyFile::release_url() {
  clear_has_url();
  return url_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyFile::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyFile.url)
}

// optional uint32 areaCode = 3;
bool YouMeIM_MessageBodyFile::has_areacode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_MessageBodyFile::set_has_areacode() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_MessageBodyFile::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_MessageBodyFile::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
 ::youmecommon::protobuf::uint32 YouMeIM_MessageBodyFile::areacode() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyFile.areaCode)
  return areacode_;
}
 void YouMeIM_MessageBodyFile::set_areacode(::youmecommon::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyFile.areaCode)
}

// optional string md5 = 4;
bool YouMeIM_MessageBodyFile::has_md5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_MessageBodyFile::set_has_md5() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_MessageBodyFile::clear_has_md5() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_MessageBodyFile::clear_md5() {
  md5_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
 const ::std::string& YouMeIM_MessageBodyFile::md5() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyFile.md5)
  return md5_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyFile::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyFile.md5)
}
 void YouMeIM_MessageBodyFile::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyFile.md5)
}
 void YouMeIM_MessageBodyFile::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyFile.md5)
}
 ::std::string* YouMeIM_MessageBodyFile::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyFile.md5)
  return md5_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyFile::release_md5() {
  clear_has_md5();
  return md5_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyFile::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyFile.md5)
}

// optional string suffix = 5;
bool YouMeIM_MessageBodyFile::has_suffix() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_MessageBodyFile::set_has_suffix() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_MessageBodyFile::clear_has_suffix() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_MessageBodyFile::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suffix();
}
 const ::std::string& YouMeIM_MessageBodyFile::suffix() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyFile.suffix)
  return suffix_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyFile::set_suffix(const ::std::string& value) {
  set_has_suffix();
  suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyFile.suffix)
}
 void YouMeIM_MessageBodyFile::set_suffix(const char* value) {
  set_has_suffix();
  suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyFile.suffix)
}
 void YouMeIM_MessageBodyFile::set_suffix(const char* value, size_t size) {
  set_has_suffix();
  suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyFile.suffix)
}
 ::std::string* YouMeIM_MessageBodyFile::mutable_suffix() {
  set_has_suffix();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyFile.suffix)
  return suffix_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyFile::release_suffix() {
  clear_has_suffix();
  return suffix_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyFile::set_allocated_suffix(::std::string* suffix) {
  if (suffix != NULL) {
    set_has_suffix();
  } else {
    clear_has_suffix();
  }
  suffix_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyFile.suffix)
}

// optional uint32 fileSize = 6;
bool YouMeIM_MessageBodyFile::has_filesize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeIM_MessageBodyFile::set_has_filesize() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeIM_MessageBodyFile::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeIM_MessageBodyFile::clear_filesize() {
  filesize_ = 0u;
  clear_has_filesize();
}
 ::youmecommon::protobuf::uint32 YouMeIM_MessageBodyFile::filesize() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyFile.fileSize)
  return filesize_;
}
 void YouMeIM_MessageBodyFile::set_filesize(::youmecommon::protobuf::uint32 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyFile.fileSize)
}

// repeated .YouMeIMProtocol.NameValue extend = 7;
int YouMeIM_MessageBodyFile::extend_size() const {
  return extend_.size();
}
void YouMeIM_MessageBodyFile::clear_extend() {
  extend_.Clear();
}
const ::YouMeIMProtocol::NameValue& YouMeIM_MessageBodyFile::extend(int index) const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyFile.extend)
  return extend_.Get(index);
}
::YouMeIMProtocol::NameValue* YouMeIM_MessageBodyFile::mutable_extend(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyFile.extend)
  return extend_.Mutable(index);
}
::YouMeIMProtocol::NameValue* YouMeIM_MessageBodyFile::add_extend() {
  // @@protoc_insertion_point(field_add:YouMeIMProtocol.YouMeIM_MessageBodyFile.extend)
  return extend_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::NameValue >*
YouMeIM_MessageBodyFile::mutable_extend() {
  // @@protoc_insertion_point(field_mutable_list:YouMeIMProtocol.YouMeIM_MessageBodyFile.extend)
  return &extend_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::NameValue >&
YouMeIM_MessageBodyFile::extend() const {
  // @@protoc_insertion_point(field_list:YouMeIMProtocol.YouMeIM_MessageBodyFile.extend)
  return extend_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_MessageBodyVoice::kMsgTypeFieldNumber;
const int YouMeIM_MessageBodyVoice::kKeyFieldNumber;
const int YouMeIM_MessageBodyVoice::kDownloadurlFieldNumber;
const int YouMeIM_MessageBodyVoice::kCharactersFieldNumber;
const int YouMeIM_MessageBodyVoice::kParamFieldNumber;
const int YouMeIM_MessageBodyVoice::kTimeFieldNumber;
const int YouMeIM_MessageBodyVoice::kAreaCodeFieldNumber;
const int YouMeIM_MessageBodyVoice::kFileSizeFieldNumber;
const int YouMeIM_MessageBodyVoice::kMd5FieldNumber;
const int YouMeIM_MessageBodyVoice::kSuffixFieldNumber;
#endif  // !_MSC_VER

YouMeIM_MessageBodyVoice::YouMeIM_MessageBodyVoice()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_MessageBodyVoice)
}

void YouMeIM_MessageBodyVoice::InitAsDefaultInstance() {
}

YouMeIM_MessageBodyVoice::YouMeIM_MessageBodyVoice(const YouMeIM_MessageBodyVoice& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_MessageBodyVoice)
}

void YouMeIM_MessageBodyVoice::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  key_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadurl_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  characters_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  areacode_ = 0u;
  filesize_ = 0u;
  md5_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_MessageBodyVoice::~YouMeIM_MessageBodyVoice() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_MessageBodyVoice)
  SharedDtor();
}

void YouMeIM_MessageBodyVoice::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadurl_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  characters_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeIM_MessageBodyVoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_MessageBodyVoice& YouMeIM_MessageBodyVoice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_MessageBodyVoice* YouMeIM_MessageBodyVoice::default_instance_ = NULL;

YouMeIM_MessageBodyVoice* YouMeIM_MessageBodyVoice::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_MessageBodyVoice* n = new YouMeIM_MessageBodyVoice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_MessageBodyVoice::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeIM_MessageBodyVoice*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(msgtype_, time_);
    ZR_(areacode_, filesize_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_downloadurl()) {
      downloadurl_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_characters()) {
      characters_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_param()) {
      param_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_md5()) {
      md5_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_suffix()) {
      suffix_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_MessageBodyVoice::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_MessageBodyVoice)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value)) {
            set_msgtype(static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_downloadurl;
        break;
      }

      // required string downloadurl = 3;
      case 3: {
        if (tag == 26) {
         parse_downloadurl:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_characters;
        break;
      }

      // optional string characters = 4;
      case 4: {
        if (tag == 34) {
         parse_characters:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_characters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_param;
        break;
      }

      // optional string param = 5;
      case 5: {
        if (tag == 42) {
         parse_param:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 7;
      case 7: {
        if (tag == 56) {
         parse_areaCode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fileSize;
        break;
      }

      // optional uint32 fileSize = 8;
      case 8: {
        if (tag == 64) {
         parse_fileSize:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_md5;
        break;
      }

      // optional string md5 = 9;
      case 9: {
        if (tag == 74) {
         parse_md5:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_suffix;
        break;
      }

      // optional string suffix = 10;
      case 10: {
        if (tag == 82) {
         parse_suffix:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_MessageBodyVoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_MessageBodyVoice)
  return false;
#undef DO_
}

void YouMeIM_MessageBodyVoice::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_MessageBodyVoice)
  // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // required string downloadurl = 3;
  if (has_downloadurl()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->downloadurl(), output);
  }

  // optional string characters = 4;
  if (has_characters()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->characters(), output);
  }

  // optional string param = 5;
  if (has_param()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->param(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional uint32 areaCode = 7;
  if (has_areacode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(7, this->areacode(), output);
  }

  // optional uint32 fileSize = 8;
  if (has_filesize()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(8, this->filesize(), output);
  }

  // optional string md5 = 9;
  if (has_md5()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->md5(), output);
  }

  // optional string suffix = 10;
  if (has_suffix()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->suffix(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_MessageBodyVoice)
}

int YouMeIM_MessageBodyVoice::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  if (has_key()) {
    // required string key = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_downloadurl()) {
    // required string downloadurl = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->downloadurl());
  }

  return total_size;
}
int YouMeIM_MessageBodyVoice::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

    // required string key = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string downloadurl = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->downloadurl());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional string characters = 4;
    if (has_characters()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->characters());
    }

    // optional string param = 5;
    if (has_param()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 areaCode = 7;
    if (has_areacode()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional uint32 fileSize = 8;
    if (has_filesize()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string md5 = 9;
    if (has_md5()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional string suffix = 10;
    if (has_suffix()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_MessageBodyVoice::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_MessageBodyVoice*>(&from));
}

void YouMeIM_MessageBodyVoice::MergeFrom(const YouMeIM_MessageBodyVoice& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_downloadurl()) {
      set_has_downloadurl();
      downloadurl_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadurl_);
    }
    if (from.has_characters()) {
      set_has_characters();
      characters_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.characters_);
    }
    if (from.has_param()) {
      set_has_param();
      param_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_md5()) {
      set_has_md5();
      md5_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (from.has_suffix()) {
      set_has_suffix();
      suffix_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_MessageBodyVoice::CopyFrom(const YouMeIM_MessageBodyVoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_MessageBodyVoice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void YouMeIM_MessageBodyVoice::Swap(YouMeIM_MessageBodyVoice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_MessageBodyVoice::InternalSwap(YouMeIM_MessageBodyVoice* other) {
  std::swap(msgtype_, other->msgtype_);
  key_.Swap(&other->key_);
  downloadurl_.Swap(&other->downloadurl_);
  characters_.Swap(&other->characters_);
  param_.Swap(&other->param_);
  std::swap(time_, other->time_);
  std::swap(areacode_, other->areacode_);
  std::swap(filesize_, other->filesize_);
  md5_.Swap(&other->md5_);
  suffix_.Swap(&other->suffix_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_MessageBodyVoice::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_MessageBodyVoice";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_MessageBodyVoice

// required .YouMeIMProtocol.YouMeIM_MessageBodyType msgType = 1;
bool YouMeIM_MessageBodyVoice::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_MessageBodyVoice::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_MessageBodyVoice::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::YouMeIMProtocol::YouMeIM_MessageBodyType YouMeIM_MessageBodyVoice::msgtype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.msgType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyType >(msgtype_);
}
 void YouMeIM_MessageBodyVoice::set_msgtype(::YouMeIMProtocol::YouMeIM_MessageBodyType value) {
  assert(::YouMeIMProtocol::YouMeIM_MessageBodyType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.msgType)
}

// required string key = 2;
bool YouMeIM_MessageBodyVoice::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_MessageBodyVoice::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_MessageBodyVoice::clear_key() {
  key_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& YouMeIM_MessageBodyVoice::key() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.key)
  return key_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.key)
}
 void YouMeIM_MessageBodyVoice::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyVoice.key)
}
 void YouMeIM_MessageBodyVoice::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyVoice.key)
}
 ::std::string* YouMeIM_MessageBodyVoice::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyVoice.key)
  return key_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyVoice::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyVoice.key)
}

// required string downloadurl = 3;
bool YouMeIM_MessageBodyVoice::has_downloadurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_downloadurl() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_MessageBodyVoice::clear_has_downloadurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_MessageBodyVoice::clear_downloadurl() {
  downloadurl_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_downloadurl();
}
 const ::std::string& YouMeIM_MessageBodyVoice::downloadurl() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.downloadurl)
  return downloadurl_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_downloadurl(const ::std::string& value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.downloadurl)
}
 void YouMeIM_MessageBodyVoice::set_downloadurl(const char* value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyVoice.downloadurl)
}
 void YouMeIM_MessageBodyVoice::set_downloadurl(const char* value, size_t size) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyVoice.downloadurl)
}
 ::std::string* YouMeIM_MessageBodyVoice::mutable_downloadurl() {
  set_has_downloadurl();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyVoice.downloadurl)
  return downloadurl_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyVoice::release_downloadurl() {
  clear_has_downloadurl();
  return downloadurl_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_allocated_downloadurl(::std::string* downloadurl) {
  if (downloadurl != NULL) {
    set_has_downloadurl();
  } else {
    clear_has_downloadurl();
  }
  downloadurl_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), downloadurl);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyVoice.downloadurl)
}

// optional string characters = 4;
bool YouMeIM_MessageBodyVoice::has_characters() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_characters() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_MessageBodyVoice::clear_has_characters() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_MessageBodyVoice::clear_characters() {
  characters_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_characters();
}
 const ::std::string& YouMeIM_MessageBodyVoice::characters() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.characters)
  return characters_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_characters(const ::std::string& value) {
  set_has_characters();
  characters_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.characters)
}
 void YouMeIM_MessageBodyVoice::set_characters(const char* value) {
  set_has_characters();
  characters_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyVoice.characters)
}
 void YouMeIM_MessageBodyVoice::set_characters(const char* value, size_t size) {
  set_has_characters();
  characters_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyVoice.characters)
}
 ::std::string* YouMeIM_MessageBodyVoice::mutable_characters() {
  set_has_characters();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyVoice.characters)
  return characters_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyVoice::release_characters() {
  clear_has_characters();
  return characters_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_allocated_characters(::std::string* characters) {
  if (characters != NULL) {
    set_has_characters();
  } else {
    clear_has_characters();
  }
  characters_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), characters);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyVoice.characters)
}

// optional string param = 5;
bool YouMeIM_MessageBodyVoice::has_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_param() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_MessageBodyVoice::clear_has_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_MessageBodyVoice::clear_param() {
  param_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param();
}
 const ::std::string& YouMeIM_MessageBodyVoice::param() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.param)
  return param_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_param(const ::std::string& value) {
  set_has_param();
  param_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.param)
}
 void YouMeIM_MessageBodyVoice::set_param(const char* value) {
  set_has_param();
  param_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyVoice.param)
}
 void YouMeIM_MessageBodyVoice::set_param(const char* value, size_t size) {
  set_has_param();
  param_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyVoice.param)
}
 ::std::string* YouMeIM_MessageBodyVoice::mutable_param() {
  set_has_param();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyVoice.param)
  return param_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyVoice::release_param() {
  clear_has_param();
  return param_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_allocated_param(::std::string* param) {
  if (param != NULL) {
    set_has_param();
  } else {
    clear_has_param();
  }
  param_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), param);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyVoice.param)
}

// optional uint32 time = 6;
bool YouMeIM_MessageBodyVoice::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeIM_MessageBodyVoice::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeIM_MessageBodyVoice::clear_time() {
  time_ = 0u;
  clear_has_time();
}
 ::youmecommon::protobuf::uint32 YouMeIM_MessageBodyVoice::time() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.time)
  return time_;
}
 void YouMeIM_MessageBodyVoice::set_time(::youmecommon::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.time)
}

// optional uint32 areaCode = 7;
bool YouMeIM_MessageBodyVoice::has_areacode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_areacode() {
  _has_bits_[0] |= 0x00000040u;
}
void YouMeIM_MessageBodyVoice::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000040u;
}
void YouMeIM_MessageBodyVoice::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
 ::youmecommon::protobuf::uint32 YouMeIM_MessageBodyVoice::areacode() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.areaCode)
  return areacode_;
}
 void YouMeIM_MessageBodyVoice::set_areacode(::youmecommon::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.areaCode)
}

// optional uint32 fileSize = 8;
bool YouMeIM_MessageBodyVoice::has_filesize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_filesize() {
  _has_bits_[0] |= 0x00000080u;
}
void YouMeIM_MessageBodyVoice::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000080u;
}
void YouMeIM_MessageBodyVoice::clear_filesize() {
  filesize_ = 0u;
  clear_has_filesize();
}
 ::youmecommon::protobuf::uint32 YouMeIM_MessageBodyVoice::filesize() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.fileSize)
  return filesize_;
}
 void YouMeIM_MessageBodyVoice::set_filesize(::youmecommon::protobuf::uint32 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.fileSize)
}

// optional string md5 = 9;
bool YouMeIM_MessageBodyVoice::has_md5() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_md5() {
  _has_bits_[0] |= 0x00000100u;
}
void YouMeIM_MessageBodyVoice::clear_has_md5() {
  _has_bits_[0] &= ~0x00000100u;
}
void YouMeIM_MessageBodyVoice::clear_md5() {
  md5_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
 const ::std::string& YouMeIM_MessageBodyVoice::md5() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.md5)
  return md5_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.md5)
}
 void YouMeIM_MessageBodyVoice::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyVoice.md5)
}
 void YouMeIM_MessageBodyVoice::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyVoice.md5)
}
 ::std::string* YouMeIM_MessageBodyVoice::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyVoice.md5)
  return md5_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyVoice::release_md5() {
  clear_has_md5();
  return md5_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyVoice.md5)
}

// optional string suffix = 10;
bool YouMeIM_MessageBodyVoice::has_suffix() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void YouMeIM_MessageBodyVoice::set_has_suffix() {
  _has_bits_[0] |= 0x00000200u;
}
void YouMeIM_MessageBodyVoice::clear_has_suffix() {
  _has_bits_[0] &= ~0x00000200u;
}
void YouMeIM_MessageBodyVoice::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suffix();
}
 const ::std::string& YouMeIM_MessageBodyVoice::suffix() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_MessageBodyVoice.suffix)
  return suffix_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_suffix(const ::std::string& value) {
  set_has_suffix();
  suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_MessageBodyVoice.suffix)
}
 void YouMeIM_MessageBodyVoice::set_suffix(const char* value) {
  set_has_suffix();
  suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_MessageBodyVoice.suffix)
}
 void YouMeIM_MessageBodyVoice::set_suffix(const char* value, size_t size) {
  set_has_suffix();
  suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_MessageBodyVoice.suffix)
}
 ::std::string* YouMeIM_MessageBodyVoice::mutable_suffix() {
  set_has_suffix();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_MessageBodyVoice.suffix)
  return suffix_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_MessageBodyVoice::release_suffix() {
  clear_has_suffix();
  return suffix_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_MessageBodyVoice::set_allocated_suffix(::std::string* suffix) {
  if (suffix != NULL) {
    set_has_suffix();
  } else {
    clear_has_suffix();
  }
  suffix_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_MessageBodyVoice.suffix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ClientToServerCustom::kMsgHeadFieldNumber;
const int YouMeIM_Command_ClientToServerCustom::kMessageBodyFieldNumber;
const int YouMeIM_Command_ClientToServerCustom::kChatTypeFieldNumber;
const int YouMeIM_Command_ClientToServerCustom::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ClientToServerCustom::YouMeIM_Command_ClientToServerCustom()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom)
}

void YouMeIM_Command_ClientToServerCustom::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyCustom*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyCustom::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyCustom*>(&::YouMeIMProtocol::YouMeIM_MessageBodyCustom::default_instance());
#endif
}

YouMeIM_Command_ClientToServerCustom::YouMeIM_Command_ClientToServerCustom(const YouMeIM_Command_ClientToServerCustom& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom)
}

void YouMeIM_Command_ClientToServerCustom::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ClientToServerCustom::~YouMeIM_Command_ClientToServerCustom() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom)
  SharedDtor();
}

void YouMeIM_Command_ClientToServerCustom::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ClientToServerCustom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ClientToServerCustom& YouMeIM_Command_ClientToServerCustom::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ClientToServerCustom* YouMeIM_Command_ClientToServerCustom::default_instance_ = NULL;

YouMeIM_Command_ClientToServerCustom* YouMeIM_Command_ClientToServerCustom::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ClientToServerCustom* n = new YouMeIM_Command_ClientToServerCustom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ClientToServerCustom::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyCustom::Clear();
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ClientToServerCustom::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
      case 3: {
        if (tag == 24) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 4;
      case 4: {
        if (tag == 34) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom)
  return false;
#undef DO_
}

void YouMeIM_Command_ClientToServerCustom::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 4;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom)
}

int YouMeIM_Command_ClientToServerCustom::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ClientToServerCustom::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ClientToServerCustom::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ClientToServerCustom*>(&from));
}

void YouMeIM_Command_ClientToServerCustom::MergeFrom(const YouMeIM_Command_ClientToServerCustom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyCustom::MergeFrom(from.messagebody());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ClientToServerCustom::CopyFrom(const YouMeIM_Command_ClientToServerCustom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ClientToServerCustom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ClientToServerCustom::Swap(YouMeIM_Command_ClientToServerCustom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ClientToServerCustom::InternalSwap(YouMeIM_Command_ClientToServerCustom* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ClientToServerCustom::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ClientToServerCustom

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_ClientToServerCustom::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ClientToServerCustom::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ClientToServerCustom::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ClientToServerCustom::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_ClientToServerCustom::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerCustom::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerCustom::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerCustom::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
bool YouMeIM_Command_ClientToServerCustom::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ClientToServerCustom::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ClientToServerCustom::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ClientToServerCustom::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyCustom::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyCustom& YouMeIM_Command_ClientToServerCustom::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyCustom* YouMeIM_Command_ClientToServerCustom::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyCustom;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyCustom* YouMeIM_Command_ClientToServerCustom::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyCustom* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerCustom::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyCustom* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.messageBody)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
bool YouMeIM_Command_ClientToServerCustom::has_chattype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ClientToServerCustom::set_has_chattype() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ClientToServerCustom::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ClientToServerCustom::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ClientToServerCustom::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ClientToServerCustom::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.chatType)
}

// required string YOUMEGROUPID = 4;
bool YouMeIM_Command_ClientToServerCustom::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ClientToServerCustom::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ClientToServerCustom::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ClientToServerCustom::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ClientToServerCustom::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerCustom::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerCustom::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerCustom::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ClientToServerCustom::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ClientToServerCustom::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerCustom::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerCustom.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ClientToServerText::kMsgHeadFieldNumber;
const int YouMeIM_Command_ClientToServerText::kMessageBodyFieldNumber;
const int YouMeIM_Command_ClientToServerText::kChatTypeFieldNumber;
const int YouMeIM_Command_ClientToServerText::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ClientToServerText::YouMeIM_Command_ClientToServerText()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerText)
}

void YouMeIM_Command_ClientToServerText::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyText*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyText::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyText*>(&::YouMeIMProtocol::YouMeIM_MessageBodyText::default_instance());
#endif
}

YouMeIM_Command_ClientToServerText::YouMeIM_Command_ClientToServerText(const YouMeIM_Command_ClientToServerText& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerText)
}

void YouMeIM_Command_ClientToServerText::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ClientToServerText::~YouMeIM_Command_ClientToServerText() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerText)
  SharedDtor();
}

void YouMeIM_Command_ClientToServerText::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ClientToServerText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ClientToServerText& YouMeIM_Command_ClientToServerText::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ClientToServerText* YouMeIM_Command_ClientToServerText::default_instance_ = NULL;

YouMeIM_Command_ClientToServerText* YouMeIM_Command_ClientToServerText::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ClientToServerText* n = new YouMeIM_Command_ClientToServerText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ClientToServerText::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyText::Clear();
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ClientToServerText::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerText)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
      case 3: {
        if (tag == 24) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 4;
      case 4: {
        if (tag == 34) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ClientToServerText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ClientToServerText)
  return false;
#undef DO_
}

void YouMeIM_Command_ClientToServerText::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerText)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 4;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ClientToServerText)
}

int YouMeIM_Command_ClientToServerText::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ClientToServerText::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ClientToServerText::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ClientToServerText*>(&from));
}

void YouMeIM_Command_ClientToServerText::MergeFrom(const YouMeIM_Command_ClientToServerText& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyText::MergeFrom(from.messagebody());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ClientToServerText::CopyFrom(const YouMeIM_Command_ClientToServerText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ClientToServerText::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ClientToServerText::Swap(YouMeIM_Command_ClientToServerText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ClientToServerText::InternalSwap(YouMeIM_Command_ClientToServerText* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ClientToServerText::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ClientToServerText";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ClientToServerText

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_ClientToServerText::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ClientToServerText::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ClientToServerText::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ClientToServerText::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_ClientToServerText::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerText::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerText::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerText::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
bool YouMeIM_Command_ClientToServerText::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ClientToServerText::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ClientToServerText::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ClientToServerText::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyText::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyText& YouMeIM_Command_ClientToServerText::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyText* YouMeIM_Command_ClientToServerText::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyText;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyText* YouMeIM_Command_ClientToServerText::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyText* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerText::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyText* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.messageBody)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
bool YouMeIM_Command_ClientToServerText::has_chattype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ClientToServerText::set_has_chattype() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ClientToServerText::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ClientToServerText::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ClientToServerText::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ClientToServerText::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.chatType)
}

// required string YOUMEGROUPID = 4;
bool YouMeIM_Command_ClientToServerText::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ClientToServerText::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ClientToServerText::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ClientToServerText::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ClientToServerText::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerText::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerText::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerText::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ClientToServerText::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ClientToServerText::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerText::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerText.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ClientToServerEmoji::kMsgHeadFieldNumber;
const int YouMeIM_Command_ClientToServerEmoji::kMessageBodyFieldNumber;
const int YouMeIM_Command_ClientToServerEmoji::kChatTypeFieldNumber;
const int YouMeIM_Command_ClientToServerEmoji::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ClientToServerEmoji::YouMeIM_Command_ClientToServerEmoji()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji)
}

void YouMeIM_Command_ClientToServerEmoji::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji*>(&::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::default_instance());
#endif
}

YouMeIM_Command_ClientToServerEmoji::YouMeIM_Command_ClientToServerEmoji(const YouMeIM_Command_ClientToServerEmoji& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji)
}

void YouMeIM_Command_ClientToServerEmoji::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ClientToServerEmoji::~YouMeIM_Command_ClientToServerEmoji() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji)
  SharedDtor();
}

void YouMeIM_Command_ClientToServerEmoji::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ClientToServerEmoji::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ClientToServerEmoji& YouMeIM_Command_ClientToServerEmoji::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ClientToServerEmoji* YouMeIM_Command_ClientToServerEmoji::default_instance_ = NULL;

YouMeIM_Command_ClientToServerEmoji* YouMeIM_Command_ClientToServerEmoji::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ClientToServerEmoji* n = new YouMeIM_Command_ClientToServerEmoji;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ClientToServerEmoji::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::Clear();
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ClientToServerEmoji::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
      case 3: {
        if (tag == 24) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 4;
      case 4: {
        if (tag == 34) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji)
  return false;
#undef DO_
}

void YouMeIM_Command_ClientToServerEmoji::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 4;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji)
}

int YouMeIM_Command_ClientToServerEmoji::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ClientToServerEmoji::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ClientToServerEmoji::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ClientToServerEmoji*>(&from));
}

void YouMeIM_Command_ClientToServerEmoji::MergeFrom(const YouMeIM_Command_ClientToServerEmoji& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::MergeFrom(from.messagebody());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ClientToServerEmoji::CopyFrom(const YouMeIM_Command_ClientToServerEmoji& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ClientToServerEmoji::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ClientToServerEmoji::Swap(YouMeIM_Command_ClientToServerEmoji* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ClientToServerEmoji::InternalSwap(YouMeIM_Command_ClientToServerEmoji* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ClientToServerEmoji::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ClientToServerEmoji

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_ClientToServerEmoji::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ClientToServerEmoji::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ClientToServerEmoji::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ClientToServerEmoji::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_ClientToServerEmoji::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerEmoji::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerEmoji::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerEmoji::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
bool YouMeIM_Command_ClientToServerEmoji::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ClientToServerEmoji::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ClientToServerEmoji::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ClientToServerEmoji::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji& YouMeIM_Command_ClientToServerEmoji::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyEmoji* YouMeIM_Command_ClientToServerEmoji::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyEmoji* YouMeIM_Command_ClientToServerEmoji::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerEmoji::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyEmoji* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.messageBody)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
bool YouMeIM_Command_ClientToServerEmoji::has_chattype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ClientToServerEmoji::set_has_chattype() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ClientToServerEmoji::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ClientToServerEmoji::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ClientToServerEmoji::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ClientToServerEmoji::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.chatType)
}

// required string YOUMEGROUPID = 4;
bool YouMeIM_Command_ClientToServerEmoji::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ClientToServerEmoji::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ClientToServerEmoji::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ClientToServerEmoji::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ClientToServerEmoji::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerEmoji::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerEmoji::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerEmoji::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ClientToServerEmoji::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ClientToServerEmoji::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerEmoji::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerEmoji.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ClientToServerFile::kMsgHeadFieldNumber;
const int YouMeIM_Command_ClientToServerFile::kMessageBodyFieldNumber;
const int YouMeIM_Command_ClientToServerFile::kChatTypeFieldNumber;
const int YouMeIM_Command_ClientToServerFile::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ClientToServerFile::YouMeIM_Command_ClientToServerFile()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile)
}

void YouMeIM_Command_ClientToServerFile::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyFile*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyFile::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyFile*>(&::YouMeIMProtocol::YouMeIM_MessageBodyFile::default_instance());
#endif
}

YouMeIM_Command_ClientToServerFile::YouMeIM_Command_ClientToServerFile(const YouMeIM_Command_ClientToServerFile& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile)
}

void YouMeIM_Command_ClientToServerFile::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ClientToServerFile::~YouMeIM_Command_ClientToServerFile() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile)
  SharedDtor();
}

void YouMeIM_Command_ClientToServerFile::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ClientToServerFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ClientToServerFile& YouMeIM_Command_ClientToServerFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ClientToServerFile* YouMeIM_Command_ClientToServerFile::default_instance_ = NULL;

YouMeIM_Command_ClientToServerFile* YouMeIM_Command_ClientToServerFile::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ClientToServerFile* n = new YouMeIM_Command_ClientToServerFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ClientToServerFile::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyFile::Clear();
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ClientToServerFile::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
      case 3: {
        if (tag == 24) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 4;
      case 4: {
        if (tag == 34) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile)
  return false;
#undef DO_
}

void YouMeIM_Command_ClientToServerFile::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 4;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile)
}

int YouMeIM_Command_ClientToServerFile::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ClientToServerFile::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ClientToServerFile::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ClientToServerFile*>(&from));
}

void YouMeIM_Command_ClientToServerFile::MergeFrom(const YouMeIM_Command_ClientToServerFile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyFile::MergeFrom(from.messagebody());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ClientToServerFile::CopyFrom(const YouMeIM_Command_ClientToServerFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ClientToServerFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ClientToServerFile::Swap(YouMeIM_Command_ClientToServerFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ClientToServerFile::InternalSwap(YouMeIM_Command_ClientToServerFile* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ClientToServerFile::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ClientToServerFile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ClientToServerFile

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_ClientToServerFile::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ClientToServerFile::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ClientToServerFile::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ClientToServerFile::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_ClientToServerFile::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerFile::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerFile::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerFile::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
bool YouMeIM_Command_ClientToServerFile::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ClientToServerFile::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ClientToServerFile::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ClientToServerFile::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyFile::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyFile& YouMeIM_Command_ClientToServerFile::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyFile* YouMeIM_Command_ClientToServerFile::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyFile;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyFile* YouMeIM_Command_ClientToServerFile::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyFile* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerFile::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyFile* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.messageBody)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
bool YouMeIM_Command_ClientToServerFile::has_chattype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ClientToServerFile::set_has_chattype() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ClientToServerFile::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ClientToServerFile::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ClientToServerFile::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ClientToServerFile::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.chatType)
}

// required string YOUMEGROUPID = 4;
bool YouMeIM_Command_ClientToServerFile::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ClientToServerFile::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ClientToServerFile::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ClientToServerFile::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ClientToServerFile::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerFile::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerFile::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerFile::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ClientToServerFile::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ClientToServerFile::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerFile::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerFile.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ClientToServerVoice::kMsgHeadFieldNumber;
const int YouMeIM_Command_ClientToServerVoice::kMessageBodyFieldNumber;
const int YouMeIM_Command_ClientToServerVoice::kChatTypeFieldNumber;
const int YouMeIM_Command_ClientToServerVoice::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ClientToServerVoice::YouMeIM_Command_ClientToServerVoice()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice)
}

void YouMeIM_Command_ClientToServerVoice::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyVoice*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyVoice::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyVoice*>(&::YouMeIMProtocol::YouMeIM_MessageBodyVoice::default_instance());
#endif
}

YouMeIM_Command_ClientToServerVoice::YouMeIM_Command_ClientToServerVoice(const YouMeIM_Command_ClientToServerVoice& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice)
}

void YouMeIM_Command_ClientToServerVoice::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ClientToServerVoice::~YouMeIM_Command_ClientToServerVoice() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice)
  SharedDtor();
}

void YouMeIM_Command_ClientToServerVoice::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ClientToServerVoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ClientToServerVoice& YouMeIM_Command_ClientToServerVoice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ClientToServerVoice* YouMeIM_Command_ClientToServerVoice::default_instance_ = NULL;

YouMeIM_Command_ClientToServerVoice* YouMeIM_Command_ClientToServerVoice::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ClientToServerVoice* n = new YouMeIM_Command_ClientToServerVoice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ClientToServerVoice::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyVoice::Clear();
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ClientToServerVoice::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
      case 3: {
        if (tag == 24) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 4;
      case 4: {
        if (tag == 34) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice)
  return false;
#undef DO_
}

void YouMeIM_Command_ClientToServerVoice::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 4;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice)
}

int YouMeIM_Command_ClientToServerVoice::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ClientToServerVoice::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ClientToServerVoice::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ClientToServerVoice*>(&from));
}

void YouMeIM_Command_ClientToServerVoice::MergeFrom(const YouMeIM_Command_ClientToServerVoice& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyVoice::MergeFrom(from.messagebody());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ClientToServerVoice::CopyFrom(const YouMeIM_Command_ClientToServerVoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ClientToServerVoice::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ClientToServerVoice::Swap(YouMeIM_Command_ClientToServerVoice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ClientToServerVoice::InternalSwap(YouMeIM_Command_ClientToServerVoice* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ClientToServerVoice::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ClientToServerVoice

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_ClientToServerVoice::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ClientToServerVoice::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ClientToServerVoice::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ClientToServerVoice::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_ClientToServerVoice::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerVoice::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerVoice::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerVoice::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
bool YouMeIM_Command_ClientToServerVoice::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ClientToServerVoice::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ClientToServerVoice::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ClientToServerVoice::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyVoice::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyVoice& YouMeIM_Command_ClientToServerVoice::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyVoice* YouMeIM_Command_ClientToServerVoice::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyVoice;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyVoice* YouMeIM_Command_ClientToServerVoice::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyVoice* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerVoice::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyVoice* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.messageBody)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 3;
bool YouMeIM_Command_ClientToServerVoice::has_chattype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ClientToServerVoice::set_has_chattype() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ClientToServerVoice::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ClientToServerVoice::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ClientToServerVoice::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ClientToServerVoice::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.chatType)
}

// required string YOUMEGROUPID = 4;
bool YouMeIM_Command_ClientToServerVoice::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ClientToServerVoice::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ClientToServerVoice::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ClientToServerVoice::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ClientToServerVoice::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerVoice::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerVoice::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.YOUMEGROUPID)
}
 void YouMeIM_Command_ClientToServerVoice::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ClientToServerVoice::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ClientToServerVoice::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ClientToServerVoice::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerVoice.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ServerToClientCustom::kMsgHeadFieldNumber;
const int YouMeIM_Command_ServerToClientCustom::kMessageBodyFieldNumber;
const int YouMeIM_Command_ServerToClientCustom::kSenderYOUMEIDFieldNumber;
const int YouMeIM_Command_ServerToClientCustom::kChatTypeFieldNumber;
const int YouMeIM_Command_ServerToClientCustom::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ServerToClientCustom::YouMeIM_Command_ServerToClientCustom()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom)
}

void YouMeIM_Command_ServerToClientCustom::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyCustom*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyCustom::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyCustom*>(&::YouMeIMProtocol::YouMeIM_MessageBodyCustom::default_instance());
#endif
}

YouMeIM_Command_ServerToClientCustom::YouMeIM_Command_ServerToClientCustom(const YouMeIM_Command_ServerToClientCustom& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom)
}

void YouMeIM_Command_ServerToClientCustom::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  senderyoumeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ServerToClientCustom::~YouMeIM_Command_ServerToClientCustom() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom)
  SharedDtor();
}

void YouMeIM_Command_ServerToClientCustom::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  senderyoumeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ServerToClientCustom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ServerToClientCustom& YouMeIM_Command_ServerToClientCustom::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ServerToClientCustom* YouMeIM_Command_ServerToClientCustom::default_instance_ = NULL;

YouMeIM_Command_ServerToClientCustom* YouMeIM_Command_ServerToClientCustom::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ServerToClientCustom* n = new YouMeIM_Command_ServerToClientCustom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ServerToClientCustom::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyCustom::Clear();
    }
    if (has_senderyoumeid()) {
      senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ServerToClientCustom::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_senderYOUMEID;
        break;
      }

      // required string senderYOUMEID = 3;
      case 3: {
        if (tag == 26) {
         parse_senderYOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderyoumeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
      case 4: {
        if (tag == 32) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 5;
      case 5: {
        if (tag == 42) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom)
  return false;
#undef DO_
}

void YouMeIM_Command_ServerToClientCustom::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required string senderYOUMEID = 3;
  if (has_senderyoumeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->senderyoumeid(), output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 5;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom)
}

int YouMeIM_Command_ServerToClientCustom::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_senderyoumeid()) {
    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ServerToClientCustom::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ServerToClientCustom::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ServerToClientCustom*>(&from));
}

void YouMeIM_Command_ServerToClientCustom::MergeFrom(const YouMeIM_Command_ServerToClientCustom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyCustom::MergeFrom(from.messagebody());
    }
    if (from.has_senderyoumeid()) {
      set_has_senderyoumeid();
      senderyoumeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderyoumeid_);
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ServerToClientCustom::CopyFrom(const YouMeIM_Command_ServerToClientCustom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ServerToClientCustom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ServerToClientCustom::Swap(YouMeIM_Command_ServerToClientCustom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ServerToClientCustom::InternalSwap(YouMeIM_Command_ServerToClientCustom* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  senderyoumeid_.Swap(&other->senderyoumeid_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ServerToClientCustom::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ServerToClientCustom

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_ServerToClientCustom::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ServerToClientCustom::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ServerToClientCustom::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ServerToClientCustom::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_ServerToClientCustom::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientCustom::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientCustom::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientCustom::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyCustom messageBody = 2;
bool YouMeIM_Command_ServerToClientCustom::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ServerToClientCustom::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ServerToClientCustom::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ServerToClientCustom::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyCustom::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyCustom& YouMeIM_Command_ServerToClientCustom::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyCustom* YouMeIM_Command_ServerToClientCustom::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyCustom;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyCustom* YouMeIM_Command_ServerToClientCustom::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyCustom* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientCustom::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyCustom* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.messageBody)
}

// required string senderYOUMEID = 3;
bool YouMeIM_Command_ServerToClientCustom::has_senderyoumeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ServerToClientCustom::set_has_senderyoumeid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ServerToClientCustom::clear_has_senderyoumeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ServerToClientCustom::clear_senderyoumeid() {
  senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senderyoumeid();
}
 const ::std::string& YouMeIM_Command_ServerToClientCustom::senderyoumeid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.senderYOUMEID)
  return senderyoumeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientCustom::set_senderyoumeid(const ::std::string& value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientCustom::set_senderyoumeid(const char* value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientCustom::set_senderyoumeid(const char* value, size_t size) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.senderYOUMEID)
}
 ::std::string* YouMeIM_Command_ServerToClientCustom::mutable_senderyoumeid() {
  set_has_senderyoumeid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.senderYOUMEID)
  return senderyoumeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientCustom::release_senderyoumeid() {
  clear_has_senderyoumeid();
  return senderyoumeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientCustom::set_allocated_senderyoumeid(::std::string* senderyoumeid) {
  if (senderyoumeid != NULL) {
    set_has_senderyoumeid();
  } else {
    clear_has_senderyoumeid();
  }
  senderyoumeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), senderyoumeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.senderYOUMEID)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
bool YouMeIM_Command_ServerToClientCustom::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ServerToClientCustom::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ServerToClientCustom::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ServerToClientCustom::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ServerToClientCustom::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ServerToClientCustom::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.chatType)
}

// required string YOUMEGROUPID = 5;
bool YouMeIM_Command_ServerToClientCustom::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_Command_ServerToClientCustom::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_Command_ServerToClientCustom::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_Command_ServerToClientCustom::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ServerToClientCustom::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientCustom::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientCustom::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientCustom::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ServerToClientCustom::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientCustom::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientCustom::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientCustom.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ServerToClientText::kMsgHeadFieldNumber;
const int YouMeIM_Command_ServerToClientText::kMessageBodyFieldNumber;
const int YouMeIM_Command_ServerToClientText::kSenderYOUMEIDFieldNumber;
const int YouMeIM_Command_ServerToClientText::kChatTypeFieldNumber;
const int YouMeIM_Command_ServerToClientText::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ServerToClientText::YouMeIM_Command_ServerToClientText()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientText)
}

void YouMeIM_Command_ServerToClientText::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyText*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyText::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyText*>(&::YouMeIMProtocol::YouMeIM_MessageBodyText::default_instance());
#endif
}

YouMeIM_Command_ServerToClientText::YouMeIM_Command_ServerToClientText(const YouMeIM_Command_ServerToClientText& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientText)
}

void YouMeIM_Command_ServerToClientText::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  senderyoumeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ServerToClientText::~YouMeIM_Command_ServerToClientText() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientText)
  SharedDtor();
}

void YouMeIM_Command_ServerToClientText::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  senderyoumeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ServerToClientText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ServerToClientText& YouMeIM_Command_ServerToClientText::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ServerToClientText* YouMeIM_Command_ServerToClientText::default_instance_ = NULL;

YouMeIM_Command_ServerToClientText* YouMeIM_Command_ServerToClientText::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ServerToClientText* n = new YouMeIM_Command_ServerToClientText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ServerToClientText::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyText::Clear();
    }
    if (has_senderyoumeid()) {
      senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ServerToClientText::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientText)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_senderYOUMEID;
        break;
      }

      // required string senderYOUMEID = 3;
      case 3: {
        if (tag == 26) {
         parse_senderYOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderyoumeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
      case 4: {
        if (tag == 32) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 5;
      case 5: {
        if (tag == 42) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ServerToClientText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ServerToClientText)
  return false;
#undef DO_
}

void YouMeIM_Command_ServerToClientText::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientText)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required string senderYOUMEID = 3;
  if (has_senderyoumeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->senderyoumeid(), output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 5;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ServerToClientText)
}

int YouMeIM_Command_ServerToClientText::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_senderyoumeid()) {
    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ServerToClientText::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ServerToClientText::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ServerToClientText*>(&from));
}

void YouMeIM_Command_ServerToClientText::MergeFrom(const YouMeIM_Command_ServerToClientText& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyText::MergeFrom(from.messagebody());
    }
    if (from.has_senderyoumeid()) {
      set_has_senderyoumeid();
      senderyoumeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderyoumeid_);
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ServerToClientText::CopyFrom(const YouMeIM_Command_ServerToClientText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ServerToClientText::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ServerToClientText::Swap(YouMeIM_Command_ServerToClientText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ServerToClientText::InternalSwap(YouMeIM_Command_ServerToClientText* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  senderyoumeid_.Swap(&other->senderyoumeid_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ServerToClientText::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ServerToClientText";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ServerToClientText

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_ServerToClientText::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ServerToClientText::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ServerToClientText::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ServerToClientText::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_ServerToClientText::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientText::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientText::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientText::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyText messageBody = 2;
bool YouMeIM_Command_ServerToClientText::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ServerToClientText::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ServerToClientText::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ServerToClientText::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyText::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyText& YouMeIM_Command_ServerToClientText::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyText* YouMeIM_Command_ServerToClientText::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyText;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyText* YouMeIM_Command_ServerToClientText::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyText* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientText::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyText* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.messageBody)
}

// required string senderYOUMEID = 3;
bool YouMeIM_Command_ServerToClientText::has_senderyoumeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ServerToClientText::set_has_senderyoumeid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ServerToClientText::clear_has_senderyoumeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ServerToClientText::clear_senderyoumeid() {
  senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senderyoumeid();
}
 const ::std::string& YouMeIM_Command_ServerToClientText::senderyoumeid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.senderYOUMEID)
  return senderyoumeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientText::set_senderyoumeid(const ::std::string& value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientText::set_senderyoumeid(const char* value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientText::set_senderyoumeid(const char* value, size_t size) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.senderYOUMEID)
}
 ::std::string* YouMeIM_Command_ServerToClientText::mutable_senderyoumeid() {
  set_has_senderyoumeid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.senderYOUMEID)
  return senderyoumeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientText::release_senderyoumeid() {
  clear_has_senderyoumeid();
  return senderyoumeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientText::set_allocated_senderyoumeid(::std::string* senderyoumeid) {
  if (senderyoumeid != NULL) {
    set_has_senderyoumeid();
  } else {
    clear_has_senderyoumeid();
  }
  senderyoumeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), senderyoumeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.senderYOUMEID)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
bool YouMeIM_Command_ServerToClientText::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ServerToClientText::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ServerToClientText::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ServerToClientText::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ServerToClientText::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ServerToClientText::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.chatType)
}

// required string YOUMEGROUPID = 5;
bool YouMeIM_Command_ServerToClientText::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_Command_ServerToClientText::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_Command_ServerToClientText::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_Command_ServerToClientText::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ServerToClientText::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientText::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientText::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientText::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ServerToClientText::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientText::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientText::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientText.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ServerToClientEmoji::kMsgHeadFieldNumber;
const int YouMeIM_Command_ServerToClientEmoji::kMessageBodyFieldNumber;
const int YouMeIM_Command_ServerToClientEmoji::kSenderYOUMEIDFieldNumber;
const int YouMeIM_Command_ServerToClientEmoji::kChatTypeFieldNumber;
const int YouMeIM_Command_ServerToClientEmoji::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ServerToClientEmoji::YouMeIM_Command_ServerToClientEmoji()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji)
}

void YouMeIM_Command_ServerToClientEmoji::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji*>(&::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::default_instance());
#endif
}

YouMeIM_Command_ServerToClientEmoji::YouMeIM_Command_ServerToClientEmoji(const YouMeIM_Command_ServerToClientEmoji& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji)
}

void YouMeIM_Command_ServerToClientEmoji::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  senderyoumeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ServerToClientEmoji::~YouMeIM_Command_ServerToClientEmoji() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji)
  SharedDtor();
}

void YouMeIM_Command_ServerToClientEmoji::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  senderyoumeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ServerToClientEmoji::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ServerToClientEmoji& YouMeIM_Command_ServerToClientEmoji::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ServerToClientEmoji* YouMeIM_Command_ServerToClientEmoji::default_instance_ = NULL;

YouMeIM_Command_ServerToClientEmoji* YouMeIM_Command_ServerToClientEmoji::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ServerToClientEmoji* n = new YouMeIM_Command_ServerToClientEmoji;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ServerToClientEmoji::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::Clear();
    }
    if (has_senderyoumeid()) {
      senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ServerToClientEmoji::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_senderYOUMEID;
        break;
      }

      // required string senderYOUMEID = 3;
      case 3: {
        if (tag == 26) {
         parse_senderYOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderyoumeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
      case 4: {
        if (tag == 32) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 5;
      case 5: {
        if (tag == 42) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji)
  return false;
#undef DO_
}

void YouMeIM_Command_ServerToClientEmoji::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required string senderYOUMEID = 3;
  if (has_senderyoumeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->senderyoumeid(), output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 5;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji)
}

int YouMeIM_Command_ServerToClientEmoji::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_senderyoumeid()) {
    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ServerToClientEmoji::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ServerToClientEmoji::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ServerToClientEmoji*>(&from));
}

void YouMeIM_Command_ServerToClientEmoji::MergeFrom(const YouMeIM_Command_ServerToClientEmoji& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::MergeFrom(from.messagebody());
    }
    if (from.has_senderyoumeid()) {
      set_has_senderyoumeid();
      senderyoumeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderyoumeid_);
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ServerToClientEmoji::CopyFrom(const YouMeIM_Command_ServerToClientEmoji& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ServerToClientEmoji::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ServerToClientEmoji::Swap(YouMeIM_Command_ServerToClientEmoji* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ServerToClientEmoji::InternalSwap(YouMeIM_Command_ServerToClientEmoji* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  senderyoumeid_.Swap(&other->senderyoumeid_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ServerToClientEmoji::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ServerToClientEmoji

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_ServerToClientEmoji::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ServerToClientEmoji::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_ServerToClientEmoji::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientEmoji::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientEmoji::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientEmoji::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyEmoji messageBody = 2;
bool YouMeIM_Command_ServerToClientEmoji::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ServerToClientEmoji::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyEmoji::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji& YouMeIM_Command_ServerToClientEmoji::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyEmoji* YouMeIM_Command_ServerToClientEmoji::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyEmoji* YouMeIM_Command_ServerToClientEmoji::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyEmoji* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientEmoji::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyEmoji* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.messageBody)
}

// required string senderYOUMEID = 3;
bool YouMeIM_Command_ServerToClientEmoji::has_senderyoumeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ServerToClientEmoji::set_has_senderyoumeid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_has_senderyoumeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_senderyoumeid() {
  senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senderyoumeid();
}
 const ::std::string& YouMeIM_Command_ServerToClientEmoji::senderyoumeid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.senderYOUMEID)
  return senderyoumeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientEmoji::set_senderyoumeid(const ::std::string& value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientEmoji::set_senderyoumeid(const char* value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientEmoji::set_senderyoumeid(const char* value, size_t size) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.senderYOUMEID)
}
 ::std::string* YouMeIM_Command_ServerToClientEmoji::mutable_senderyoumeid() {
  set_has_senderyoumeid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.senderYOUMEID)
  return senderyoumeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientEmoji::release_senderyoumeid() {
  clear_has_senderyoumeid();
  return senderyoumeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientEmoji::set_allocated_senderyoumeid(::std::string* senderyoumeid) {
  if (senderyoumeid != NULL) {
    set_has_senderyoumeid();
  } else {
    clear_has_senderyoumeid();
  }
  senderyoumeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), senderyoumeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.senderYOUMEID)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
bool YouMeIM_Command_ServerToClientEmoji::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ServerToClientEmoji::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ServerToClientEmoji::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ServerToClientEmoji::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.chatType)
}

// required string YOUMEGROUPID = 5;
bool YouMeIM_Command_ServerToClientEmoji::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_Command_ServerToClientEmoji::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_Command_ServerToClientEmoji::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ServerToClientEmoji::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientEmoji::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientEmoji::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientEmoji::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ServerToClientEmoji::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientEmoji::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientEmoji::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientEmoji.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ServerToClientFile::kMsgHeadFieldNumber;
const int YouMeIM_Command_ServerToClientFile::kMessageBodyFieldNumber;
const int YouMeIM_Command_ServerToClientFile::kSenderYOUMEIDFieldNumber;
const int YouMeIM_Command_ServerToClientFile::kChatTypeFieldNumber;
const int YouMeIM_Command_ServerToClientFile::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ServerToClientFile::YouMeIM_Command_ServerToClientFile()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile)
}

void YouMeIM_Command_ServerToClientFile::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyFile*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyFile::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyFile*>(&::YouMeIMProtocol::YouMeIM_MessageBodyFile::default_instance());
#endif
}

YouMeIM_Command_ServerToClientFile::YouMeIM_Command_ServerToClientFile(const YouMeIM_Command_ServerToClientFile& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile)
}

void YouMeIM_Command_ServerToClientFile::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  senderyoumeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ServerToClientFile::~YouMeIM_Command_ServerToClientFile() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile)
  SharedDtor();
}

void YouMeIM_Command_ServerToClientFile::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  senderyoumeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ServerToClientFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ServerToClientFile& YouMeIM_Command_ServerToClientFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ServerToClientFile* YouMeIM_Command_ServerToClientFile::default_instance_ = NULL;

YouMeIM_Command_ServerToClientFile* YouMeIM_Command_ServerToClientFile::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ServerToClientFile* n = new YouMeIM_Command_ServerToClientFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ServerToClientFile::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyFile::Clear();
    }
    if (has_senderyoumeid()) {
      senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ServerToClientFile::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_senderYOUMEID;
        break;
      }

      // required string senderYOUMEID = 3;
      case 3: {
        if (tag == 26) {
         parse_senderYOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderyoumeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
      case 4: {
        if (tag == 32) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 5;
      case 5: {
        if (tag == 42) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile)
  return false;
#undef DO_
}

void YouMeIM_Command_ServerToClientFile::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required string senderYOUMEID = 3;
  if (has_senderyoumeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->senderyoumeid(), output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 5;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile)
}

int YouMeIM_Command_ServerToClientFile::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_senderyoumeid()) {
    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ServerToClientFile::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ServerToClientFile::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ServerToClientFile*>(&from));
}

void YouMeIM_Command_ServerToClientFile::MergeFrom(const YouMeIM_Command_ServerToClientFile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyFile::MergeFrom(from.messagebody());
    }
    if (from.has_senderyoumeid()) {
      set_has_senderyoumeid();
      senderyoumeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderyoumeid_);
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ServerToClientFile::CopyFrom(const YouMeIM_Command_ServerToClientFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ServerToClientFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ServerToClientFile::Swap(YouMeIM_Command_ServerToClientFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ServerToClientFile::InternalSwap(YouMeIM_Command_ServerToClientFile* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  senderyoumeid_.Swap(&other->senderyoumeid_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ServerToClientFile::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ServerToClientFile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ServerToClientFile

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_ServerToClientFile::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ServerToClientFile::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ServerToClientFile::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ServerToClientFile::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_ServerToClientFile::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientFile::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientFile::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientFile::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyFile messageBody = 2;
bool YouMeIM_Command_ServerToClientFile::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ServerToClientFile::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ServerToClientFile::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ServerToClientFile::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyFile::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyFile& YouMeIM_Command_ServerToClientFile::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyFile* YouMeIM_Command_ServerToClientFile::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyFile;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyFile* YouMeIM_Command_ServerToClientFile::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyFile* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientFile::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyFile* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.messageBody)
}

// required string senderYOUMEID = 3;
bool YouMeIM_Command_ServerToClientFile::has_senderyoumeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ServerToClientFile::set_has_senderyoumeid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ServerToClientFile::clear_has_senderyoumeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ServerToClientFile::clear_senderyoumeid() {
  senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senderyoumeid();
}
 const ::std::string& YouMeIM_Command_ServerToClientFile::senderyoumeid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.senderYOUMEID)
  return senderyoumeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientFile::set_senderyoumeid(const ::std::string& value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientFile::set_senderyoumeid(const char* value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientFile::set_senderyoumeid(const char* value, size_t size) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.senderYOUMEID)
}
 ::std::string* YouMeIM_Command_ServerToClientFile::mutable_senderyoumeid() {
  set_has_senderyoumeid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.senderYOUMEID)
  return senderyoumeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientFile::release_senderyoumeid() {
  clear_has_senderyoumeid();
  return senderyoumeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientFile::set_allocated_senderyoumeid(::std::string* senderyoumeid) {
  if (senderyoumeid != NULL) {
    set_has_senderyoumeid();
  } else {
    clear_has_senderyoumeid();
  }
  senderyoumeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), senderyoumeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.senderYOUMEID)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
bool YouMeIM_Command_ServerToClientFile::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ServerToClientFile::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ServerToClientFile::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ServerToClientFile::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ServerToClientFile::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ServerToClientFile::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.chatType)
}

// required string YOUMEGROUPID = 5;
bool YouMeIM_Command_ServerToClientFile::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_Command_ServerToClientFile::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_Command_ServerToClientFile::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_Command_ServerToClientFile::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ServerToClientFile::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientFile::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientFile::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientFile::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ServerToClientFile::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientFile::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientFile::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientFile.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ServerToClientVoice::kMsgHeadFieldNumber;
const int YouMeIM_Command_ServerToClientVoice::kMessageBodyFieldNumber;
const int YouMeIM_Command_ServerToClientVoice::kSenderYOUMEIDFieldNumber;
const int YouMeIM_Command_ServerToClientVoice::kChatTypeFieldNumber;
const int YouMeIM_Command_ServerToClientVoice::kYOUMEGROUPIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ServerToClientVoice::YouMeIM_Command_ServerToClientVoice()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice)
}

void YouMeIM_Command_ServerToClientVoice::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyVoice*>(
      ::YouMeIMProtocol::YouMeIM_MessageBodyVoice::internal_default_instance());
#else
  messagebody_ = const_cast< ::YouMeIMProtocol::YouMeIM_MessageBodyVoice*>(&::YouMeIMProtocol::YouMeIM_MessageBodyVoice::default_instance());
#endif
}

YouMeIM_Command_ServerToClientVoice::YouMeIM_Command_ServerToClientVoice(const YouMeIM_Command_ServerToClientVoice& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice)
}

void YouMeIM_Command_ServerToClientVoice::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  messagebody_ = NULL;
  senderyoumeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ServerToClientVoice::~YouMeIM_Command_ServerToClientVoice() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice)
  SharedDtor();
}

void YouMeIM_Command_ServerToClientVoice::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  senderyoumeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete messagebody_;
  }
}

void YouMeIM_Command_ServerToClientVoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ServerToClientVoice& YouMeIM_Command_ServerToClientVoice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ServerToClientVoice* YouMeIM_Command_ServerToClientVoice::default_instance_ = NULL;

YouMeIM_Command_ServerToClientVoice* YouMeIM_Command_ServerToClientVoice::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ServerToClientVoice* n = new YouMeIM_Command_ServerToClientVoice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ServerToClientVoice::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_messagebody()) {
      if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyVoice::Clear();
    }
    if (has_senderyoumeid()) {
      senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    chattype_ = 0;
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ServerToClientVoice::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageBody;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
      case 2: {
        if (tag == 18) {
         parse_messageBody:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messagebody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_senderYOUMEID;
        break;
      }

      // required string senderYOUMEID = 3;
      case 3: {
        if (tag == 26) {
         parse_senderYOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderyoumeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
      case 4: {
        if (tag == 32) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 5;
      case 5: {
        if (tag == 42) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice)
  return false;
#undef DO_
}

void YouMeIM_Command_ServerToClientVoice::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
  if (has_messagebody()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->messagebody_, output);
  }

  // required string senderYOUMEID = 3;
  if (has_senderyoumeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->senderyoumeid(), output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 5;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->youmegroupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice)
}

int YouMeIM_Command_ServerToClientVoice::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_messagebody()) {
    // required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);
  }

  if (has_senderyoumeid()) {
    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_ServerToClientVoice::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messagebody_);

    // required string senderYOUMEID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->senderyoumeid());

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ServerToClientVoice::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ServerToClientVoice*>(&from));
}

void YouMeIM_Command_ServerToClientVoice::MergeFrom(const YouMeIM_Command_ServerToClientVoice& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_messagebody()) {
      mutable_messagebody()->::YouMeIMProtocol::YouMeIM_MessageBodyVoice::MergeFrom(from.messagebody());
    }
    if (from.has_senderyoumeid()) {
      set_has_senderyoumeid();
      senderyoumeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderyoumeid_);
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ServerToClientVoice::CopyFrom(const YouMeIM_Command_ServerToClientVoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ServerToClientVoice::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_messagebody()) {
    if (!this->messagebody_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ServerToClientVoice::Swap(YouMeIM_Command_ServerToClientVoice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ServerToClientVoice::InternalSwap(YouMeIM_Command_ServerToClientVoice* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(messagebody_, other->messagebody_);
  senderyoumeid_.Swap(&other->senderyoumeid_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ServerToClientVoice::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ServerToClientVoice

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_ServerToClientVoice::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ServerToClientVoice::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ServerToClientVoice::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ServerToClientVoice::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_ServerToClientVoice::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientVoice::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ServerToClientVoice::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientVoice::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_MessageBodyVoice messageBody = 2;
bool YouMeIM_Command_ServerToClientVoice::has_messagebody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ServerToClientVoice::set_has_messagebody() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ServerToClientVoice::clear_has_messagebody() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ServerToClientVoice::clear_messagebody() {
  if (messagebody_ != NULL) messagebody_->::YouMeIMProtocol::YouMeIM_MessageBodyVoice::Clear();
  clear_has_messagebody();
}
const ::YouMeIMProtocol::YouMeIM_MessageBodyVoice& YouMeIM_Command_ServerToClientVoice::messagebody() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.messageBody)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return messagebody_ != NULL ? *messagebody_ : *default_instance().messagebody_;
#else
  return messagebody_ != NULL ? *messagebody_ : *default_instance_->messagebody_;
#endif
}
::YouMeIMProtocol::YouMeIM_MessageBodyVoice* YouMeIM_Command_ServerToClientVoice::mutable_messagebody() {
  set_has_messagebody();
  if (messagebody_ == NULL) {
    messagebody_ = new ::YouMeIMProtocol::YouMeIM_MessageBodyVoice;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.messageBody)
  return messagebody_;
}
::YouMeIMProtocol::YouMeIM_MessageBodyVoice* YouMeIM_Command_ServerToClientVoice::release_messagebody() {
  clear_has_messagebody();
  ::YouMeIMProtocol::YouMeIM_MessageBodyVoice* temp = messagebody_;
  messagebody_ = NULL;
  return temp;
}
void YouMeIM_Command_ServerToClientVoice::set_allocated_messagebody(::YouMeIMProtocol::YouMeIM_MessageBodyVoice* messagebody) {
  delete messagebody_;
  messagebody_ = messagebody;
  if (messagebody) {
    set_has_messagebody();
  } else {
    clear_has_messagebody();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.messageBody)
}

// required string senderYOUMEID = 3;
bool YouMeIM_Command_ServerToClientVoice::has_senderyoumeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_ServerToClientVoice::set_has_senderyoumeid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_ServerToClientVoice::clear_has_senderyoumeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_ServerToClientVoice::clear_senderyoumeid() {
  senderyoumeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senderyoumeid();
}
 const ::std::string& YouMeIM_Command_ServerToClientVoice::senderyoumeid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.senderYOUMEID)
  return senderyoumeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientVoice::set_senderyoumeid(const ::std::string& value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientVoice::set_senderyoumeid(const char* value) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.senderYOUMEID)
}
 void YouMeIM_Command_ServerToClientVoice::set_senderyoumeid(const char* value, size_t size) {
  set_has_senderyoumeid();
  senderyoumeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.senderYOUMEID)
}
 ::std::string* YouMeIM_Command_ServerToClientVoice::mutable_senderyoumeid() {
  set_has_senderyoumeid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.senderYOUMEID)
  return senderyoumeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientVoice::release_senderyoumeid() {
  clear_has_senderyoumeid();
  return senderyoumeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientVoice::set_allocated_senderyoumeid(::std::string* senderyoumeid) {
  if (senderyoumeid != NULL) {
    set_has_senderyoumeid();
  } else {
    clear_has_senderyoumeid();
  }
  senderyoumeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), senderyoumeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.senderYOUMEID)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 4;
bool YouMeIM_Command_ServerToClientVoice::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_ServerToClientVoice::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_ServerToClientVoice::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_ServerToClientVoice::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_ServerToClientVoice::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_ServerToClientVoice::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.chatType)
}

// required string YOUMEGROUPID = 5;
bool YouMeIM_Command_ServerToClientVoice::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_Command_ServerToClientVoice::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_Command_ServerToClientVoice::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_Command_ServerToClientVoice::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_ServerToClientVoice::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientVoice::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientVoice::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.YOUMEGROUPID)
}
 void YouMeIM_Command_ServerToClientVoice::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_ServerToClientVoice::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ServerToClientVoice::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ServerToClientVoice::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ServerToClientVoice.YOUMEGROUPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_MessageAck::kMsgHeadFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_MessageAck::YouMeIM_Command_MessageAck()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_MessageAck)
}

void YouMeIM_Command_MessageAck::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_MessageAck::YouMeIM_Command_MessageAck(const YouMeIM_Command_MessageAck& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_MessageAck)
}

void YouMeIM_Command_MessageAck::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_MessageAck::~YouMeIM_Command_MessageAck() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_MessageAck)
  SharedDtor();
}

void YouMeIM_Command_MessageAck::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_MessageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_MessageAck& YouMeIM_Command_MessageAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_MessageAck* YouMeIM_Command_MessageAck::default_instance_ = NULL;

YouMeIM_Command_MessageAck* YouMeIM_Command_MessageAck::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_MessageAck* n = new YouMeIM_Command_MessageAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_MessageAck::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_MessageAck::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_MessageAck)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_MessageAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_MessageAck)
  return false;
#undef DO_
}

void YouMeIM_Command_MessageAck::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_MessageAck)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_MessageAck)
}

int YouMeIM_Command_MessageAck::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_MessageAck::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_MessageAck*>(&from));
}

void YouMeIM_Command_MessageAck::MergeFrom(const YouMeIM_Command_MessageAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_MessageAck::CopyFrom(const YouMeIM_Command_MessageAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_MessageAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_MessageAck::Swap(YouMeIM_Command_MessageAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_MessageAck::InternalSwap(YouMeIM_Command_MessageAck* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_MessageAck::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_MessageAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_MessageAck

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_MessageAck::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_MessageAck::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_MessageAck::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_MessageAck::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_MessageAck::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_MessageAck.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_MessageAck::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_MessageAck.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_MessageAck::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_MessageAck::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_MessageAck.msgHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetOfflineMsg::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetOfflineMsg::kChatTypeFieldNumber;
const int YouMeIM_Command_GetOfflineMsg::kYOUMEGROUPIDFieldNumber;
const int YouMeIM_Command_GetOfflineMsg::kLastMsgSerialFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetOfflineMsg::YouMeIM_Command_GetOfflineMsg()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg)
}

void YouMeIM_Command_GetOfflineMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_GetOfflineMsg::YouMeIM_Command_GetOfflineMsg(const YouMeIM_Command_GetOfflineMsg& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg)
}

void YouMeIM_Command_GetOfflineMsg::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  lastmsgserial_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetOfflineMsg::~YouMeIM_Command_GetOfflineMsg() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg)
  SharedDtor();
}

void YouMeIM_Command_GetOfflineMsg::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetOfflineMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetOfflineMsg& YouMeIM_Command_GetOfflineMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetOfflineMsg* YouMeIM_Command_GetOfflineMsg::default_instance_ = NULL;

YouMeIM_Command_GetOfflineMsg* YouMeIM_Command_GetOfflineMsg::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetOfflineMsg* n = new YouMeIM_Command_GetOfflineMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetOfflineMsg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeIM_Command_GetOfflineMsg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(lastmsgserial_, chattype_);
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetOfflineMsg::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
      case 2: {
        if (tag == 16) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 3;
      case 3: {
        if (tag == 26) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastMsgSerial;
        break;
      }

      // optional uint64 lastMsgSerial = 4;
      case 4: {
        if (tag == 32) {
         parse_lastMsgSerial:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmsgserial_)));
          set_has_lastmsgserial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg)
  return false;
#undef DO_
}

void YouMeIM_Command_GetOfflineMsg::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 3;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->youmegroupid(), output);
  }

  // optional uint64 lastMsgSerial = 4;
  if (has_lastmsgserial()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastmsgserial(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg)
}

int YouMeIM_Command_GetOfflineMsg::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_GetOfflineMsg::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 lastMsgSerial = 4;
  if (has_lastmsgserial()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->lastmsgserial());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetOfflineMsg::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetOfflineMsg*>(&from));
}

void YouMeIM_Command_GetOfflineMsg::MergeFrom(const YouMeIM_Command_GetOfflineMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
    if (from.has_lastmsgserial()) {
      set_lastmsgserial(from.lastmsgserial());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetOfflineMsg::CopyFrom(const YouMeIM_Command_GetOfflineMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetOfflineMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_GetOfflineMsg::Swap(YouMeIM_Command_GetOfflineMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetOfflineMsg::InternalSwap(YouMeIM_Command_GetOfflineMsg* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  std::swap(lastmsgserial_, other->lastmsgserial_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetOfflineMsg::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetOfflineMsg

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_GetOfflineMsg::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetOfflineMsg::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetOfflineMsg::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetOfflineMsg::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_GetOfflineMsg::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetOfflineMsg::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetOfflineMsg::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetOfflineMsg::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
bool YouMeIM_Command_GetOfflineMsg::has_chattype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_GetOfflineMsg::set_has_chattype() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_GetOfflineMsg::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_GetOfflineMsg::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_GetOfflineMsg::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_GetOfflineMsg::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.chatType)
}

// required string YOUMEGROUPID = 3;
bool YouMeIM_Command_GetOfflineMsg::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_GetOfflineMsg::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_GetOfflineMsg::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_GetOfflineMsg::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_GetOfflineMsg::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetOfflineMsg::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.YOUMEGROUPID)
}
 void YouMeIM_Command_GetOfflineMsg::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.YOUMEGROUPID)
}
 void YouMeIM_Command_GetOfflineMsg::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_GetOfflineMsg::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_GetOfflineMsg::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetOfflineMsg::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.YOUMEGROUPID)
}

// optional uint64 lastMsgSerial = 4;
bool YouMeIM_Command_GetOfflineMsg::has_lastmsgserial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_GetOfflineMsg::set_has_lastmsgserial() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_GetOfflineMsg::clear_has_lastmsgserial() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_GetOfflineMsg::clear_lastmsgserial() {
  lastmsgserial_ = GOOGLE_ULONGLONG(0);
  clear_has_lastmsgserial();
}
 ::youmecommon::protobuf::uint64 YouMeIM_Command_GetOfflineMsg::lastmsgserial() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.lastMsgSerial)
  return lastmsgserial_;
}
 void YouMeIM_Command_GetOfflineMsg::set_lastmsgserial(::youmecommon::protobuf::uint64 value) {
  set_has_lastmsgserial();
  lastmsgserial_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsg.lastMsgSerial)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetOfflineMsgResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetOfflineMsgResponse::kChatTypeFieldNumber;
const int YouMeIM_Command_GetOfflineMsgResponse::kYOUMEGROUPIDFieldNumber;
const int YouMeIM_Command_GetOfflineMsgResponse::kMsgListsFieldNumber;
const int YouMeIM_Command_GetOfflineMsgResponse::kLastMsgSerialFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetOfflineMsgResponse::YouMeIM_Command_GetOfflineMsgResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse)
}

void YouMeIM_Command_GetOfflineMsgResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_GetOfflineMsgResponse::YouMeIM_Command_GetOfflineMsgResponse(const YouMeIM_Command_GetOfflineMsgResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse)
}

void YouMeIM_Command_GetOfflineMsgResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  chattype_ = 0;
  youmegroupid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  lastmsgserial_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetOfflineMsgResponse::~YouMeIM_Command_GetOfflineMsgResponse() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse)
  SharedDtor();
}

void YouMeIM_Command_GetOfflineMsgResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmegroupid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetOfflineMsgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetOfflineMsgResponse& YouMeIM_Command_GetOfflineMsgResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetOfflineMsgResponse* YouMeIM_Command_GetOfflineMsgResponse::default_instance_ = NULL;

YouMeIM_Command_GetOfflineMsgResponse* YouMeIM_Command_GetOfflineMsgResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetOfflineMsgResponse* n = new YouMeIM_Command_GetOfflineMsgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetOfflineMsgResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeIM_Command_GetOfflineMsgResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 23u) {
    ZR_(lastmsgserial_, chattype_);
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmegroupid()) {
      youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  msglists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetOfflineMsgResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chatType;
        break;
      }

      // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
      case 2: {
        if (tag == 16) {
         parse_chatType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_YOUMEGROUPID;
        break;
      }

      // required string YOUMEGROUPID = 3;
      case 3: {
        if (tag == 26) {
         parse_YOUMEGROUPID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmegroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgLists;
        break;
      }

      // repeated bytes msgLists = 4;
      case 4: {
        if (tag == 34) {
         parse_msgLists:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_msglists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgLists;
        if (input->ExpectTag(40)) goto parse_lastMsgSerial;
        break;
      }

      // optional uint64 lastMsgSerial = 5;
      case 5: {
        if (tag == 40) {
         parse_lastMsgSerial:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmsgserial_)));
          set_has_lastmsgserial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_GetOfflineMsgResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
  if (has_chattype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chattype(), output);
  }

  // required string YOUMEGROUPID = 3;
  if (has_youmegroupid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->youmegroupid(), output);
  }

  // repeated bytes msgLists = 4;
  for (int i = 0; i < this->msglists_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msglists(i), output);
  }

  // optional uint64 lastMsgSerial = 5;
  if (has_lastmsgserial()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lastmsgserial(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse)
}

int YouMeIM_Command_GetOfflineMsgResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_chattype()) {
    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_youmegroupid()) {
    // required string YOUMEGROUPID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());
  }

  return total_size;
}
int YouMeIM_Command_GetOfflineMsgResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string YOUMEGROUPID = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmegroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 lastMsgSerial = 5;
  if (has_lastmsgserial()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->lastmsgserial());
  }

  // repeated bytes msgLists = 4;
  total_size += 1 * this->msglists_size();
  for (int i = 0; i < this->msglists_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
      this->msglists(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetOfflineMsgResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetOfflineMsgResponse*>(&from));
}

void YouMeIM_Command_GetOfflineMsgResponse::MergeFrom(const YouMeIM_Command_GetOfflineMsgResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msglists_.MergeFrom(from.msglists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_youmegroupid()) {
      set_has_youmegroupid();
      youmegroupid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmegroupid_);
    }
    if (from.has_lastmsgserial()) {
      set_lastmsgserial(from.lastmsgserial());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetOfflineMsgResponse::CopyFrom(const YouMeIM_Command_GetOfflineMsgResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetOfflineMsgResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_GetOfflineMsgResponse::Swap(YouMeIM_Command_GetOfflineMsgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetOfflineMsgResponse::InternalSwap(YouMeIM_Command_GetOfflineMsgResponse* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(chattype_, other->chattype_);
  youmegroupid_.Swap(&other->youmegroupid_);
  msglists_.UnsafeArenaSwap(&other->msglists_);
  std::swap(lastmsgserial_, other->lastmsgserial_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetOfflineMsgResponse::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetOfflineMsgResponse

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_GetOfflineMsgResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetOfflineMsgResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetOfflineMsgResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetOfflineMsgResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_GetOfflineMsgResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetOfflineMsgResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetOfflineMsgResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetOfflineMsgResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgHead)
}

// required .YouMeIMProtocol.YouMeIM_ChatType chatType = 2;
bool YouMeIM_Command_GetOfflineMsgResponse::has_chattype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_GetOfflineMsgResponse::set_has_chattype() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_GetOfflineMsgResponse::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_GetOfflineMsgResponse::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::YouMeIMProtocol::YouMeIM_ChatType YouMeIM_Command_GetOfflineMsgResponse::chattype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.chatType)
  return static_cast< ::YouMeIMProtocol::YouMeIM_ChatType >(chattype_);
}
 void YouMeIM_Command_GetOfflineMsgResponse::set_chattype(::YouMeIMProtocol::YouMeIM_ChatType value) {
  assert(::YouMeIMProtocol::YouMeIM_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.chatType)
}

// required string YOUMEGROUPID = 3;
bool YouMeIM_Command_GetOfflineMsgResponse::has_youmegroupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_GetOfflineMsgResponse::set_has_youmegroupid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_GetOfflineMsgResponse::clear_has_youmegroupid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_GetOfflineMsgResponse::clear_youmegroupid() {
  youmegroupid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmegroupid();
}
 const ::std::string& YouMeIM_Command_GetOfflineMsgResponse::youmegroupid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.YOUMEGROUPID)
  return youmegroupid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetOfflineMsgResponse::set_youmegroupid(const ::std::string& value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.YOUMEGROUPID)
}
 void YouMeIM_Command_GetOfflineMsgResponse::set_youmegroupid(const char* value) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.YOUMEGROUPID)
}
 void YouMeIM_Command_GetOfflineMsgResponse::set_youmegroupid(const char* value, size_t size) {
  set_has_youmegroupid();
  youmegroupid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.YOUMEGROUPID)
}
 ::std::string* YouMeIM_Command_GetOfflineMsgResponse::mutable_youmegroupid() {
  set_has_youmegroupid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.YOUMEGROUPID)
  return youmegroupid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_GetOfflineMsgResponse::release_youmegroupid() {
  clear_has_youmegroupid();
  return youmegroupid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetOfflineMsgResponse::set_allocated_youmegroupid(::std::string* youmegroupid) {
  if (youmegroupid != NULL) {
    set_has_youmegroupid();
  } else {
    clear_has_youmegroupid();
  }
  youmegroupid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmegroupid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.YOUMEGROUPID)
}

// repeated bytes msgLists = 4;
int YouMeIM_Command_GetOfflineMsgResponse::msglists_size() const {
  return msglists_.size();
}
void YouMeIM_Command_GetOfflineMsgResponse::clear_msglists() {
  msglists_.Clear();
}
 const ::std::string& YouMeIM_Command_GetOfflineMsgResponse::msglists(int index) const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
  return msglists_.Get(index);
}
 ::std::string* YouMeIM_Command_GetOfflineMsgResponse::mutable_msglists(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
  return msglists_.Mutable(index);
}
 void YouMeIM_Command_GetOfflineMsgResponse::set_msglists(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
  msglists_.Mutable(index)->assign(value);
}
 void YouMeIM_Command_GetOfflineMsgResponse::set_msglists(int index, const char* value) {
  msglists_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
}
 void YouMeIM_Command_GetOfflineMsgResponse::set_msglists(int index, const void* value, size_t size) {
  msglists_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
}
 ::std::string* YouMeIM_Command_GetOfflineMsgResponse::add_msglists() {
  return msglists_.Add();
}
 void YouMeIM_Command_GetOfflineMsgResponse::add_msglists(const ::std::string& value) {
  msglists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
}
 void YouMeIM_Command_GetOfflineMsgResponse::add_msglists(const char* value) {
  msglists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
}
 void YouMeIM_Command_GetOfflineMsgResponse::add_msglists(const void* value, size_t size) {
  msglists_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
YouMeIM_Command_GetOfflineMsgResponse::msglists() const {
  // @@protoc_insertion_point(field_list:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
  return msglists_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
YouMeIM_Command_GetOfflineMsgResponse::mutable_msglists() {
  // @@protoc_insertion_point(field_mutable_list:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.msgLists)
  return &msglists_;
}

// optional uint64 lastMsgSerial = 5;
bool YouMeIM_Command_GetOfflineMsgResponse::has_lastmsgserial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_Command_GetOfflineMsgResponse::set_has_lastmsgserial() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_Command_GetOfflineMsgResponse::clear_has_lastmsgserial() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_Command_GetOfflineMsgResponse::clear_lastmsgserial() {
  lastmsgserial_ = GOOGLE_ULONGLONG(0);
  clear_has_lastmsgserial();
}
 ::youmecommon::protobuf::uint64 YouMeIM_Command_GetOfflineMsgResponse::lastmsgserial() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.lastMsgSerial)
  return lastmsgserial_;
}
 void YouMeIM_Command_GetOfflineMsgResponse::set_lastmsgserial(::youmecommon::protobuf::uint64 value) {
  set_has_lastmsgserial();
  lastmsgserial_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetOfflineMsgResponse.lastMsgSerial)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetUploadToken::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetUploadToken::kUploadpolicyFieldNumber;
const int YouMeIM_Command_GetUploadToken::kAreaCodeFieldNumber;
const int YouMeIM_Command_GetUploadToken::kFileSizeFieldNumber;
const int YouMeIM_Command_GetUploadToken::kMd5FieldNumber;
const int YouMeIM_Command_GetUploadToken::kSuffixFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetUploadToken::YouMeIM_Command_GetUploadToken()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_GetUploadToken)
}

void YouMeIM_Command_GetUploadToken::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_GetUploadToken::YouMeIM_Command_GetUploadToken(const YouMeIM_Command_GetUploadToken& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_GetUploadToken)
}

void YouMeIM_Command_GetUploadToken::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  uploadpolicy_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  areacode_ = 0u;
  filesize_ = 0u;
  md5_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetUploadToken::~YouMeIM_Command_GetUploadToken() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_GetUploadToken)
  SharedDtor();
}

void YouMeIM_Command_GetUploadToken::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  uploadpolicy_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetUploadToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetUploadToken& YouMeIM_Command_GetUploadToken::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetUploadToken* YouMeIM_Command_GetUploadToken::default_instance_ = NULL;

YouMeIM_Command_GetUploadToken* YouMeIM_Command_GetUploadToken::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetUploadToken* n = new YouMeIM_Command_GetUploadToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetUploadToken::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeIM_Command_GetUploadToken*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(areacode_, filesize_);
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_uploadpolicy()) {
      uploadpolicy_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_md5()) {
      md5_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_suffix()) {
      suffix_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetUploadToken::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_GetUploadToken)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uploadpolicy;
        break;
      }

      // optional string uploadpolicy = 2;
      case 2: {
        if (tag == 18) {
         parse_uploadpolicy:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uploadpolicy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 3;
      case 3: {
        if (tag == 24) {
         parse_areaCode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fileSize;
        break;
      }

      // optional uint32 fileSize = 4;
      case 4: {
        if (tag == 32) {
         parse_fileSize:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_md5;
        break;
      }

      // optional string md5 = 5;
      case 5: {
        if (tag == 42) {
         parse_md5:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_suffix;
        break;
      }

      // optional string suffix = 6;
      case 6: {
        if (tag == 50) {
         parse_suffix:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_GetUploadToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_GetUploadToken)
  return false;
#undef DO_
}

void YouMeIM_Command_GetUploadToken::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_GetUploadToken)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // optional string uploadpolicy = 2;
  if (has_uploadpolicy()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uploadpolicy(), output);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(3, this->areacode(), output);
  }

  // optional uint32 fileSize = 4;
  if (has_filesize()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filesize(), output);
  }

  // optional string md5 = 5;
  if (has_md5()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->md5(), output);
  }

  // optional string suffix = 6;
  if (has_suffix()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->suffix(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_GetUploadToken)
}

int YouMeIM_Command_GetUploadToken::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  if (_has_bits_[1 / 32] & 62u) {
    // optional string uploadpolicy = 2;
    if (has_uploadpolicy()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->uploadpolicy());
    }

    // optional uint32 areaCode = 3;
    if (has_areacode()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional uint32 fileSize = 4;
    if (has_filesize()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

    // optional string md5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional string suffix = 6;
    if (has_suffix()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetUploadToken::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetUploadToken*>(&from));
}

void YouMeIM_Command_GetUploadToken::MergeFrom(const YouMeIM_Command_GetUploadToken& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_uploadpolicy()) {
      set_has_uploadpolicy();
      uploadpolicy_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.uploadpolicy_);
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_md5()) {
      set_has_md5();
      md5_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (from.has_suffix()) {
      set_has_suffix();
      suffix_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetUploadToken::CopyFrom(const YouMeIM_Command_GetUploadToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetUploadToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_GetUploadToken::Swap(YouMeIM_Command_GetUploadToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetUploadToken::InternalSwap(YouMeIM_Command_GetUploadToken* other) {
  std::swap(msghead_, other->msghead_);
  uploadpolicy_.Swap(&other->uploadpolicy_);
  std::swap(areacode_, other->areacode_);
  std::swap(filesize_, other->filesize_);
  md5_.Swap(&other->md5_);
  suffix_.Swap(&other->suffix_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetUploadToken::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_GetUploadToken";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetUploadToken

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_GetUploadToken::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetUploadToken::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetUploadToken::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetUploadToken::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_GetUploadToken::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetUploadToken::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetUploadToken::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetUploadToken::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.msgHead)
}

// optional string uploadpolicy = 2;
bool YouMeIM_Command_GetUploadToken::has_uploadpolicy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_GetUploadToken::set_has_uploadpolicy() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_GetUploadToken::clear_has_uploadpolicy() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_GetUploadToken::clear_uploadpolicy() {
  uploadpolicy_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uploadpolicy();
}
 const ::std::string& YouMeIM_Command_GetUploadToken::uploadpolicy() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.uploadpolicy)
  return uploadpolicy_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetUploadToken::set_uploadpolicy(const ::std::string& value) {
  set_has_uploadpolicy();
  uploadpolicy_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.uploadpolicy)
}
 void YouMeIM_Command_GetUploadToken::set_uploadpolicy(const char* value) {
  set_has_uploadpolicy();
  uploadpolicy_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.uploadpolicy)
}
 void YouMeIM_Command_GetUploadToken::set_uploadpolicy(const char* value, size_t size) {
  set_has_uploadpolicy();
  uploadpolicy_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.uploadpolicy)
}
 ::std::string* YouMeIM_Command_GetUploadToken::mutable_uploadpolicy() {
  set_has_uploadpolicy();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.uploadpolicy)
  return uploadpolicy_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_GetUploadToken::release_uploadpolicy() {
  clear_has_uploadpolicy();
  return uploadpolicy_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetUploadToken::set_allocated_uploadpolicy(::std::string* uploadpolicy) {
  if (uploadpolicy != NULL) {
    set_has_uploadpolicy();
  } else {
    clear_has_uploadpolicy();
  }
  uploadpolicy_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), uploadpolicy);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.uploadpolicy)
}

// optional uint32 areaCode = 3;
bool YouMeIM_Command_GetUploadToken::has_areacode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_GetUploadToken::set_has_areacode() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_GetUploadToken::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_GetUploadToken::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
 ::youmecommon::protobuf::uint32 YouMeIM_Command_GetUploadToken::areacode() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.areaCode)
  return areacode_;
}
 void YouMeIM_Command_GetUploadToken::set_areacode(::youmecommon::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.areaCode)
}

// optional uint32 fileSize = 4;
bool YouMeIM_Command_GetUploadToken::has_filesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_GetUploadToken::set_has_filesize() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_GetUploadToken::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_GetUploadToken::clear_filesize() {
  filesize_ = 0u;
  clear_has_filesize();
}
 ::youmecommon::protobuf::uint32 YouMeIM_Command_GetUploadToken::filesize() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.fileSize)
  return filesize_;
}
 void YouMeIM_Command_GetUploadToken::set_filesize(::youmecommon::protobuf::uint32 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.fileSize)
}

// optional string md5 = 5;
bool YouMeIM_Command_GetUploadToken::has_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_Command_GetUploadToken::set_has_md5() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_Command_GetUploadToken::clear_has_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_Command_GetUploadToken::clear_md5() {
  md5_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
 const ::std::string& YouMeIM_Command_GetUploadToken::md5() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.md5)
  return md5_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetUploadToken::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.md5)
}
 void YouMeIM_Command_GetUploadToken::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.md5)
}
 void YouMeIM_Command_GetUploadToken::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.md5)
}
 ::std::string* YouMeIM_Command_GetUploadToken::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.md5)
  return md5_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_GetUploadToken::release_md5() {
  clear_has_md5();
  return md5_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetUploadToken::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.md5)
}

// optional string suffix = 6;
bool YouMeIM_Command_GetUploadToken::has_suffix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeIM_Command_GetUploadToken::set_has_suffix() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeIM_Command_GetUploadToken::clear_has_suffix() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeIM_Command_GetUploadToken::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suffix();
}
 const ::std::string& YouMeIM_Command_GetUploadToken::suffix() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.suffix)
  return suffix_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetUploadToken::set_suffix(const ::std::string& value) {
  set_has_suffix();
  suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.suffix)
}
 void YouMeIM_Command_GetUploadToken::set_suffix(const char* value) {
  set_has_suffix();
  suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.suffix)
}
 void YouMeIM_Command_GetUploadToken::set_suffix(const char* value, size_t size) {
  set_has_suffix();
  suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.suffix)
}
 ::std::string* YouMeIM_Command_GetUploadToken::mutable_suffix() {
  set_has_suffix();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.suffix)
  return suffix_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_GetUploadToken::release_suffix() {
  clear_has_suffix();
  return suffix_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetUploadToken::set_allocated_suffix(::std::string* suffix) {
  if (suffix != NULL) {
    set_has_suffix();
  } else {
    clear_has_suffix();
  }
  suffix_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetUploadToken.suffix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetUploadTokenResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetUploadTokenResponse::kUploadtokenFieldNumber;
const int YouMeIM_Command_GetUploadTokenResponse::kHeadInfoFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetUploadTokenResponse::YouMeIM_Command_GetUploadTokenResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse)
}

void YouMeIM_Command_GetUploadTokenResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_GetUploadTokenResponse::YouMeIM_Command_GetUploadTokenResponse(const YouMeIM_Command_GetUploadTokenResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse)
}

void YouMeIM_Command_GetUploadTokenResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  uploadtoken_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetUploadTokenResponse::~YouMeIM_Command_GetUploadTokenResponse() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse)
  SharedDtor();
}

void YouMeIM_Command_GetUploadTokenResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  uploadtoken_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetUploadTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetUploadTokenResponse& YouMeIM_Command_GetUploadTokenResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetUploadTokenResponse* YouMeIM_Command_GetUploadTokenResponse::default_instance_ = NULL;

YouMeIM_Command_GetUploadTokenResponse* YouMeIM_Command_GetUploadTokenResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetUploadTokenResponse* n = new YouMeIM_Command_GetUploadTokenResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetUploadTokenResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_uploadtoken()) {
      uploadtoken_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  headinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetUploadTokenResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uploadtoken;
        break;
      }

      // required string uploadtoken = 2;
      case 2: {
        if (tag == 18) {
         parse_uploadtoken:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uploadtoken()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_headInfo;
        break;
      }

      // repeated .YouMeIMProtocol.NameValue headInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_headInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_headInfo:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_headInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_GetUploadTokenResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string uploadtoken = 2;
  if (has_uploadtoken()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uploadtoken(), output);
  }

  // repeated .YouMeIMProtocol.NameValue headInfo = 3;
  for (unsigned int i = 0, n = this->headinfo_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->headinfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse)
}

int YouMeIM_Command_GetUploadTokenResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_uploadtoken()) {
    // required string uploadtoken = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->uploadtoken());
  }

  return total_size;
}
int YouMeIM_Command_GetUploadTokenResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string uploadtoken = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->uploadtoken());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YouMeIMProtocol.NameValue headInfo = 3;
  total_size += 1 * this->headinfo_size();
  for (int i = 0; i < this->headinfo_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headinfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetUploadTokenResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetUploadTokenResponse*>(&from));
}

void YouMeIM_Command_GetUploadTokenResponse::MergeFrom(const YouMeIM_Command_GetUploadTokenResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  headinfo_.MergeFrom(from.headinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_uploadtoken()) {
      set_has_uploadtoken();
      uploadtoken_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.uploadtoken_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetUploadTokenResponse::CopyFrom(const YouMeIM_Command_GetUploadTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetUploadTokenResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->headinfo())) return false;
  return true;
}

void YouMeIM_Command_GetUploadTokenResponse::Swap(YouMeIM_Command_GetUploadTokenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetUploadTokenResponse::InternalSwap(YouMeIM_Command_GetUploadTokenResponse* other) {
  std::swap(msghead_, other->msghead_);
  uploadtoken_.Swap(&other->uploadtoken_);
  headinfo_.UnsafeArenaSwap(&other->headinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetUploadTokenResponse::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetUploadTokenResponse

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_GetUploadTokenResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetUploadTokenResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetUploadTokenResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetUploadTokenResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_GetUploadTokenResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetUploadTokenResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetUploadTokenResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetUploadTokenResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.msgHead)
}

// required string uploadtoken = 2;
bool YouMeIM_Command_GetUploadTokenResponse::has_uploadtoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_GetUploadTokenResponse::set_has_uploadtoken() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_GetUploadTokenResponse::clear_has_uploadtoken() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_GetUploadTokenResponse::clear_uploadtoken() {
  uploadtoken_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uploadtoken();
}
 const ::std::string& YouMeIM_Command_GetUploadTokenResponse::uploadtoken() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.uploadtoken)
  return uploadtoken_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetUploadTokenResponse::set_uploadtoken(const ::std::string& value) {
  set_has_uploadtoken();
  uploadtoken_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.uploadtoken)
}
 void YouMeIM_Command_GetUploadTokenResponse::set_uploadtoken(const char* value) {
  set_has_uploadtoken();
  uploadtoken_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.uploadtoken)
}
 void YouMeIM_Command_GetUploadTokenResponse::set_uploadtoken(const char* value, size_t size) {
  set_has_uploadtoken();
  uploadtoken_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.uploadtoken)
}
 ::std::string* YouMeIM_Command_GetUploadTokenResponse::mutable_uploadtoken() {
  set_has_uploadtoken();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.uploadtoken)
  return uploadtoken_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_GetUploadTokenResponse::release_uploadtoken() {
  clear_has_uploadtoken();
  return uploadtoken_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetUploadTokenResponse::set_allocated_uploadtoken(::std::string* uploadtoken) {
  if (uploadtoken != NULL) {
    set_has_uploadtoken();
  } else {
    clear_has_uploadtoken();
  }
  uploadtoken_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), uploadtoken);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.uploadtoken)
}

// repeated .YouMeIMProtocol.NameValue headInfo = 3;
int YouMeIM_Command_GetUploadTokenResponse::headinfo_size() const {
  return headinfo_.size();
}
void YouMeIM_Command_GetUploadTokenResponse::clear_headinfo() {
  headinfo_.Clear();
}
const ::YouMeIMProtocol::NameValue& YouMeIM_Command_GetUploadTokenResponse::headinfo(int index) const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.headInfo)
  return headinfo_.Get(index);
}
::YouMeIMProtocol::NameValue* YouMeIM_Command_GetUploadTokenResponse::mutable_headinfo(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.headInfo)
  return headinfo_.Mutable(index);
}
::YouMeIMProtocol::NameValue* YouMeIM_Command_GetUploadTokenResponse::add_headinfo() {
  // @@protoc_insertion_point(field_add:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.headInfo)
  return headinfo_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::NameValue >*
YouMeIM_Command_GetUploadTokenResponse::mutable_headinfo() {
  // @@protoc_insertion_point(field_mutable_list:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.headInfo)
  return &headinfo_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::NameValue >&
YouMeIM_Command_GetUploadTokenResponse::headinfo() const {
  // @@protoc_insertion_point(field_list:YouMeIMProtocol.YouMeIM_Command_GetUploadTokenResponse.headInfo)
  return headinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetDownloadToken::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetDownloadToken::kKeyFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetDownloadToken::YouMeIM_Command_GetDownloadToken()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken)
}

void YouMeIM_Command_GetDownloadToken::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_GetDownloadToken::YouMeIM_Command_GetDownloadToken(const YouMeIM_Command_GetDownloadToken& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken)
}

void YouMeIM_Command_GetDownloadToken::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  key_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetDownloadToken::~YouMeIM_Command_GetDownloadToken() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken)
  SharedDtor();
}

void YouMeIM_Command_GetDownloadToken::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetDownloadToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetDownloadToken& YouMeIM_Command_GetDownloadToken::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetDownloadToken* YouMeIM_Command_GetDownloadToken::default_instance_ = NULL;

YouMeIM_Command_GetDownloadToken* YouMeIM_Command_GetDownloadToken::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetDownloadToken* n = new YouMeIM_Command_GetDownloadToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetDownloadToken::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetDownloadToken::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken)
  return false;
#undef DO_
}

void YouMeIM_Command_GetDownloadToken::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string key = 2;
  if (has_key()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken)
}

int YouMeIM_Command_GetDownloadToken::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_key()) {
    // required string key = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  return total_size;
}
int YouMeIM_Command_GetDownloadToken::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string key = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetDownloadToken::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetDownloadToken*>(&from));
}

void YouMeIM_Command_GetDownloadToken::MergeFrom(const YouMeIM_Command_GetDownloadToken& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetDownloadToken::CopyFrom(const YouMeIM_Command_GetDownloadToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetDownloadToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_GetDownloadToken::Swap(YouMeIM_Command_GetDownloadToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetDownloadToken::InternalSwap(YouMeIM_Command_GetDownloadToken* other) {
  std::swap(msghead_, other->msghead_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetDownloadToken::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_GetDownloadToken";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetDownloadToken

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_GetDownloadToken::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetDownloadToken::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetDownloadToken::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetDownloadToken::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_GetDownloadToken::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetDownloadToken::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_GetDownloadToken::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetDownloadToken::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken.msgHead)
}

// required string key = 2;
bool YouMeIM_Command_GetDownloadToken::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_GetDownloadToken::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_GetDownloadToken::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_GetDownloadToken::clear_key() {
  key_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& YouMeIM_Command_GetDownloadToken::key() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken.key)
  return key_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetDownloadToken::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken.key)
}
 void YouMeIM_Command_GetDownloadToken::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken.key)
}
 void YouMeIM_Command_GetDownloadToken::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken.key)
}
 ::std::string* YouMeIM_Command_GetDownloadToken::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken.key)
  return key_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_GetDownloadToken::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetDownloadToken::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetDownloadToken.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetDownloadTokenResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_GetDownloadTokenResponse::kDownloadurlFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetDownloadTokenResponse::YouMeIM_Command_GetDownloadTokenResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse)
}

void YouMeIM_Command_GetDownloadTokenResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_GetDownloadTokenResponse::YouMeIM_Command_GetDownloadTokenResponse(const YouMeIM_Command_GetDownloadTokenResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse)
}

void YouMeIM_Command_GetDownloadTokenResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  downloadurl_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetDownloadTokenResponse::~YouMeIM_Command_GetDownloadTokenResponse() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse)
  SharedDtor();
}

void YouMeIM_Command_GetDownloadTokenResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadurl_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetDownloadTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetDownloadTokenResponse& YouMeIM_Command_GetDownloadTokenResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetDownloadTokenResponse* YouMeIM_Command_GetDownloadTokenResponse::default_instance_ = NULL;

YouMeIM_Command_GetDownloadTokenResponse* YouMeIM_Command_GetDownloadTokenResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetDownloadTokenResponse* n = new YouMeIM_Command_GetDownloadTokenResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetDownloadTokenResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_downloadurl()) {
      downloadurl_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetDownloadTokenResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_downloadurl;
        break;
      }

      // required string downloadurl = 2;
      case 2: {
        if (tag == 18) {
         parse_downloadurl:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_GetDownloadTokenResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string downloadurl = 2;
  if (has_downloadurl()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->downloadurl(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse)
}

int YouMeIM_Command_GetDownloadTokenResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_downloadurl()) {
    // required string downloadurl = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->downloadurl());
  }

  return total_size;
}
int YouMeIM_Command_GetDownloadTokenResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string downloadurl = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->downloadurl());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetDownloadTokenResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetDownloadTokenResponse*>(&from));
}

void YouMeIM_Command_GetDownloadTokenResponse::MergeFrom(const YouMeIM_Command_GetDownloadTokenResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_downloadurl()) {
      set_has_downloadurl();
      downloadurl_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadurl_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetDownloadTokenResponse::CopyFrom(const YouMeIM_Command_GetDownloadTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetDownloadTokenResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_GetDownloadTokenResponse::Swap(YouMeIM_Command_GetDownloadTokenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetDownloadTokenResponse::InternalSwap(YouMeIM_Command_GetDownloadTokenResponse* other) {
  std::swap(msghead_, other->msghead_);
  downloadurl_.Swap(&other->downloadurl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetDownloadTokenResponse::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetDownloadTokenResponse

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_GetDownloadTokenResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetDownloadTokenResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetDownloadTokenResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetDownloadTokenResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_GetDownloadTokenResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetDownloadTokenResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetDownloadTokenResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetDownloadTokenResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse.msgHead)
}

// required string downloadurl = 2;
bool YouMeIM_Command_GetDownloadTokenResponse::has_downloadurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_GetDownloadTokenResponse::set_has_downloadurl() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_GetDownloadTokenResponse::clear_has_downloadurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_GetDownloadTokenResponse::clear_downloadurl() {
  downloadurl_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_downloadurl();
}
 const ::std::string& YouMeIM_Command_GetDownloadTokenResponse::downloadurl() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse.downloadurl)
  return downloadurl_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetDownloadTokenResponse::set_downloadurl(const ::std::string& value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse.downloadurl)
}
 void YouMeIM_Command_GetDownloadTokenResponse::set_downloadurl(const char* value) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse.downloadurl)
}
 void YouMeIM_Command_GetDownloadTokenResponse::set_downloadurl(const char* value, size_t size) {
  set_has_downloadurl();
  downloadurl_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse.downloadurl)
}
 ::std::string* YouMeIM_Command_GetDownloadTokenResponse::mutable_downloadurl() {
  set_has_downloadurl();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse.downloadurl)
  return downloadurl_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_GetDownloadTokenResponse::release_downloadurl() {
  clear_has_downloadurl();
  return downloadurl_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_GetDownloadTokenResponse::set_allocated_downloadurl(::std::string* downloadurl) {
  if (downloadurl != NULL) {
    set_has_downloadurl();
  } else {
    clear_has_downloadurl();
  }
  downloadurl_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), downloadurl);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetDownloadTokenResponse.downloadurl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_GetMessageNotify::kMsgHeadFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_GetMessageNotify::YouMeIM_Command_GetMessageNotify()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify)
}

void YouMeIM_Command_GetMessageNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_GetMessageNotify::YouMeIM_Command_GetMessageNotify(const YouMeIM_Command_GetMessageNotify& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify)
}

void YouMeIM_Command_GetMessageNotify::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_GetMessageNotify::~YouMeIM_Command_GetMessageNotify() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify)
  SharedDtor();
}

void YouMeIM_Command_GetMessageNotify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_GetMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_GetMessageNotify& YouMeIM_Command_GetMessageNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fmessage_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_GetMessageNotify* YouMeIM_Command_GetMessageNotify::default_instance_ = NULL;

YouMeIM_Command_GetMessageNotify* YouMeIM_Command_GetMessageNotify::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_GetMessageNotify* n = new YouMeIM_Command_GetMessageNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_GetMessageNotify::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_GetMessageNotify::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify)
  return false;
#undef DO_
}

void YouMeIM_Command_GetMessageNotify::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify)
}

int YouMeIM_Command_GetMessageNotify::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_GetMessageNotify::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_GetMessageNotify*>(&from));
}

void YouMeIM_Command_GetMessageNotify::MergeFrom(const YouMeIM_Command_GetMessageNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_GetMessageNotify::CopyFrom(const YouMeIM_Command_GetMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_GetMessageNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_GetMessageNotify::Swap(YouMeIM_Command_GetMessageNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_GetMessageNotify::InternalSwap(YouMeIM_Command_GetMessageNotify* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_GetMessageNotify::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_GetMessageNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_GetMessageNotify

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_GetMessageNotify::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_GetMessageNotify::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_GetMessageNotify::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_GetMessageNotify::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_GetMessageNotify::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetMessageNotify::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_GetMessageNotify::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_GetMessageNotify::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_GetMessageNotify.msgHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeIMProtocol

// @@protoc_insertion_point(global_scope)
