// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YouMeIMProtocol {

void protobuf_ShutdownFile_im_5fcommon_2eproto() {
  delete NameValue::default_instance_;
  delete ContactInfo::default_instance_;
  delete PacketHead::default_instance_;
  delete ReqHead::default_instance_;
  delete ServerPacketHead::default_instance_;
  delete ServerReqHead::default_instance_;
  delete YouMeIM_Command_Login::default_instance_;
  delete YouMeIM_Command_LoginResponse::default_instance_;
  delete YouMeIM_Command_Logout::default_instance_;
  delete YouMeIM_Command_LogoutResponse::default_instance_;
  delete YouMeIM_Command_DisConnectNotify::default_instance_;
  delete YouMeIM_Command_Heart::default_instance_;
  delete YouMeIM_Command_HeartResponse::default_instance_;
  delete YouMeIM_Command_PackageAck::default_instance_;
  delete YouMeIM_Command_ClientToServerAck::default_instance_;
  delete YouMeIM_Command_ContactLogin::default_instance_;
  delete YouMeIM_Command_ContactLogout::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_5fcommon_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NameValue::default_instance_ = new NameValue();
  ContactInfo::default_instance_ = new ContactInfo();
  PacketHead::default_instance_ = new PacketHead();
  ReqHead::default_instance_ = new ReqHead();
  ServerPacketHead::default_instance_ = new ServerPacketHead();
  ServerReqHead::default_instance_ = new ServerReqHead();
  YouMeIM_Command_Login::default_instance_ = new YouMeIM_Command_Login();
  YouMeIM_Command_LoginResponse::default_instance_ = new YouMeIM_Command_LoginResponse();
  YouMeIM_Command_Logout::default_instance_ = new YouMeIM_Command_Logout();
  YouMeIM_Command_LogoutResponse::default_instance_ = new YouMeIM_Command_LogoutResponse();
  YouMeIM_Command_DisConnectNotify::default_instance_ = new YouMeIM_Command_DisConnectNotify();
  YouMeIM_Command_Heart::default_instance_ = new YouMeIM_Command_Heart();
  YouMeIM_Command_HeartResponse::default_instance_ = new YouMeIM_Command_HeartResponse();
  YouMeIM_Command_PackageAck::default_instance_ = new YouMeIM_Command_PackageAck();
  YouMeIM_Command_ClientToServerAck::default_instance_ = new YouMeIM_Command_ClientToServerAck();
  YouMeIM_Command_ContactLogin::default_instance_ = new YouMeIM_Command_ContactLogin();
  YouMeIM_Command_ContactLogout::default_instance_ = new YouMeIM_Command_ContactLogout();
  NameValue::default_instance_->InitAsDefaultInstance();
  ContactInfo::default_instance_->InitAsDefaultInstance();
  PacketHead::default_instance_->InitAsDefaultInstance();
  ReqHead::default_instance_->InitAsDefaultInstance();
  ServerPacketHead::default_instance_->InitAsDefaultInstance();
  ServerReqHead::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_Login::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_LoginResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_Logout::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_LogoutResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_DisConnectNotify::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_Heart::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_HeartResponse::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_PackageAck::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ClientToServerAck::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ContactLogin::default_instance_->InitAsDefaultInstance();
  YouMeIM_Command_ContactLogout::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_5fcommon_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_5fcommon_2eproto_once_);
void protobuf_AddDesc_im_5fcommon_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_5fcommon_2eproto_once_,
                 &protobuf_AddDesc_im_5fcommon_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_5fcommon_2eproto {
  StaticDescriptorInitializer_im_5fcommon_2eproto() {
    protobuf_AddDesc_im_5fcommon_2eproto();
  }
} static_descriptor_initializer_im_5fcommon_2eproto_;
#endif
bool NAME_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool Device_Platform_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool NetworkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool Command_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2029:
    case 2030:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3101:
    case 3102:
    case 3103:
    case 3104:
    case 3105:
    case 3106:
    case 3107:
    case 3205:
    case 3206:
    case 3207:
    case 3208:
    case 3209:
    case 3210:
    case 3211:
    case 3212:
    case 10001:
    case 10002:
    case 10003:
    case 10100:
    case 10101:
      return true;
    default:
      return false;
  }
}

bool ConnectEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int NameValue::kNameFieldNumber;
const int NameValue::kValueFieldNumber;
const int NameValue::kTypeFieldNumber;
#endif  // !_MSC_VER

NameValue::NameValue()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.NameValue)
}

void NameValue::InitAsDefaultInstance() {
}

NameValue::NameValue(const NameValue& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.NameValue)
}

void NameValue::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameValue::~NameValue() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.NameValue)
  SharedDtor();
}

void NameValue::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NameValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NameValue& NameValue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

NameValue* NameValue::default_instance_ = NULL;

NameValue* NameValue::New(::youmecommon::protobuf::Arena* arena) const {
  NameValue* n = new NameValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameValue::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NameValue::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.NameValue)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .YouMeIMProtocol.NAME_TYPE type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::NAME_TYPE_IsValid(value)) {
            set_type(static_cast< ::YouMeIMProtocol::NAME_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.NameValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.NameValue)
  return false;
#undef DO_
}

void NameValue::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.NameValue)
  // required string name = 1;
  if (has_name()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // required .YouMeIMProtocol.NAME_TYPE type = 3;
  if (has_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.NameValue)
}

int NameValue::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_type()) {
    // required .YouMeIMProtocol.NAME_TYPE type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int NameValue::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required .YouMeIMProtocol.NAME_TYPE type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameValue::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const NameValue*>(&from));
}

void NameValue::MergeFrom(const NameValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NameValue::CopyFrom(const NameValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NameValue::Swap(NameValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameValue::InternalSwap(NameValue* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NameValue::GetTypeName() const {
  return "YouMeIMProtocol.NameValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameValue

// required string name = 1;
bool NameValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NameValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NameValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NameValue::clear_name() {
  name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& NameValue::name() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.NameValue.name)
  return name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.NameValue.name)
}
 void NameValue::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.NameValue.name)
}
 void NameValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.NameValue.name)
}
 ::std::string* NameValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.NameValue.name)
  return name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameValue::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.NameValue.name)
}

// required string value = 2;
bool NameValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NameValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void NameValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void NameValue::clear_value() {
  value_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& NameValue::value() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.NameValue.value)
  return value_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.NameValue.value)
}
 void NameValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.NameValue.value)
}
 void NameValue::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.NameValue.value)
}
 ::std::string* NameValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.NameValue.value)
  return value_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameValue::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.NameValue.value)
}

// required .YouMeIMProtocol.NAME_TYPE type = 3;
bool NameValue::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NameValue::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void NameValue::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void NameValue::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::YouMeIMProtocol::NAME_TYPE NameValue::type() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.NameValue.type)
  return static_cast< ::YouMeIMProtocol::NAME_TYPE >(type_);
}
 void NameValue::set_type(::YouMeIMProtocol::NAME_TYPE value) {
  assert(::YouMeIMProtocol::NAME_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.NameValue.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ContactInfo::kYOUMEIDFieldNumber;
const int ContactInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

ContactInfo::ContactInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.ContactInfo)
}

void ContactInfo::InitAsDefaultInstance() {
}

ContactInfo::ContactInfo(const ContactInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.ContactInfo)
}

void ContactInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactInfo::~ContactInfo() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.ContactInfo)
  SharedDtor();
}

void ContactInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ContactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ContactInfo& ContactInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

ContactInfo* ContactInfo::default_instance_ = NULL;

ContactInfo* ContactInfo::New(::youmecommon::protobuf::Arena* arena) const {
  ContactInfo* n = new ContactInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactInfo::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ContactInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.ContactInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string YOUMEID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.ContactInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.ContactInfo)
  return false;
#undef DO_
}

void ContactInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.ContactInfo)
  // required string YOUMEID = 1;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->youmeid(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.ContactInfo)
}

int ContactInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_youmeid()) {
    // required string YOUMEID = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  if (has_status()) {
    // required int32 status = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
int ContactInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string YOUMEID = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

    // required int32 status = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ContactInfo*>(&from));
}

void ContactInfo::MergeFrom(const ContactInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ContactInfo::CopyFrom(const ContactInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ContactInfo::Swap(ContactInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactInfo::InternalSwap(ContactInfo* other) {
  youmeid_.Swap(&other->youmeid_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ContactInfo::GetTypeName() const {
  return "YouMeIMProtocol.ContactInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactInfo

// required string YOUMEID = 1;
bool ContactInfo::has_youmeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContactInfo::set_has_youmeid() {
  _has_bits_[0] |= 0x00000001u;
}
void ContactInfo::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContactInfo::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& ContactInfo::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ContactInfo.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContactInfo::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.ContactInfo.YOUMEID)
}
 void ContactInfo::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.ContactInfo.YOUMEID)
}
 void ContactInfo::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.ContactInfo.YOUMEID)
}
 ::std::string* ContactInfo::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.ContactInfo.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContactInfo::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContactInfo::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.ContactInfo.YOUMEID)
}

// required int32 status = 2;
bool ContactInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContactInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ContactInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContactInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 ContactInfo::status() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ContactInfo.status)
  return status_;
}
 void ContactInfo::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.ContactInfo.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PacketHead::kMsgtypeFieldNumber;
const int PacketHead::kMsgversionFieldNumber;
const int PacketHead::kPlatformFieldNumber;
const int PacketHead::kBrandFieldNumber;
const int PacketHead::kSysVersionFieldNumber;
const int PacketHead::kYmSdkVersionFieldNumber;
const int PacketHead::kCpuArchFieldNumber;
const int PacketHead::kPackageNameFieldNumber;
const int PacketHead::kIdentifyFieldNumber;
const int PacketHead::kAppKeyFieldNumber;
const int PacketHead::kSDKNameFieldNumber;
const int PacketHead::kModelFieldNumber;
const int PacketHead::kNetworkTypeFieldNumber;
const int PacketHead::kCPUChipFieldNumber;
const int PacketHead::kMsgSerialNumFieldNumber;
const int PacketHead::kSessionIDFieldNumber;
const int PacketHead::kYOUMEIDFieldNumber;
const int PacketHead::kLocaltimeFieldNumber;
const int PacketHead::kServerSerialNumFieldNumber;
const int PacketHead::kParamsFieldNumber;
#endif  // !_MSC_VER

PacketHead::PacketHead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.PacketHead)
}

void PacketHead::InitAsDefaultInstance() {
}

PacketHead::PacketHead(const PacketHead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.PacketHead)
}

void PacketHead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  msgversion_ = 0;
  platform_ = 0;
  brand_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sysversion_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ymsdkversion_ = 0;
  cpuarch_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  packagename_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  identify_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkname_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  networktype_ = 0;
  cpuchip_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgserialnum_ = GOOGLE_LONGLONG(0);
  sessionid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  localtime_ = GOOGLE_LONGLONG(0);
  serverserialnum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketHead::~PacketHead() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.PacketHead)
  SharedDtor();
}

void PacketHead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sysversion_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cpuarch_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  packagename_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  identify_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkname_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cpuchip_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PacketHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PacketHead& PacketHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

PacketHead* PacketHead::default_instance_ = NULL;

PacketHead* PacketHead::New(::youmecommon::protobuf::Arena* arena) const {
  PacketHead* n = new PacketHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketHead::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PacketHead*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(msgtype_, msgversion_);
    ZR_(platform_, ymsdkversion_);
    if (has_brand()) {
      brand_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sysversion()) {
      sysversion_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cpuarch()) {
      cpuarch_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_packagename()) {
      packagename_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_identify()) {
      identify_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_appkey()) {
      appkey_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sdkname()) {
      sdkname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model()) {
      model_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    networktype_ = 0;
    if (has_cpuchip()) {
      cpuchip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    msgserialnum_ = GOOGLE_LONGLONG(0);
    if (has_sessionid()) {
      sessionid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ZR_(localtime_, serverserialnum_);
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PacketHead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.PacketHead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.Command_TYPE msgtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::Command_TYPE_IsValid(value)) {
            set_msgtype(static_cast< ::YouMeIMProtocol::Command_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgversion;
        break;
      }

      // required int32 msgversion = 2;
      case 2: {
        if (tag == 16) {
         parse_msgversion:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgversion_)));
          set_has_msgversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // required .YouMeIMProtocol.Device_Platform platform = 3;
      case 3: {
        if (tag == 24) {
         parse_platform:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::Device_Platform_IsValid(value)) {
            set_platform(static_cast< ::YouMeIMProtocol::Device_Platform >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Brand;
        break;
      }

      // required string Brand = 4;
      case 4: {
        if (tag == 34) {
         parse_Brand:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SysVersion;
        break;
      }

      // required string SysVersion = 5;
      case 5: {
        if (tag == 42) {
         parse_SysVersion:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sysversion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_YmSdkVersion;
        break;
      }

      // required int32 YmSdkVersion = 6;
      case 6: {
        if (tag == 48) {
         parse_YmSdkVersion:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymsdkversion_)));
          set_has_ymsdkversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CpuArch;
        break;
      }

      // required string CpuArch = 7;
      case 7: {
        if (tag == 58) {
         parse_CpuArch:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuarch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_PackageName;
        break;
      }

      // required string PackageName = 8;
      case 8: {
        if (tag == 66) {
         parse_PackageName:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packagename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Identify;
        break;
      }

      // required string Identify = 9;
      case 9: {
        if (tag == 74) {
         parse_Identify:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_AppKey;
        break;
      }

      // required string AppKey = 10;
      case 10: {
        if (tag == 82) {
         parse_AppKey:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_SDKName;
        break;
      }

      // required string SDKName = 11;
      case 11: {
        if (tag == 90) {
         parse_SDKName:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdkname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Model;
        break;
      }

      // required string Model = 12;
      case 12: {
        if (tag == 98) {
         parse_Model:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_NetworkType;
        break;
      }

      // required .YouMeIMProtocol.NetworkType NetworkType = 13;
      case 13: {
        if (tag == 104) {
         parse_NetworkType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::NetworkType_IsValid(value)) {
            set_networktype(static_cast< ::YouMeIMProtocol::NetworkType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_CPUChip;
        break;
      }

      // required string CPUChip = 14;
      case 14: {
        if (tag == 114) {
         parse_CPUChip:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuchip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_msgSerialNum;
        break;
      }

      // required int64 msgSerialNum = 15;
      case 15: {
        if (tag == 120) {
         parse_msgSerialNum:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgserialnum_)));
          set_has_msgserialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_SessionID;
        break;
      }

      // required string SessionID = 16;
      case 16: {
        if (tag == 130) {
         parse_SessionID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 17;
      case 17: {
        if (tag == 138) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_localtime;
        break;
      }

      // optional int64 localtime = 18;
      case 18: {
        if (tag == 144) {
         parse_localtime:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &localtime_)));
          set_has_localtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_serverSerialNum;
        break;
      }

      // optional int64 serverSerialNum = 19;
      case 19: {
        if (tag == 152) {
         parse_serverSerialNum:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverserialnum_)));
          set_has_serverserialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_params;
        break;
      }

      // repeated .YouMeIMProtocol.NameValue params = 20;
      case 20: {
        if (tag == 162) {
         parse_params:
          DO_(input->IncrementRecursionDepth());
         parse_loop_params:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_params;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.PacketHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.PacketHead)
  return false;
#undef DO_
}

void PacketHead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.PacketHead)
  // required .YouMeIMProtocol.Command_TYPE msgtype = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required int32 msgversion = 2;
  if (has_msgversion()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgversion(), output);
  }

  // required .YouMeIMProtocol.Device_Platform platform = 3;
  if (has_platform()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platform(), output);
  }

  // required string Brand = 4;
  if (has_brand()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->brand(), output);
  }

  // required string SysVersion = 5;
  if (has_sysversion()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sysversion(), output);
  }

  // required int32 YmSdkVersion = 6;
  if (has_ymsdkversion()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->ymsdkversion(), output);
  }

  // required string CpuArch = 7;
  if (has_cpuarch()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cpuarch(), output);
  }

  // required string PackageName = 8;
  if (has_packagename()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->packagename(), output);
  }

  // required string Identify = 9;
  if (has_identify()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->identify(), output);
  }

  // required string AppKey = 10;
  if (has_appkey()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->appkey(), output);
  }

  // required string SDKName = 11;
  if (has_sdkname()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sdkname(), output);
  }

  // required string Model = 12;
  if (has_model()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->model(), output);
  }

  // required .YouMeIMProtocol.NetworkType NetworkType = 13;
  if (has_networktype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->networktype(), output);
  }

  // required string CPUChip = 14;
  if (has_cpuchip()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->cpuchip(), output);
  }

  // required int64 msgSerialNum = 15;
  if (has_msgserialnum()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(15, this->msgserialnum(), output);
  }

  // required string SessionID = 16;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->sessionid(), output);
  }

  // required string YOUMEID = 17;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->youmeid(), output);
  }

  // optional int64 localtime = 18;
  if (has_localtime()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(18, this->localtime(), output);
  }

  // optional int64 serverSerialNum = 19;
  if (has_serverserialnum()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(19, this->serverserialnum(), output);
  }

  // repeated .YouMeIMProtocol.NameValue params = 20;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->params(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.PacketHead)
}

int PacketHead::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required .YouMeIMProtocol.Command_TYPE msgtype = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  if (has_msgversion()) {
    // required int32 msgversion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgversion());
  }

  if (has_platform()) {
    // required .YouMeIMProtocol.Device_Platform platform = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->platform());
  }

  if (has_brand()) {
    // required string Brand = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->brand());
  }

  if (has_sysversion()) {
    // required string SysVersion = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sysversion());
  }

  if (has_ymsdkversion()) {
    // required int32 YmSdkVersion = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ymsdkversion());
  }

  if (has_cpuarch()) {
    // required string CpuArch = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->cpuarch());
  }

  if (has_packagename()) {
    // required string PackageName = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->packagename());
  }

  if (has_identify()) {
    // required string Identify = 9;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->identify());
  }

  if (has_appkey()) {
    // required string AppKey = 10;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  if (has_sdkname()) {
    // required string SDKName = 11;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sdkname());
  }

  if (has_model()) {
    // required string Model = 12;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  if (has_networktype()) {
    // required .YouMeIMProtocol.NetworkType NetworkType = 13;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->networktype());
  }

  if (has_cpuchip()) {
    // required string CPUChip = 14;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->cpuchip());
  }

  if (has_msgserialnum()) {
    // required int64 msgSerialNum = 15;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->msgserialnum());
  }

  if (has_sessionid()) {
    // required string SessionID = 16;
    total_size += 2 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_youmeid()) {
    // required string YOUMEID = 17;
    total_size += 2 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int PacketHead::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0001ffff) ^ 0x0001ffff) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.Command_TYPE msgtype = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

    // required int32 msgversion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgversion());

    // required .YouMeIMProtocol.Device_Platform platform = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->platform());

    // required string Brand = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->brand());

    // required string SysVersion = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sysversion());

    // required int32 YmSdkVersion = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ymsdkversion());

    // required string CpuArch = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->cpuarch());

    // required string PackageName = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->packagename());

    // required string Identify = 9;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->identify());

    // required string AppKey = 10;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());

    // required string SDKName = 11;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sdkname());

    // required string Model = 12;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->model());

    // required .YouMeIMProtocol.NetworkType NetworkType = 13;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->networktype());

    // required string CPUChip = 14;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->cpuchip());

    // required int64 msgSerialNum = 15;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->msgserialnum());

    // required string SessionID = 16;
    total_size += 2 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string YOUMEID = 17;
    total_size += 2 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[17 / 32] & 393216u) {
    // optional int64 localtime = 18;
    if (has_localtime()) {
      total_size += 2 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
          this->localtime());
    }

    // optional int64 serverSerialNum = 19;
    if (has_serverserialnum()) {
      total_size += 2 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
          this->serverserialnum());
    }

  }
  // repeated .YouMeIMProtocol.NameValue params = 20;
  total_size += 2 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const PacketHead*>(&from));
}

void PacketHead::MergeFrom(const PacketHead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgversion()) {
      set_msgversion(from.msgversion());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_brand()) {
      set_has_brand();
      brand_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
    }
    if (from.has_sysversion()) {
      set_has_sysversion();
      sysversion_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sysversion_);
    }
    if (from.has_ymsdkversion()) {
      set_ymsdkversion(from.ymsdkversion());
    }
    if (from.has_cpuarch()) {
      set_has_cpuarch();
      cpuarch_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpuarch_);
    }
    if (from.has_packagename()) {
      set_has_packagename();
      packagename_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.packagename_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_identify()) {
      set_has_identify();
      identify_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.identify_);
    }
    if (from.has_appkey()) {
      set_has_appkey();
      appkey_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
    }
    if (from.has_sdkname()) {
      set_has_sdkname();
      sdkname_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdkname_);
    }
    if (from.has_model()) {
      set_has_model();
      model_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (from.has_networktype()) {
      set_networktype(from.networktype());
    }
    if (from.has_cpuchip()) {
      set_has_cpuchip();
      cpuchip_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpuchip_);
    }
    if (from.has_msgserialnum()) {
      set_msgserialnum(from.msgserialnum());
    }
    if (from.has_sessionid()) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
    if (from.has_localtime()) {
      set_localtime(from.localtime());
    }
    if (from.has_serverserialnum()) {
      set_serverserialnum(from.serverserialnum());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PacketHead::CopyFrom(const PacketHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->params())) return false;
  return true;
}

void PacketHead::Swap(PacketHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketHead::InternalSwap(PacketHead* other) {
  std::swap(msgtype_, other->msgtype_);
  std::swap(msgversion_, other->msgversion_);
  std::swap(platform_, other->platform_);
  brand_.Swap(&other->brand_);
  sysversion_.Swap(&other->sysversion_);
  std::swap(ymsdkversion_, other->ymsdkversion_);
  cpuarch_.Swap(&other->cpuarch_);
  packagename_.Swap(&other->packagename_);
  identify_.Swap(&other->identify_);
  appkey_.Swap(&other->appkey_);
  sdkname_.Swap(&other->sdkname_);
  model_.Swap(&other->model_);
  std::swap(networktype_, other->networktype_);
  cpuchip_.Swap(&other->cpuchip_);
  std::swap(msgserialnum_, other->msgserialnum_);
  sessionid_.Swap(&other->sessionid_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(localtime_, other->localtime_);
  std::swap(serverserialnum_, other->serverserialnum_);
  params_.UnsafeArenaSwap(&other->params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PacketHead::GetTypeName() const {
  return "YouMeIMProtocol.PacketHead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketHead

// required .YouMeIMProtocol.Command_TYPE msgtype = 1;
bool PacketHead::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketHead::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketHead::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketHead::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::YouMeIMProtocol::Command_TYPE PacketHead::msgtype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.msgtype)
  return static_cast< ::YouMeIMProtocol::Command_TYPE >(msgtype_);
}
 void PacketHead::set_msgtype(::YouMeIMProtocol::Command_TYPE value) {
  assert(::YouMeIMProtocol::Command_TYPE_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.msgtype)
}

// required int32 msgversion = 2;
bool PacketHead::has_msgversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketHead::set_has_msgversion() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketHead::clear_has_msgversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketHead::clear_msgversion() {
  msgversion_ = 0;
  clear_has_msgversion();
}
 ::youmecommon::protobuf::int32 PacketHead::msgversion() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.msgversion)
  return msgversion_;
}
 void PacketHead::set_msgversion(::youmecommon::protobuf::int32 value) {
  set_has_msgversion();
  msgversion_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.msgversion)
}

// required .YouMeIMProtocol.Device_Platform platform = 3;
bool PacketHead::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketHead::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketHead::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketHead::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
 ::YouMeIMProtocol::Device_Platform PacketHead::platform() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.platform)
  return static_cast< ::YouMeIMProtocol::Device_Platform >(platform_);
}
 void PacketHead::set_platform(::YouMeIMProtocol::Device_Platform value) {
  assert(::YouMeIMProtocol::Device_Platform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.platform)
}

// required string Brand = 4;
bool PacketHead::has_brand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketHead::set_has_brand() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketHead::clear_has_brand() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketHead::clear_brand() {
  brand_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand();
}
 const ::std::string& PacketHead::brand() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.Brand)
  return brand_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_brand(const ::std::string& value) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.Brand)
}
 void PacketHead::set_brand(const char* value) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.Brand)
}
 void PacketHead::set_brand(const char* value, size_t size) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.Brand)
}
 ::std::string* PacketHead::mutable_brand() {
  set_has_brand();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.Brand)
  return brand_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_brand() {
  clear_has_brand();
  return brand_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    set_has_brand();
  } else {
    clear_has_brand();
  }
  brand_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.Brand)
}

// required string SysVersion = 5;
bool PacketHead::has_sysversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PacketHead::set_has_sysversion() {
  _has_bits_[0] |= 0x00000010u;
}
void PacketHead::clear_has_sysversion() {
  _has_bits_[0] &= ~0x00000010u;
}
void PacketHead::clear_sysversion() {
  sysversion_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sysversion();
}
 const ::std::string& PacketHead::sysversion() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.SysVersion)
  return sysversion_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_sysversion(const ::std::string& value) {
  set_has_sysversion();
  sysversion_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.SysVersion)
}
 void PacketHead::set_sysversion(const char* value) {
  set_has_sysversion();
  sysversion_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.SysVersion)
}
 void PacketHead::set_sysversion(const char* value, size_t size) {
  set_has_sysversion();
  sysversion_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.SysVersion)
}
 ::std::string* PacketHead::mutable_sysversion() {
  set_has_sysversion();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.SysVersion)
  return sysversion_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_sysversion() {
  clear_has_sysversion();
  return sysversion_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_sysversion(::std::string* sysversion) {
  if (sysversion != NULL) {
    set_has_sysversion();
  } else {
    clear_has_sysversion();
  }
  sysversion_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sysversion);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.SysVersion)
}

// required int32 YmSdkVersion = 6;
bool PacketHead::has_ymsdkversion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PacketHead::set_has_ymsdkversion() {
  _has_bits_[0] |= 0x00000020u;
}
void PacketHead::clear_has_ymsdkversion() {
  _has_bits_[0] &= ~0x00000020u;
}
void PacketHead::clear_ymsdkversion() {
  ymsdkversion_ = 0;
  clear_has_ymsdkversion();
}
 ::youmecommon::protobuf::int32 PacketHead::ymsdkversion() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.YmSdkVersion)
  return ymsdkversion_;
}
 void PacketHead::set_ymsdkversion(::youmecommon::protobuf::int32 value) {
  set_has_ymsdkversion();
  ymsdkversion_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.YmSdkVersion)
}

// required string CpuArch = 7;
bool PacketHead::has_cpuarch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PacketHead::set_has_cpuarch() {
  _has_bits_[0] |= 0x00000040u;
}
void PacketHead::clear_has_cpuarch() {
  _has_bits_[0] &= ~0x00000040u;
}
void PacketHead::clear_cpuarch() {
  cpuarch_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpuarch();
}
 const ::std::string& PacketHead::cpuarch() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.CpuArch)
  return cpuarch_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_cpuarch(const ::std::string& value) {
  set_has_cpuarch();
  cpuarch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.CpuArch)
}
 void PacketHead::set_cpuarch(const char* value) {
  set_has_cpuarch();
  cpuarch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.CpuArch)
}
 void PacketHead::set_cpuarch(const char* value, size_t size) {
  set_has_cpuarch();
  cpuarch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.CpuArch)
}
 ::std::string* PacketHead::mutable_cpuarch() {
  set_has_cpuarch();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.CpuArch)
  return cpuarch_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_cpuarch() {
  clear_has_cpuarch();
  return cpuarch_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_cpuarch(::std::string* cpuarch) {
  if (cpuarch != NULL) {
    set_has_cpuarch();
  } else {
    clear_has_cpuarch();
  }
  cpuarch_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), cpuarch);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.CpuArch)
}

// required string PackageName = 8;
bool PacketHead::has_packagename() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PacketHead::set_has_packagename() {
  _has_bits_[0] |= 0x00000080u;
}
void PacketHead::clear_has_packagename() {
  _has_bits_[0] &= ~0x00000080u;
}
void PacketHead::clear_packagename() {
  packagename_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packagename();
}
 const ::std::string& PacketHead::packagename() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.PackageName)
  return packagename_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_packagename(const ::std::string& value) {
  set_has_packagename();
  packagename_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.PackageName)
}
 void PacketHead::set_packagename(const char* value) {
  set_has_packagename();
  packagename_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.PackageName)
}
 void PacketHead::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  packagename_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.PackageName)
}
 ::std::string* PacketHead::mutable_packagename() {
  set_has_packagename();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.PackageName)
  return packagename_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_packagename() {
  clear_has_packagename();
  return packagename_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_packagename(::std::string* packagename) {
  if (packagename != NULL) {
    set_has_packagename();
  } else {
    clear_has_packagename();
  }
  packagename_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), packagename);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.PackageName)
}

// required string Identify = 9;
bool PacketHead::has_identify() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PacketHead::set_has_identify() {
  _has_bits_[0] |= 0x00000100u;
}
void PacketHead::clear_has_identify() {
  _has_bits_[0] &= ~0x00000100u;
}
void PacketHead::clear_identify() {
  identify_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identify();
}
 const ::std::string& PacketHead::identify() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.Identify)
  return identify_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_identify(const ::std::string& value) {
  set_has_identify();
  identify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.Identify)
}
 void PacketHead::set_identify(const char* value) {
  set_has_identify();
  identify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.Identify)
}
 void PacketHead::set_identify(const char* value, size_t size) {
  set_has_identify();
  identify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.Identify)
}
 ::std::string* PacketHead::mutable_identify() {
  set_has_identify();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.Identify)
  return identify_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_identify() {
  clear_has_identify();
  return identify_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_identify(::std::string* identify) {
  if (identify != NULL) {
    set_has_identify();
  } else {
    clear_has_identify();
  }
  identify_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), identify);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.Identify)
}

// required string AppKey = 10;
bool PacketHead::has_appkey() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PacketHead::set_has_appkey() {
  _has_bits_[0] |= 0x00000200u;
}
void PacketHead::clear_has_appkey() {
  _has_bits_[0] &= ~0x00000200u;
}
void PacketHead::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appkey();
}
 const ::std::string& PacketHead::appkey() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.AppKey)
  return appkey_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_appkey(const ::std::string& value) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.AppKey)
}
 void PacketHead::set_appkey(const char* value) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.AppKey)
}
 void PacketHead::set_appkey(const char* value, size_t size) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.AppKey)
}
 ::std::string* PacketHead::mutable_appkey() {
  set_has_appkey();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.AppKey)
  return appkey_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_appkey() {
  clear_has_appkey();
  return appkey_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    set_has_appkey();
  } else {
    clear_has_appkey();
  }
  appkey_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.AppKey)
}

// required string SDKName = 11;
bool PacketHead::has_sdkname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PacketHead::set_has_sdkname() {
  _has_bits_[0] |= 0x00000400u;
}
void PacketHead::clear_has_sdkname() {
  _has_bits_[0] &= ~0x00000400u;
}
void PacketHead::clear_sdkname() {
  sdkname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdkname();
}
 const ::std::string& PacketHead::sdkname() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.SDKName)
  return sdkname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_sdkname(const ::std::string& value) {
  set_has_sdkname();
  sdkname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.SDKName)
}
 void PacketHead::set_sdkname(const char* value) {
  set_has_sdkname();
  sdkname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.SDKName)
}
 void PacketHead::set_sdkname(const char* value, size_t size) {
  set_has_sdkname();
  sdkname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.SDKName)
}
 ::std::string* PacketHead::mutable_sdkname() {
  set_has_sdkname();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.SDKName)
  return sdkname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_sdkname() {
  clear_has_sdkname();
  return sdkname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_sdkname(::std::string* sdkname) {
  if (sdkname != NULL) {
    set_has_sdkname();
  } else {
    clear_has_sdkname();
  }
  sdkname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sdkname);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.SDKName)
}

// required string Model = 12;
bool PacketHead::has_model() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PacketHead::set_has_model() {
  _has_bits_[0] |= 0x00000800u;
}
void PacketHead::clear_has_model() {
  _has_bits_[0] &= ~0x00000800u;
}
void PacketHead::clear_model() {
  model_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
 const ::std::string& PacketHead::model() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.Model)
  return model_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.Model)
}
 void PacketHead::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.Model)
}
 void PacketHead::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.Model)
}
 ::std::string* PacketHead::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.Model)
  return model_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_model() {
  clear_has_model();
  return model_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.Model)
}

// required .YouMeIMProtocol.NetworkType NetworkType = 13;
bool PacketHead::has_networktype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PacketHead::set_has_networktype() {
  _has_bits_[0] |= 0x00001000u;
}
void PacketHead::clear_has_networktype() {
  _has_bits_[0] &= ~0x00001000u;
}
void PacketHead::clear_networktype() {
  networktype_ = 0;
  clear_has_networktype();
}
 ::YouMeIMProtocol::NetworkType PacketHead::networktype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.NetworkType)
  return static_cast< ::YouMeIMProtocol::NetworkType >(networktype_);
}
 void PacketHead::set_networktype(::YouMeIMProtocol::NetworkType value) {
  assert(::YouMeIMProtocol::NetworkType_IsValid(value));
  set_has_networktype();
  networktype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.NetworkType)
}

// required string CPUChip = 14;
bool PacketHead::has_cpuchip() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PacketHead::set_has_cpuchip() {
  _has_bits_[0] |= 0x00002000u;
}
void PacketHead::clear_has_cpuchip() {
  _has_bits_[0] &= ~0x00002000u;
}
void PacketHead::clear_cpuchip() {
  cpuchip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpuchip();
}
 const ::std::string& PacketHead::cpuchip() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.CPUChip)
  return cpuchip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_cpuchip(const ::std::string& value) {
  set_has_cpuchip();
  cpuchip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.CPUChip)
}
 void PacketHead::set_cpuchip(const char* value) {
  set_has_cpuchip();
  cpuchip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.CPUChip)
}
 void PacketHead::set_cpuchip(const char* value, size_t size) {
  set_has_cpuchip();
  cpuchip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.CPUChip)
}
 ::std::string* PacketHead::mutable_cpuchip() {
  set_has_cpuchip();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.CPUChip)
  return cpuchip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_cpuchip() {
  clear_has_cpuchip();
  return cpuchip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_cpuchip(::std::string* cpuchip) {
  if (cpuchip != NULL) {
    set_has_cpuchip();
  } else {
    clear_has_cpuchip();
  }
  cpuchip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), cpuchip);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.CPUChip)
}

// required int64 msgSerialNum = 15;
bool PacketHead::has_msgserialnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PacketHead::set_has_msgserialnum() {
  _has_bits_[0] |= 0x00004000u;
}
void PacketHead::clear_has_msgserialnum() {
  _has_bits_[0] &= ~0x00004000u;
}
void PacketHead::clear_msgserialnum() {
  msgserialnum_ = GOOGLE_LONGLONG(0);
  clear_has_msgserialnum();
}
 ::youmecommon::protobuf::int64 PacketHead::msgserialnum() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.msgSerialNum)
  return msgserialnum_;
}
 void PacketHead::set_msgserialnum(::youmecommon::protobuf::int64 value) {
  set_has_msgserialnum();
  msgserialnum_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.msgSerialNum)
}

// required string SessionID = 16;
bool PacketHead::has_sessionid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PacketHead::set_has_sessionid() {
  _has_bits_[0] |= 0x00008000u;
}
void PacketHead::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00008000u;
}
void PacketHead::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
 const ::std::string& PacketHead::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.SessionID)
  return sessionid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.SessionID)
}
 void PacketHead::set_sessionid(const char* value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.SessionID)
}
 void PacketHead::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.SessionID)
}
 ::std::string* PacketHead::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.SessionID)
  return sessionid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_sessionid() {
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.SessionID)
}

// required string YOUMEID = 17;
bool PacketHead::has_youmeid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PacketHead::set_has_youmeid() {
  _has_bits_[0] |= 0x00010000u;
}
void PacketHead::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00010000u;
}
void PacketHead::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& PacketHead::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.YOUMEID)
}
 void PacketHead::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.PacketHead.YOUMEID)
}
 void PacketHead::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.PacketHead.YOUMEID)
}
 ::std::string* PacketHead::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.PacketHead.YOUMEID)
}

// optional int64 localtime = 18;
bool PacketHead::has_localtime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PacketHead::set_has_localtime() {
  _has_bits_[0] |= 0x00020000u;
}
void PacketHead::clear_has_localtime() {
  _has_bits_[0] &= ~0x00020000u;
}
void PacketHead::clear_localtime() {
  localtime_ = GOOGLE_LONGLONG(0);
  clear_has_localtime();
}
 ::youmecommon::protobuf::int64 PacketHead::localtime() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.localtime)
  return localtime_;
}
 void PacketHead::set_localtime(::youmecommon::protobuf::int64 value) {
  set_has_localtime();
  localtime_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.localtime)
}

// optional int64 serverSerialNum = 19;
bool PacketHead::has_serverserialnum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PacketHead::set_has_serverserialnum() {
  _has_bits_[0] |= 0x00040000u;
}
void PacketHead::clear_has_serverserialnum() {
  _has_bits_[0] &= ~0x00040000u;
}
void PacketHead::clear_serverserialnum() {
  serverserialnum_ = GOOGLE_LONGLONG(0);
  clear_has_serverserialnum();
}
 ::youmecommon::protobuf::int64 PacketHead::serverserialnum() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.serverSerialNum)
  return serverserialnum_;
}
 void PacketHead::set_serverserialnum(::youmecommon::protobuf::int64 value) {
  set_has_serverserialnum();
  serverserialnum_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.PacketHead.serverSerialNum)
}

// repeated .YouMeIMProtocol.NameValue params = 20;
int PacketHead::params_size() const {
  return params_.size();
}
void PacketHead::clear_params() {
  params_.Clear();
}
const ::YouMeIMProtocol::NameValue& PacketHead::params(int index) const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.PacketHead.params)
  return params_.Get(index);
}
::YouMeIMProtocol::NameValue* PacketHead::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.PacketHead.params)
  return params_.Mutable(index);
}
::YouMeIMProtocol::NameValue* PacketHead::add_params() {
  // @@protoc_insertion_point(field_add:YouMeIMProtocol.PacketHead.params)
  return params_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::NameValue >*
PacketHead::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:YouMeIMProtocol.PacketHead.params)
  return &params_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeIMProtocol::NameValue >&
PacketHead::params() const {
  // @@protoc_insertion_point(field_list:YouMeIMProtocol.PacketHead.params)
  return params_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ReqHead::kHeadFieldNumber;
#endif  // !_MSC_VER

ReqHead::ReqHead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.ReqHead)
}

void ReqHead::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

ReqHead::ReqHead(const ReqHead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.ReqHead)
}

void ReqHead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHead::~ReqHead() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.ReqHead)
  SharedDtor();
}

void ReqHead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void ReqHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReqHead& ReqHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

ReqHead* ReqHead::default_instance_ = NULL;

ReqHead* ReqHead::New(::youmecommon::protobuf::Arena* arena) const {
  ReqHead* n = new ReqHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHead::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeIMProtocol::PacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqHead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.ReqHead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.ReqHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.ReqHead)
  return false;
#undef DO_
}

void ReqHead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.ReqHead)
  // required .YouMeIMProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.ReqHead)
}

int ReqHead::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ReqHead*>(&from));
}

void ReqHead::MergeFrom(const ReqHead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeIMProtocol::PacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReqHead::CopyFrom(const ReqHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void ReqHead::Swap(ReqHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHead::InternalSwap(ReqHead* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReqHead::GetTypeName() const {
  return "YouMeIMProtocol.ReqHead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqHead

// required .YouMeIMProtocol.PacketHead head = 1;
bool ReqHead::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqHead::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqHead::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqHead::clear_head() {
  if (head_ != NULL) head_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeIMProtocol::PacketHead& ReqHead::head() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ReqHead.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeIMProtocol::PacketHead* ReqHead::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.ReqHead.head)
  return head_;
}
::YouMeIMProtocol::PacketHead* ReqHead::release_head() {
  clear_has_head();
  ::YouMeIMProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void ReqHead::set_allocated_head(::YouMeIMProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.ReqHead.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerPacketHead::kMsgtypeFieldNumber;
const int ServerPacketHead::kMsgversionFieldNumber;
const int ServerPacketHead::kMsgSerialNumFieldNumber;
const int ServerPacketHead::kCodeFieldNumber;
const int ServerPacketHead::kClientSerialNumFieldNumber;
const int ServerPacketHead::kServertimeFieldNumber;
#endif  // !_MSC_VER

ServerPacketHead::ServerPacketHead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.ServerPacketHead)
}

void ServerPacketHead::InitAsDefaultInstance() {
}

ServerPacketHead::ServerPacketHead(const ServerPacketHead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.ServerPacketHead)
}

void ServerPacketHead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  msgversion_ = 0;
  msgserialnum_ = GOOGLE_LONGLONG(0);
  code_ = 0;
  clientserialnum_ = GOOGLE_LONGLONG(0);
  servertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPacketHead::~ServerPacketHead() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.ServerPacketHead)
  SharedDtor();
}

void ServerPacketHead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerPacketHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerPacketHead& ServerPacketHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

ServerPacketHead* ServerPacketHead::default_instance_ = NULL;

ServerPacketHead* ServerPacketHead::New(::youmecommon::protobuf::Arena* arena) const {
  ServerPacketHead* n = new ServerPacketHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerPacketHead::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerPacketHead*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(msgtype_, code_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerPacketHead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.ServerPacketHead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.Command_TYPE msgtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::Command_TYPE_IsValid(value)) {
            set_msgtype(static_cast< ::YouMeIMProtocol::Command_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgversion;
        break;
      }

      // required int32 msgversion = 2;
      case 2: {
        if (tag == 16) {
         parse_msgversion:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgversion_)));
          set_has_msgversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgSerialNum;
        break;
      }

      // required int64 msgSerialNum = 3;
      case 3: {
        if (tag == 24) {
         parse_msgSerialNum:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgserialnum_)));
          set_has_msgserialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // required int32 code = 4;
      case 4: {
        if (tag == 32) {
         parse_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_clientSerialNum;
        break;
      }

      // optional int64 clientSerialNum = 5;
      case 5: {
        if (tag == 40) {
         parse_clientSerialNum:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientserialnum_)));
          set_has_clientserialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_servertime;
        break;
      }

      // optional int64 servertime = 6;
      case 6: {
        if (tag == 48) {
         parse_servertime:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.ServerPacketHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.ServerPacketHead)
  return false;
#undef DO_
}

void ServerPacketHead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.ServerPacketHead)
  // required .YouMeIMProtocol.Command_TYPE msgtype = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required int32 msgversion = 2;
  if (has_msgversion()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgversion(), output);
  }

  // required int64 msgSerialNum = 3;
  if (has_msgserialnum()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(3, this->msgserialnum(), output);
  }

  // required int32 code = 4;
  if (has_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  // optional int64 clientSerialNum = 5;
  if (has_clientserialnum()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(5, this->clientserialnum(), output);
  }

  // optional int64 servertime = 6;
  if (has_servertime()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(6, this->servertime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.ServerPacketHead)
}

int ServerPacketHead::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required .YouMeIMProtocol.Command_TYPE msgtype = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  if (has_msgversion()) {
    // required int32 msgversion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgversion());
  }

  if (has_msgserialnum()) {
    // required int64 msgSerialNum = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->msgserialnum());
  }

  if (has_code()) {
    // required int32 code = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  return total_size;
}
int ServerPacketHead::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.Command_TYPE msgtype = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

    // required int32 msgversion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgversion());

    // required int64 msgSerialNum = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->msgserialnum());

    // required int32 code = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 48u) {
    // optional int64 clientSerialNum = 5;
    if (has_clientserialnum()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
          this->clientserialnum());
    }

    // optional int64 servertime = 6;
    if (has_servertime()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPacketHead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ServerPacketHead*>(&from));
}

void ServerPacketHead::MergeFrom(const ServerPacketHead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgversion()) {
      set_msgversion(from.msgversion());
    }
    if (from.has_msgserialnum()) {
      set_msgserialnum(from.msgserialnum());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_clientserialnum()) {
      set_clientserialnum(from.clientserialnum());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerPacketHead::CopyFrom(const ServerPacketHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPacketHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerPacketHead::Swap(ServerPacketHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerPacketHead::InternalSwap(ServerPacketHead* other) {
  std::swap(msgtype_, other->msgtype_);
  std::swap(msgversion_, other->msgversion_);
  std::swap(msgserialnum_, other->msgserialnum_);
  std::swap(code_, other->code_);
  std::swap(clientserialnum_, other->clientserialnum_);
  std::swap(servertime_, other->servertime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerPacketHead::GetTypeName() const {
  return "YouMeIMProtocol.ServerPacketHead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerPacketHead

// required .YouMeIMProtocol.Command_TYPE msgtype = 1;
bool ServerPacketHead::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerPacketHead::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerPacketHead::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerPacketHead::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::YouMeIMProtocol::Command_TYPE ServerPacketHead::msgtype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ServerPacketHead.msgtype)
  return static_cast< ::YouMeIMProtocol::Command_TYPE >(msgtype_);
}
 void ServerPacketHead::set_msgtype(::YouMeIMProtocol::Command_TYPE value) {
  assert(::YouMeIMProtocol::Command_TYPE_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.ServerPacketHead.msgtype)
}

// required int32 msgversion = 2;
bool ServerPacketHead::has_msgversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerPacketHead::set_has_msgversion() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerPacketHead::clear_has_msgversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerPacketHead::clear_msgversion() {
  msgversion_ = 0;
  clear_has_msgversion();
}
 ::youmecommon::protobuf::int32 ServerPacketHead::msgversion() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ServerPacketHead.msgversion)
  return msgversion_;
}
 void ServerPacketHead::set_msgversion(::youmecommon::protobuf::int32 value) {
  set_has_msgversion();
  msgversion_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.ServerPacketHead.msgversion)
}

// required int64 msgSerialNum = 3;
bool ServerPacketHead::has_msgserialnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerPacketHead::set_has_msgserialnum() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerPacketHead::clear_has_msgserialnum() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerPacketHead::clear_msgserialnum() {
  msgserialnum_ = GOOGLE_LONGLONG(0);
  clear_has_msgserialnum();
}
 ::youmecommon::protobuf::int64 ServerPacketHead::msgserialnum() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ServerPacketHead.msgSerialNum)
  return msgserialnum_;
}
 void ServerPacketHead::set_msgserialnum(::youmecommon::protobuf::int64 value) {
  set_has_msgserialnum();
  msgserialnum_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.ServerPacketHead.msgSerialNum)
}

// required int32 code = 4;
bool ServerPacketHead::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerPacketHead::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerPacketHead::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerPacketHead::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::youmecommon::protobuf::int32 ServerPacketHead::code() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ServerPacketHead.code)
  return code_;
}
 void ServerPacketHead::set_code(::youmecommon::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.ServerPacketHead.code)
}

// optional int64 clientSerialNum = 5;
bool ServerPacketHead::has_clientserialnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerPacketHead::set_has_clientserialnum() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerPacketHead::clear_has_clientserialnum() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerPacketHead::clear_clientserialnum() {
  clientserialnum_ = GOOGLE_LONGLONG(0);
  clear_has_clientserialnum();
}
 ::youmecommon::protobuf::int64 ServerPacketHead::clientserialnum() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ServerPacketHead.clientSerialNum)
  return clientserialnum_;
}
 void ServerPacketHead::set_clientserialnum(::youmecommon::protobuf::int64 value) {
  set_has_clientserialnum();
  clientserialnum_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.ServerPacketHead.clientSerialNum)
}

// optional int64 servertime = 6;
bool ServerPacketHead::has_servertime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerPacketHead::set_has_servertime() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerPacketHead::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerPacketHead::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
  clear_has_servertime();
}
 ::youmecommon::protobuf::int64 ServerPacketHead::servertime() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ServerPacketHead.servertime)
  return servertime_;
}
 void ServerPacketHead::set_servertime(::youmecommon::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.ServerPacketHead.servertime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerReqHead::kHeadFieldNumber;
#endif  // !_MSC_VER

ServerReqHead::ServerReqHead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.ServerReqHead)
}

void ServerReqHead::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

ServerReqHead::ServerReqHead(const ServerReqHead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.ServerReqHead)
}

void ServerReqHead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerReqHead::~ServerReqHead() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.ServerReqHead)
  SharedDtor();
}

void ServerReqHead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void ServerReqHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerReqHead& ServerReqHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

ServerReqHead* ServerReqHead::default_instance_ = NULL;

ServerReqHead* ServerReqHead::New(::youmecommon::protobuf::Arena* arena) const {
  ServerReqHead* n = new ServerReqHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerReqHead::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeIMProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerReqHead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.ServerReqHead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.ServerReqHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.ServerReqHead)
  return false;
#undef DO_
}

void ServerReqHead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.ServerReqHead)
  // required .YouMeIMProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.ServerReqHead)
}

int ServerReqHead::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerReqHead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ServerReqHead*>(&from));
}

void ServerReqHead::MergeFrom(const ServerReqHead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerReqHead::CopyFrom(const ServerReqHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReqHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void ServerReqHead::Swap(ServerReqHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerReqHead::InternalSwap(ServerReqHead* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerReqHead::GetTypeName() const {
  return "YouMeIMProtocol.ServerReqHead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerReqHead

// required .YouMeIMProtocol.ServerPacketHead head = 1;
bool ServerReqHead::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerReqHead::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerReqHead::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerReqHead::clear_head() {
  if (head_ != NULL) head_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeIMProtocol::ServerPacketHead& ServerReqHead::head() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.ServerReqHead.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* ServerReqHead::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.ServerReqHead.head)
  return head_;
}
::YouMeIMProtocol::ServerPacketHead* ServerReqHead::release_head() {
  clear_has_head();
  ::YouMeIMProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void ServerReqHead::set_allocated_head(::YouMeIMProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.ServerReqHead.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_Login::kMsgHeadFieldNumber;
const int YouMeIM_Command_Login::kUserPasswdFieldNumber;
const int YouMeIM_Command_Login::kOlduserPasswdFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_Login::YouMeIM_Command_Login()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_Login)
}

void YouMeIM_Command_Login::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_Login::YouMeIM_Command_Login(const YouMeIM_Command_Login& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_Login)
}

void YouMeIM_Command_Login::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  userpasswd_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  olduserpasswd_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_Login::~YouMeIM_Command_Login() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_Login)
  SharedDtor();
}

void YouMeIM_Command_Login::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userpasswd_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  olduserpasswd_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_Login& YouMeIM_Command_Login::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_Login* YouMeIM_Command_Login::default_instance_ = NULL;

YouMeIM_Command_Login* YouMeIM_Command_Login::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_Login* n = new YouMeIM_Command_Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_Login::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    if (has_userpasswd()) {
      userpasswd_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_olduserpasswd()) {
      olduserpasswd_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_Login::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_Login)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userPasswd;
        break;
      }

      // required string userPasswd = 2;
      case 2: {
        if (tag == 18) {
         parse_userPasswd:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpasswd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_olduserPasswd;
        break;
      }

      // optional string olduserPasswd = 3;
      case 3: {
        if (tag == 26) {
         parse_olduserPasswd:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_olduserpasswd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_Login)
  return false;
#undef DO_
}

void YouMeIM_Command_Login::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_Login)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string userPasswd = 2;
  if (has_userpasswd()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userpasswd(), output);
  }

  // optional string olduserPasswd = 3;
  if (has_olduserpasswd()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->olduserpasswd(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_Login)
}

int YouMeIM_Command_Login::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_userpasswd()) {
    // required string userPasswd = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userpasswd());
  }

  return total_size;
}
int YouMeIM_Command_Login::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string userPasswd = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userpasswd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string olduserPasswd = 3;
  if (has_olduserpasswd()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->olduserpasswd());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_Login::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_Login*>(&from));
}

void YouMeIM_Command_Login::MergeFrom(const YouMeIM_Command_Login& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_userpasswd()) {
      set_has_userpasswd();
      userpasswd_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpasswd_);
    }
    if (from.has_olduserpasswd()) {
      set_has_olduserpasswd();
      olduserpasswd_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.olduserpasswd_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_Login::CopyFrom(const YouMeIM_Command_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_Login::Swap(YouMeIM_Command_Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_Login::InternalSwap(YouMeIM_Command_Login* other) {
  std::swap(msghead_, other->msghead_);
  userpasswd_.Swap(&other->userpasswd_);
  olduserpasswd_.Swap(&other->olduserpasswd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_Login::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_Login";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_Login

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_Login::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_Login::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_Login::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_Login::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_Login::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_Login.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_Login::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_Login.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_Login::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_Login::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_Login.msgHead)
}

// required string userPasswd = 2;
bool YouMeIM_Command_Login::has_userpasswd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_Login::set_has_userpasswd() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_Login::clear_has_userpasswd() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_Login::clear_userpasswd() {
  userpasswd_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpasswd();
}
 const ::std::string& YouMeIM_Command_Login::userpasswd() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_Login.userPasswd)
  return userpasswd_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_Login::set_userpasswd(const ::std::string& value) {
  set_has_userpasswd();
  userpasswd_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_Login.userPasswd)
}
 void YouMeIM_Command_Login::set_userpasswd(const char* value) {
  set_has_userpasswd();
  userpasswd_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_Login.userPasswd)
}
 void YouMeIM_Command_Login::set_userpasswd(const char* value, size_t size) {
  set_has_userpasswd();
  userpasswd_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_Login.userPasswd)
}
 ::std::string* YouMeIM_Command_Login::mutable_userpasswd() {
  set_has_userpasswd();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_Login.userPasswd)
  return userpasswd_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_Login::release_userpasswd() {
  clear_has_userpasswd();
  return userpasswd_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_Login::set_allocated_userpasswd(::std::string* userpasswd) {
  if (userpasswd != NULL) {
    set_has_userpasswd();
  } else {
    clear_has_userpasswd();
  }
  userpasswd_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userpasswd);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_Login.userPasswd)
}

// optional string olduserPasswd = 3;
bool YouMeIM_Command_Login::has_olduserpasswd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_Login::set_has_olduserpasswd() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_Login::clear_has_olduserpasswd() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_Login::clear_olduserpasswd() {
  olduserpasswd_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_olduserpasswd();
}
 const ::std::string& YouMeIM_Command_Login::olduserpasswd() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_Login.olduserPasswd)
  return olduserpasswd_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_Login::set_olduserpasswd(const ::std::string& value) {
  set_has_olduserpasswd();
  olduserpasswd_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_Login.olduserPasswd)
}
 void YouMeIM_Command_Login::set_olduserpasswd(const char* value) {
  set_has_olduserpasswd();
  olduserpasswd_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_Login.olduserPasswd)
}
 void YouMeIM_Command_Login::set_olduserpasswd(const char* value, size_t size) {
  set_has_olduserpasswd();
  olduserpasswd_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_Login.olduserPasswd)
}
 ::std::string* YouMeIM_Command_Login::mutable_olduserpasswd() {
  set_has_olduserpasswd();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_Login.olduserPasswd)
  return olduserpasswd_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_Login::release_olduserpasswd() {
  clear_has_olduserpasswd();
  return olduserpasswd_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_Login::set_allocated_olduserpasswd(::std::string* olduserpasswd) {
  if (olduserpasswd != NULL) {
    set_has_olduserpasswd();
  } else {
    clear_has_olduserpasswd();
  }
  olduserpasswd_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), olduserpasswd);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_Login.olduserPasswd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_LoginResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_LoginResponse::kSessionIDFieldNumber;
const int YouMeIM_Command_LoginResponse::kUserInfoFieldNumber;
const int YouMeIM_Command_LoginResponse::kSecrectFieldNumber;
const int YouMeIM_Command_LoginResponse::kErrorDescriptionFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_LoginResponse::YouMeIM_Command_LoginResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_LoginResponse)
}

void YouMeIM_Command_LoginResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  userinfo_ = const_cast< ::YouMeIMProtocol::ContactInfo*>(
      ::YouMeIMProtocol::ContactInfo::internal_default_instance());
#else
  userinfo_ = const_cast< ::YouMeIMProtocol::ContactInfo*>(&::YouMeIMProtocol::ContactInfo::default_instance());
#endif
}

YouMeIM_Command_LoginResponse::YouMeIM_Command_LoginResponse(const YouMeIM_Command_LoginResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_LoginResponse)
}

void YouMeIM_Command_LoginResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  sessionid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userinfo_ = NULL;
  secrect_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  errordescription_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_LoginResponse::~YouMeIM_Command_LoginResponse() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_LoginResponse)
  SharedDtor();
}

void YouMeIM_Command_LoginResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  secrect_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  errordescription_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
    delete userinfo_;
  }
}

void YouMeIM_Command_LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_LoginResponse& YouMeIM_Command_LoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_LoginResponse* YouMeIM_Command_LoginResponse::default_instance_ = NULL;

YouMeIM_Command_LoginResponse* YouMeIM_Command_LoginResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_LoginResponse* n = new YouMeIM_Command_LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_sessionid()) {
      sessionid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::YouMeIMProtocol::ContactInfo::Clear();
    }
    if (has_secrect()) {
      secrect_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_errordescription()) {
      errordescription_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_LoginResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_LoginResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sessionID;
        break;
      }

      // required string sessionID = 2;
      case 2: {
        if (tag == 18) {
         parse_sessionID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userInfo;
        break;
      }

      // required .YouMeIMProtocol.ContactInfo userInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_userInfo:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_secrect;
        break;
      }

      // required string secrect = 4;
      case 4: {
        if (tag == 34) {
         parse_secrect:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secrect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_errorDescription;
        break;
      }

      // optional string errorDescription = 5;
      case 5: {
        if (tag == 42) {
         parse_errorDescription:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordescription()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_LoginResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_LoginResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_LoginResponse)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string sessionID = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sessionid(), output);
  }

  // required .YouMeIMProtocol.ContactInfo userInfo = 3;
  if (has_userinfo()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->userinfo_, output);
  }

  // required string secrect = 4;
  if (has_secrect()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->secrect(), output);
  }

  // optional string errorDescription = 5;
  if (has_errordescription()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->errordescription(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_LoginResponse)
}

int YouMeIM_Command_LoginResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_sessionid()) {
    // required string sessionID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_userinfo()) {
    // required .YouMeIMProtocol.ContactInfo userInfo = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);
  }

  if (has_secrect()) {
    // required string secrect = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->secrect());
  }

  return total_size;
}
int YouMeIM_Command_LoginResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string sessionID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required .YouMeIMProtocol.ContactInfo userInfo = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);

    // required string secrect = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->secrect());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string errorDescription = 5;
  if (has_errordescription()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->errordescription());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_LoginResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_LoginResponse*>(&from));
}

void YouMeIM_Command_LoginResponse::MergeFrom(const YouMeIM_Command_LoginResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_sessionid()) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::YouMeIMProtocol::ContactInfo::MergeFrom(from.userinfo());
    }
    if (from.has_secrect()) {
      set_has_secrect();
      secrect_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.secrect_);
    }
    if (from.has_errordescription()) {
      set_has_errordescription();
      errordescription_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_LoginResponse::CopyFrom(const YouMeIM_Command_LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  if (has_userinfo()) {
    if (!this->userinfo_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_LoginResponse::Swap(YouMeIM_Command_LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_LoginResponse::InternalSwap(YouMeIM_Command_LoginResponse* other) {
  std::swap(msghead_, other->msghead_);
  sessionid_.Swap(&other->sessionid_);
  std::swap(userinfo_, other->userinfo_);
  secrect_.Swap(&other->secrect_);
  errordescription_.Swap(&other->errordescription_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_LoginResponse::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_LoginResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_LoginResponse

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_LoginResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_LoginResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_LoginResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_LoginResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_LoginResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_LoginResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_LoginResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_LoginResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_LoginResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_LoginResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_LoginResponse.msgHead)
}

// required string sessionID = 2;
bool YouMeIM_Command_LoginResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_LoginResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_LoginResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_LoginResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
 const ::std::string& YouMeIM_Command_LoginResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_LoginResponse.sessionID)
  return sessionid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_LoginResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_LoginResponse.sessionID)
}
 void YouMeIM_Command_LoginResponse::set_sessionid(const char* value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_LoginResponse.sessionID)
}
 void YouMeIM_Command_LoginResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_LoginResponse.sessionID)
}
 ::std::string* YouMeIM_Command_LoginResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_LoginResponse.sessionID)
  return sessionid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_LoginResponse::release_sessionid() {
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_LoginResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_LoginResponse.sessionID)
}

// required .YouMeIMProtocol.ContactInfo userInfo = 3;
bool YouMeIM_Command_LoginResponse::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_LoginResponse::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_LoginResponse::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_LoginResponse::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::YouMeIMProtocol::ContactInfo::Clear();
  clear_has_userinfo();
}
const ::YouMeIMProtocol::ContactInfo& YouMeIM_Command_LoginResponse::userinfo() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_LoginResponse.userInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return userinfo_ != NULL ? *userinfo_ : *default_instance().userinfo_;
#else
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
#endif
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_LoginResponse::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) {
    userinfo_ = new ::YouMeIMProtocol::ContactInfo;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_LoginResponse.userInfo)
  return userinfo_;
}
::YouMeIMProtocol::ContactInfo* YouMeIM_Command_LoginResponse::release_userinfo() {
  clear_has_userinfo();
  ::YouMeIMProtocol::ContactInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
void YouMeIM_Command_LoginResponse::set_allocated_userinfo(::YouMeIMProtocol::ContactInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_LoginResponse.userInfo)
}

// required string secrect = 4;
bool YouMeIM_Command_LoginResponse::has_secrect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeIM_Command_LoginResponse::set_has_secrect() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeIM_Command_LoginResponse::clear_has_secrect() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeIM_Command_LoginResponse::clear_secrect() {
  secrect_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secrect();
}
 const ::std::string& YouMeIM_Command_LoginResponse::secrect() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_LoginResponse.secrect)
  return secrect_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_LoginResponse::set_secrect(const ::std::string& value) {
  set_has_secrect();
  secrect_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_LoginResponse.secrect)
}
 void YouMeIM_Command_LoginResponse::set_secrect(const char* value) {
  set_has_secrect();
  secrect_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_LoginResponse.secrect)
}
 void YouMeIM_Command_LoginResponse::set_secrect(const char* value, size_t size) {
  set_has_secrect();
  secrect_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_LoginResponse.secrect)
}
 ::std::string* YouMeIM_Command_LoginResponse::mutable_secrect() {
  set_has_secrect();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_LoginResponse.secrect)
  return secrect_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_LoginResponse::release_secrect() {
  clear_has_secrect();
  return secrect_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_LoginResponse::set_allocated_secrect(::std::string* secrect) {
  if (secrect != NULL) {
    set_has_secrect();
  } else {
    clear_has_secrect();
  }
  secrect_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), secrect);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_LoginResponse.secrect)
}

// optional string errorDescription = 5;
bool YouMeIM_Command_LoginResponse::has_errordescription() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeIM_Command_LoginResponse::set_has_errordescription() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeIM_Command_LoginResponse::clear_has_errordescription() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeIM_Command_LoginResponse::clear_errordescription() {
  errordescription_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errordescription();
}
 const ::std::string& YouMeIM_Command_LoginResponse::errordescription() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_LoginResponse.errorDescription)
  return errordescription_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_LoginResponse::set_errordescription(const ::std::string& value) {
  set_has_errordescription();
  errordescription_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_LoginResponse.errorDescription)
}
 void YouMeIM_Command_LoginResponse::set_errordescription(const char* value) {
  set_has_errordescription();
  errordescription_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_LoginResponse.errorDescription)
}
 void YouMeIM_Command_LoginResponse::set_errordescription(const char* value, size_t size) {
  set_has_errordescription();
  errordescription_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_LoginResponse.errorDescription)
}
 ::std::string* YouMeIM_Command_LoginResponse::mutable_errordescription() {
  set_has_errordescription();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_LoginResponse.errorDescription)
  return errordescription_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_LoginResponse::release_errordescription() {
  clear_has_errordescription();
  return errordescription_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_LoginResponse::set_allocated_errordescription(::std::string* errordescription) {
  if (errordescription != NULL) {
    set_has_errordescription();
  } else {
    clear_has_errordescription();
  }
  errordescription_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), errordescription);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_LoginResponse.errorDescription)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_Logout::kMsgHeadFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_Logout::YouMeIM_Command_Logout()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_Logout)
}

void YouMeIM_Command_Logout::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_Logout::YouMeIM_Command_Logout(const YouMeIM_Command_Logout& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_Logout)
}

void YouMeIM_Command_Logout::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_Logout::~YouMeIM_Command_Logout() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_Logout)
  SharedDtor();
}

void YouMeIM_Command_Logout::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_Logout& YouMeIM_Command_Logout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_Logout* YouMeIM_Command_Logout::default_instance_ = NULL;

YouMeIM_Command_Logout* YouMeIM_Command_Logout::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_Logout* n = new YouMeIM_Command_Logout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_Logout::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_Logout::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_Logout)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_Logout)
  return false;
#undef DO_
}

void YouMeIM_Command_Logout::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_Logout)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_Logout)
}

int YouMeIM_Command_Logout::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_Logout::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_Logout*>(&from));
}

void YouMeIM_Command_Logout::MergeFrom(const YouMeIM_Command_Logout& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_Logout::CopyFrom(const YouMeIM_Command_Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_Logout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_Logout::Swap(YouMeIM_Command_Logout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_Logout::InternalSwap(YouMeIM_Command_Logout* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_Logout::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_Logout";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_Logout

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_Logout::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_Logout::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_Logout::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_Logout::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_Logout::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_Logout.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_Logout::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_Logout.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_Logout::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_Logout::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_Logout.msgHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_LogoutResponse::kMsgHeadFieldNumber;
const int YouMeIM_Command_LogoutResponse::kStatusFieldNumber;
const int YouMeIM_Command_LogoutResponse::kErrorDescriptionFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_LogoutResponse::YouMeIM_Command_LogoutResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_LogoutResponse)
}

void YouMeIM_Command_LogoutResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_LogoutResponse::YouMeIM_Command_LogoutResponse(const YouMeIM_Command_LogoutResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_LogoutResponse)
}

void YouMeIM_Command_LogoutResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  status_ = 0;
  errordescription_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_LogoutResponse::~YouMeIM_Command_LogoutResponse() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_LogoutResponse)
  SharedDtor();
}

void YouMeIM_Command_LogoutResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  errordescription_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_LogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_LogoutResponse& YouMeIM_Command_LogoutResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_LogoutResponse* YouMeIM_Command_LogoutResponse::default_instance_ = NULL;

YouMeIM_Command_LogoutResponse* YouMeIM_Command_LogoutResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_LogoutResponse* n = new YouMeIM_Command_LogoutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_LogoutResponse::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    status_ = 0;
    if (has_errordescription()) {
      errordescription_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_LogoutResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_LogoutResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_errorDescription;
        break;
      }

      // optional string errorDescription = 3;
      case 3: {
        if (tag == 26) {
         parse_errorDescription:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordescription()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_LogoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_LogoutResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_LogoutResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_LogoutResponse)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional string errorDescription = 3;
  if (has_errordescription()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errordescription(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_LogoutResponse)
}

int YouMeIM_Command_LogoutResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_status()) {
    // required int32 status = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
int YouMeIM_Command_LogoutResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required int32 status = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string errorDescription = 3;
  if (has_errordescription()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->errordescription());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_LogoutResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_LogoutResponse*>(&from));
}

void YouMeIM_Command_LogoutResponse::MergeFrom(const YouMeIM_Command_LogoutResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_errordescription()) {
      set_has_errordescription();
      errordescription_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_LogoutResponse::CopyFrom(const YouMeIM_Command_LogoutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_LogoutResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_LogoutResponse::Swap(YouMeIM_Command_LogoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_LogoutResponse::InternalSwap(YouMeIM_Command_LogoutResponse* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(status_, other->status_);
  errordescription_.Swap(&other->errordescription_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_LogoutResponse::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_LogoutResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_LogoutResponse

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_LogoutResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_LogoutResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_LogoutResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_LogoutResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_LogoutResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_LogoutResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_LogoutResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_LogoutResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.msgHead)
}

// required int32 status = 2;
bool YouMeIM_Command_LogoutResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_LogoutResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_LogoutResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_LogoutResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 YouMeIM_Command_LogoutResponse::status() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.status)
  return status_;
}
 void YouMeIM_Command_LogoutResponse::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.status)
}

// optional string errorDescription = 3;
bool YouMeIM_Command_LogoutResponse::has_errordescription() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeIM_Command_LogoutResponse::set_has_errordescription() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeIM_Command_LogoutResponse::clear_has_errordescription() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeIM_Command_LogoutResponse::clear_errordescription() {
  errordescription_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errordescription();
}
 const ::std::string& YouMeIM_Command_LogoutResponse::errordescription() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.errorDescription)
  return errordescription_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_LogoutResponse::set_errordescription(const ::std::string& value) {
  set_has_errordescription();
  errordescription_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.errorDescription)
}
 void YouMeIM_Command_LogoutResponse::set_errordescription(const char* value) {
  set_has_errordescription();
  errordescription_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.errorDescription)
}
 void YouMeIM_Command_LogoutResponse::set_errordescription(const char* value, size_t size) {
  set_has_errordescription();
  errordescription_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.errorDescription)
}
 ::std::string* YouMeIM_Command_LogoutResponse::mutable_errordescription() {
  set_has_errordescription();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.errorDescription)
  return errordescription_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_LogoutResponse::release_errordescription() {
  clear_has_errordescription();
  return errordescription_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_LogoutResponse::set_allocated_errordescription(::std::string* errordescription) {
  if (errordescription != NULL) {
    set_has_errordescription();
  } else {
    clear_has_errordescription();
  }
  errordescription_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), errordescription);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_LogoutResponse.errorDescription)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_DisConnectNotify::kMsgHeadFieldNumber;
const int YouMeIM_Command_DisConnectNotify::kEvtTypeFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_DisConnectNotify::YouMeIM_Command_DisConnectNotify()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify)
}

void YouMeIM_Command_DisConnectNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_DisConnectNotify::YouMeIM_Command_DisConnectNotify(const YouMeIM_Command_DisConnectNotify& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify)
}

void YouMeIM_Command_DisConnectNotify::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  evttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_DisConnectNotify::~YouMeIM_Command_DisConnectNotify() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify)
  SharedDtor();
}

void YouMeIM_Command_DisConnectNotify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_DisConnectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_DisConnectNotify& YouMeIM_Command_DisConnectNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_DisConnectNotify* YouMeIM_Command_DisConnectNotify::default_instance_ = NULL;

YouMeIM_Command_DisConnectNotify* YouMeIM_Command_DisConnectNotify::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_DisConnectNotify* n = new YouMeIM_Command_DisConnectNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_DisConnectNotify::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
    }
    evttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_DisConnectNotify::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_evtType;
        break;
      }

      // required .YouMeIMProtocol.ConnectEventType evtType = 2;
      case 2: {
        if (tag == 16) {
         parse_evtType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeIMProtocol::ConnectEventType_IsValid(value)) {
            set_evttype(static_cast< ::YouMeIMProtocol::ConnectEventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify)
  return false;
#undef DO_
}

void YouMeIM_Command_DisConnectNotify::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required .YouMeIMProtocol.ConnectEventType evtType = 2;
  if (has_evttype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->evttype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify)
}

int YouMeIM_Command_DisConnectNotify::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_evttype()) {
    // required .YouMeIMProtocol.ConnectEventType evtType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->evttype());
  }

  return total_size;
}
int YouMeIM_Command_DisConnectNotify::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.PacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required .YouMeIMProtocol.ConnectEventType evtType = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->evttype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_DisConnectNotify::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_DisConnectNotify*>(&from));
}

void YouMeIM_Command_DisConnectNotify::MergeFrom(const YouMeIM_Command_DisConnectNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
    if (from.has_evttype()) {
      set_evttype(from.evttype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_DisConnectNotify::CopyFrom(const YouMeIM_Command_DisConnectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_DisConnectNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_DisConnectNotify::Swap(YouMeIM_Command_DisConnectNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_DisConnectNotify::InternalSwap(YouMeIM_Command_DisConnectNotify* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(evttype_, other->evttype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_DisConnectNotify::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_DisConnectNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_DisConnectNotify

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_DisConnectNotify::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_DisConnectNotify::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_DisConnectNotify::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_DisConnectNotify::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_DisConnectNotify::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_DisConnectNotify::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_DisConnectNotify::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_DisConnectNotify::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify.msgHead)
}

// required .YouMeIMProtocol.ConnectEventType evtType = 2;
bool YouMeIM_Command_DisConnectNotify::has_evttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_DisConnectNotify::set_has_evttype() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_DisConnectNotify::clear_has_evttype() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_DisConnectNotify::clear_evttype() {
  evttype_ = 0;
  clear_has_evttype();
}
 ::YouMeIMProtocol::ConnectEventType YouMeIM_Command_DisConnectNotify::evttype() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify.evtType)
  return static_cast< ::YouMeIMProtocol::ConnectEventType >(evttype_);
}
 void YouMeIM_Command_DisConnectNotify::set_evttype(::YouMeIMProtocol::ConnectEventType value) {
  assert(::YouMeIMProtocol::ConnectEventType_IsValid(value));
  set_has_evttype();
  evttype_ = value;
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_DisConnectNotify.evtType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_Heart::kMsgHeadFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_Heart::YouMeIM_Command_Heart()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_Heart)
}

void YouMeIM_Command_Heart::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_Heart::YouMeIM_Command_Heart(const YouMeIM_Command_Heart& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_Heart)
}

void YouMeIM_Command_Heart::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_Heart::~YouMeIM_Command_Heart() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_Heart)
  SharedDtor();
}

void YouMeIM_Command_Heart::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_Heart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_Heart& YouMeIM_Command_Heart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_Heart* YouMeIM_Command_Heart::default_instance_ = NULL;

YouMeIM_Command_Heart* YouMeIM_Command_Heart::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_Heart* n = new YouMeIM_Command_Heart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_Heart::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_Heart::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_Heart)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_Heart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_Heart)
  return false;
#undef DO_
}

void YouMeIM_Command_Heart::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_Heart)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_Heart)
}

int YouMeIM_Command_Heart::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_Heart::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_Heart*>(&from));
}

void YouMeIM_Command_Heart::MergeFrom(const YouMeIM_Command_Heart& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_Heart::CopyFrom(const YouMeIM_Command_Heart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_Heart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_Heart::Swap(YouMeIM_Command_Heart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_Heart::InternalSwap(YouMeIM_Command_Heart* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_Heart::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_Heart";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_Heart

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_Heart::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_Heart::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_Heart::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_Heart::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_Heart::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_Heart.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_Heart::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_Heart.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_Heart::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_Heart::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_Heart.msgHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_HeartResponse::kMsgHeadFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_HeartResponse::YouMeIM_Command_HeartResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_HeartResponse)
}

void YouMeIM_Command_HeartResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_HeartResponse::YouMeIM_Command_HeartResponse(const YouMeIM_Command_HeartResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_HeartResponse)
}

void YouMeIM_Command_HeartResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_HeartResponse::~YouMeIM_Command_HeartResponse() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_HeartResponse)
  SharedDtor();
}

void YouMeIM_Command_HeartResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_HeartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_HeartResponse& YouMeIM_Command_HeartResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_HeartResponse* YouMeIM_Command_HeartResponse::default_instance_ = NULL;

YouMeIM_Command_HeartResponse* YouMeIM_Command_HeartResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_HeartResponse* n = new YouMeIM_Command_HeartResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_HeartResponse::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_HeartResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_HeartResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_HeartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_HeartResponse)
  return false;
#undef DO_
}

void YouMeIM_Command_HeartResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_HeartResponse)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_HeartResponse)
}

int YouMeIM_Command_HeartResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_HeartResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_HeartResponse*>(&from));
}

void YouMeIM_Command_HeartResponse::MergeFrom(const YouMeIM_Command_HeartResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_HeartResponse::CopyFrom(const YouMeIM_Command_HeartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_HeartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_HeartResponse::Swap(YouMeIM_Command_HeartResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_HeartResponse::InternalSwap(YouMeIM_Command_HeartResponse* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_HeartResponse::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_HeartResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_HeartResponse

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_HeartResponse::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_HeartResponse::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_HeartResponse::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_HeartResponse::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_HeartResponse::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_HeartResponse.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_HeartResponse::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_HeartResponse.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_HeartResponse::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_HeartResponse::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_HeartResponse.msgHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_PackageAck::kMsgHeadFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_PackageAck::YouMeIM_Command_PackageAck()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_PackageAck)
}

void YouMeIM_Command_PackageAck::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_PackageAck::YouMeIM_Command_PackageAck(const YouMeIM_Command_PackageAck& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_PackageAck)
}

void YouMeIM_Command_PackageAck::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_PackageAck::~YouMeIM_Command_PackageAck() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_PackageAck)
  SharedDtor();
}

void YouMeIM_Command_PackageAck::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_PackageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_PackageAck& YouMeIM_Command_PackageAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_PackageAck* YouMeIM_Command_PackageAck::default_instance_ = NULL;

YouMeIM_Command_PackageAck* YouMeIM_Command_PackageAck::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_PackageAck* n = new YouMeIM_Command_PackageAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_PackageAck::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_PackageAck::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_PackageAck)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_PackageAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_PackageAck)
  return false;
#undef DO_
}

void YouMeIM_Command_PackageAck::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_PackageAck)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_PackageAck)
}

int YouMeIM_Command_PackageAck::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_PackageAck::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_PackageAck*>(&from));
}

void YouMeIM_Command_PackageAck::MergeFrom(const YouMeIM_Command_PackageAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_PackageAck::CopyFrom(const YouMeIM_Command_PackageAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_PackageAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_PackageAck::Swap(YouMeIM_Command_PackageAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_PackageAck::InternalSwap(YouMeIM_Command_PackageAck* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_PackageAck::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_PackageAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_PackageAck

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_PackageAck::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_PackageAck::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_PackageAck::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_PackageAck::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_PackageAck::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_PackageAck.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_PackageAck::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_PackageAck.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_PackageAck::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_PackageAck::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_PackageAck.msgHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ClientToServerAck::kMsgHeadFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ClientToServerAck::YouMeIM_Command_ClientToServerAck()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck)
}

void YouMeIM_Command_ClientToServerAck::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(
      ::YouMeIMProtocol::PacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::PacketHead*>(&::YouMeIMProtocol::PacketHead::default_instance());
#endif
}

YouMeIM_Command_ClientToServerAck::YouMeIM_Command_ClientToServerAck(const YouMeIM_Command_ClientToServerAck& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck)
}

void YouMeIM_Command_ClientToServerAck::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ClientToServerAck::~YouMeIM_Command_ClientToServerAck() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck)
  SharedDtor();
}

void YouMeIM_Command_ClientToServerAck::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_ClientToServerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ClientToServerAck& YouMeIM_Command_ClientToServerAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ClientToServerAck* YouMeIM_Command_ClientToServerAck::default_instance_ = NULL;

YouMeIM_Command_ClientToServerAck* YouMeIM_Command_ClientToServerAck::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ClientToServerAck* n = new YouMeIM_Command_ClientToServerAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ClientToServerAck::Clear() {
  if (has_msghead()) {
    if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ClientToServerAck::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.PacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck)
  return false;
#undef DO_
}

void YouMeIM_Command_ClientToServerAck::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck)
  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck)
}

int YouMeIM_Command_ClientToServerAck::ByteSize() const {
  int total_size = 0;

  // required .YouMeIMProtocol.PacketHead msgHead = 1;
  if (has_msghead()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ClientToServerAck::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ClientToServerAck*>(&from));
}

void YouMeIM_Command_ClientToServerAck::MergeFrom(const YouMeIM_Command_ClientToServerAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::PacketHead::MergeFrom(from.msghead());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ClientToServerAck::CopyFrom(const YouMeIM_Command_ClientToServerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ClientToServerAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ClientToServerAck::Swap(YouMeIM_Command_ClientToServerAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ClientToServerAck::InternalSwap(YouMeIM_Command_ClientToServerAck* other) {
  std::swap(msghead_, other->msghead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ClientToServerAck::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ClientToServerAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ClientToServerAck

// required .YouMeIMProtocol.PacketHead msgHead = 1;
bool YouMeIM_Command_ClientToServerAck::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ClientToServerAck::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ClientToServerAck::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ClientToServerAck::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::PacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::PacketHead& YouMeIM_Command_ClientToServerAck::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerAck::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck.msgHead)
  return msghead_;
}
::YouMeIMProtocol::PacketHead* YouMeIM_Command_ClientToServerAck::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::PacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ClientToServerAck::set_allocated_msghead(::YouMeIMProtocol::PacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ClientToServerAck.msgHead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ContactLogin::kMsgHeadFieldNumber;
const int YouMeIM_Command_ContactLogin::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ContactLogin::YouMeIM_Command_ContactLogin()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ContactLogin)
}

void YouMeIM_Command_ContactLogin::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_ContactLogin::YouMeIM_Command_ContactLogin(const YouMeIM_Command_ContactLogin& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ContactLogin)
}

void YouMeIM_Command_ContactLogin::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ContactLogin::~YouMeIM_Command_ContactLogin() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ContactLogin)
  SharedDtor();
}

void YouMeIM_Command_ContactLogin::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_ContactLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ContactLogin& YouMeIM_Command_ContactLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ContactLogin* YouMeIM_Command_ContactLogin::default_instance_ = NULL;

YouMeIM_Command_ContactLogin* YouMeIM_Command_ContactLogin::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ContactLogin* n = new YouMeIM_Command_ContactLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ContactLogin::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ContactLogin::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ContactLogin)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ContactLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ContactLogin)
  return false;
#undef DO_
}

void YouMeIM_Command_ContactLogin::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ContactLogin)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ContactLogin)
}

int YouMeIM_Command_ContactLogin::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_ContactLogin::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ContactLogin::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ContactLogin*>(&from));
}

void YouMeIM_Command_ContactLogin::MergeFrom(const YouMeIM_Command_ContactLogin& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ContactLogin::CopyFrom(const YouMeIM_Command_ContactLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ContactLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ContactLogin::Swap(YouMeIM_Command_ContactLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ContactLogin::InternalSwap(YouMeIM_Command_ContactLogin* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ContactLogin::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ContactLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ContactLogin

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_ContactLogin::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ContactLogin::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ContactLogin::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ContactLogin::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_ContactLogin::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ContactLogin.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ContactLogin::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ContactLogin.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ContactLogin::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ContactLogin::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ContactLogin.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_ContactLogin::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ContactLogin::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ContactLogin::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ContactLogin::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_ContactLogin::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ContactLogin.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ContactLogin::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ContactLogin.YOUMEID)
}
 void YouMeIM_Command_ContactLogin::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ContactLogin.YOUMEID)
}
 void YouMeIM_Command_ContactLogin::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ContactLogin.YOUMEID)
}
 ::std::string* YouMeIM_Command_ContactLogin::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ContactLogin.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ContactLogin::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ContactLogin::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ContactLogin.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeIM_Command_ContactLogout::kMsgHeadFieldNumber;
const int YouMeIM_Command_ContactLogout::kYOUMEIDFieldNumber;
#endif  // !_MSC_VER

YouMeIM_Command_ContactLogout::YouMeIM_Command_ContactLogout()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeIMProtocol.YouMeIM_Command_ContactLogout)
}

void YouMeIM_Command_ContactLogout::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(
      ::YouMeIMProtocol::ServerPacketHead::internal_default_instance());
#else
  msghead_ = const_cast< ::YouMeIMProtocol::ServerPacketHead*>(&::YouMeIMProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeIM_Command_ContactLogout::YouMeIM_Command_ContactLogout(const YouMeIM_Command_ContactLogout& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeIMProtocol.YouMeIM_Command_ContactLogout)
}

void YouMeIM_Command_ContactLogout::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msghead_ = NULL;
  youmeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeIM_Command_ContactLogout::~YouMeIM_Command_ContactLogout() {
  // @@protoc_insertion_point(destructor:YouMeIMProtocol.YouMeIM_Command_ContactLogout)
  SharedDtor();
}

void YouMeIM_Command_ContactLogout::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  youmeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msghead_;
  }
}

void YouMeIM_Command_ContactLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeIM_Command_ContactLogout& YouMeIM_Command_ContactLogout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_5fcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_5fcommon_2eproto();
#endif
  return *default_instance_;
}

YouMeIM_Command_ContactLogout* YouMeIM_Command_ContactLogout::default_instance_ = NULL;

YouMeIM_Command_ContactLogout* YouMeIM_Command_ContactLogout::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeIM_Command_ContactLogout* n = new YouMeIM_Command_ContactLogout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeIM_Command_ContactLogout::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msghead()) {
      if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
    }
    if (has_youmeid()) {
      youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeIM_Command_ContactLogout::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeIMProtocol.YouMeIM_Command_ContactLogout)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msghead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_YOUMEID;
        break;
      }

      // required string YOUMEID = 2;
      case 2: {
        if (tag == 18) {
         parse_YOUMEID:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youmeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeIMProtocol.YouMeIM_Command_ContactLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeIMProtocol.YouMeIM_Command_ContactLogout)
  return false;
#undef DO_
}

void YouMeIM_Command_ContactLogout::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeIMProtocol.YouMeIM_Command_ContactLogout)
  // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
  if (has_msghead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->msghead_, output);
  }

  // required string YOUMEID = 2;
  if (has_youmeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->youmeid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeIMProtocol.YouMeIM_Command_ContactLogout)
}

int YouMeIM_Command_ContactLogout::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msghead()) {
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);
  }

  if (has_youmeid()) {
    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());
  }

  return total_size;
}
int YouMeIM_Command_ContactLogout::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msghead_);

    // required string YOUMEID = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->youmeid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeIM_Command_ContactLogout::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeIM_Command_ContactLogout*>(&from));
}

void YouMeIM_Command_ContactLogout::MergeFrom(const YouMeIM_Command_ContactLogout& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msghead()) {
      mutable_msghead()->::YouMeIMProtocol::ServerPacketHead::MergeFrom(from.msghead());
    }
    if (from.has_youmeid()) {
      set_has_youmeid();
      youmeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.youmeid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeIM_Command_ContactLogout::CopyFrom(const YouMeIM_Command_ContactLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeIM_Command_ContactLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msghead()) {
    if (!this->msghead_->IsInitialized()) return false;
  }
  return true;
}

void YouMeIM_Command_ContactLogout::Swap(YouMeIM_Command_ContactLogout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeIM_Command_ContactLogout::InternalSwap(YouMeIM_Command_ContactLogout* other) {
  std::swap(msghead_, other->msghead_);
  youmeid_.Swap(&other->youmeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeIM_Command_ContactLogout::GetTypeName() const {
  return "YouMeIMProtocol.YouMeIM_Command_ContactLogout";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeIM_Command_ContactLogout

// required .YouMeIMProtocol.ServerPacketHead msgHead = 1;
bool YouMeIM_Command_ContactLogout::has_msghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeIM_Command_ContactLogout::set_has_msghead() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeIM_Command_ContactLogout::clear_has_msghead() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeIM_Command_ContactLogout::clear_msghead() {
  if (msghead_ != NULL) msghead_->::YouMeIMProtocol::ServerPacketHead::Clear();
  clear_has_msghead();
}
const ::YouMeIMProtocol::ServerPacketHead& YouMeIM_Command_ContactLogout::msghead() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ContactLogout.msgHead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msghead_ != NULL ? *msghead_ : *default_instance().msghead_;
#else
  return msghead_ != NULL ? *msghead_ : *default_instance_->msghead_;
#endif
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ContactLogout::mutable_msghead() {
  set_has_msghead();
  if (msghead_ == NULL) {
    msghead_ = new ::YouMeIMProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ContactLogout.msgHead)
  return msghead_;
}
::YouMeIMProtocol::ServerPacketHead* YouMeIM_Command_ContactLogout::release_msghead() {
  clear_has_msghead();
  ::YouMeIMProtocol::ServerPacketHead* temp = msghead_;
  msghead_ = NULL;
  return temp;
}
void YouMeIM_Command_ContactLogout::set_allocated_msghead(::YouMeIMProtocol::ServerPacketHead* msghead) {
  delete msghead_;
  msghead_ = msghead;
  if (msghead) {
    set_has_msghead();
  } else {
    clear_has_msghead();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ContactLogout.msgHead)
}

// required string YOUMEID = 2;
bool YouMeIM_Command_ContactLogout::has_youmeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeIM_Command_ContactLogout::set_has_youmeid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeIM_Command_ContactLogout::clear_has_youmeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeIM_Command_ContactLogout::clear_youmeid() {
  youmeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youmeid();
}
 const ::std::string& YouMeIM_Command_ContactLogout::youmeid() const {
  // @@protoc_insertion_point(field_get:YouMeIMProtocol.YouMeIM_Command_ContactLogout.YOUMEID)
  return youmeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ContactLogout::set_youmeid(const ::std::string& value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeIMProtocol.YouMeIM_Command_ContactLogout.YOUMEID)
}
 void YouMeIM_Command_ContactLogout::set_youmeid(const char* value) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeIMProtocol.YouMeIM_Command_ContactLogout.YOUMEID)
}
 void YouMeIM_Command_ContactLogout::set_youmeid(const char* value, size_t size) {
  set_has_youmeid();
  youmeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeIMProtocol.YouMeIM_Command_ContactLogout.YOUMEID)
}
 ::std::string* YouMeIM_Command_ContactLogout::mutable_youmeid() {
  set_has_youmeid();
  // @@protoc_insertion_point(field_mutable:YouMeIMProtocol.YouMeIM_Command_ContactLogout.YOUMEID)
  return youmeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeIM_Command_ContactLogout::release_youmeid() {
  clear_has_youmeid();
  return youmeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeIM_Command_ContactLogout::set_allocated_youmeid(::std::string* youmeid) {
  if (youmeid != NULL) {
    set_has_youmeid();
  } else {
    clear_has_youmeid();
  }
  youmeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), youmeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeIMProtocol.YouMeIM_Command_ContactLogout.YOUMEID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeIMProtocol

// @@protoc_insertion_point(global_scope)
