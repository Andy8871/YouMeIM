// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YouMeCommonProtocol {

void protobuf_ShutdownFile_common_2eproto() {
  delete NameValue::default_instance_;
  delete PacketHead::default_instance_;
  delete ReqHead::default_instance_;
  delete ServerPacketHead::default_instance_;
  delete ServerReqHead::default_instance_;
  delete SDKValidateRequest::default_instance_;
  delete SDKValidateResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_common_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NameValue::default_instance_ = new NameValue();
  PacketHead::default_instance_ = new PacketHead();
  ReqHead::default_instance_ = new ReqHead();
  ServerPacketHead::default_instance_ = new ServerPacketHead();
  ServerReqHead::default_instance_ = new ServerReqHead();
  SDKValidateRequest::default_instance_ = new SDKValidateRequest();
  SDKValidateResponse::default_instance_ = new SDKValidateResponse();
  NameValue::default_instance_->InitAsDefaultInstance();
  PacketHead::default_instance_->InitAsDefaultInstance();
  ReqHead::default_instance_->InitAsDefaultInstance();
  ServerPacketHead::default_instance_->InitAsDefaultInstance();
  ServerReqHead::default_instance_->InitAsDefaultInstance();
  SDKValidateRequest::default_instance_->InitAsDefaultInstance();
  SDKValidateResponse::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_common_2eproto_once_);
void protobuf_AddDesc_common_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_common_2eproto_once_,
                 &protobuf_AddDesc_common_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
#endif
bool MSG_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

bool Device_Platform_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool NetworkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool NAME_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int NameValue::kNameFieldNumber;
const int NameValue::kValueFieldNumber;
const int NameValue::kTypeFieldNumber;
#endif  // !_MSC_VER

NameValue::NameValue()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeCommonProtocol.NameValue)
}

void NameValue::InitAsDefaultInstance() {
}

NameValue::NameValue(const NameValue& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeCommonProtocol.NameValue)
}

void NameValue::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameValue::~NameValue() {
  // @@protoc_insertion_point(destructor:YouMeCommonProtocol.NameValue)
  SharedDtor();
}

void NameValue::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NameValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NameValue& NameValue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

NameValue* NameValue::default_instance_ = NULL;

NameValue* NameValue::New(::youmecommon::protobuf::Arena* arena) const {
  NameValue* n = new NameValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameValue::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NameValue::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeCommonProtocol.NameValue)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .YouMeCommonProtocol.NAME_TYPE type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeCommonProtocol::NAME_TYPE_IsValid(value)) {
            set_type(static_cast< ::YouMeCommonProtocol::NAME_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeCommonProtocol.NameValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeCommonProtocol.NameValue)
  return false;
#undef DO_
}

void NameValue::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeCommonProtocol.NameValue)
  // required string name = 1;
  if (has_name()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // required .YouMeCommonProtocol.NAME_TYPE type = 3;
  if (has_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeCommonProtocol.NameValue)
}

int NameValue::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_type()) {
    // required .YouMeCommonProtocol.NAME_TYPE type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int NameValue::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required .YouMeCommonProtocol.NAME_TYPE type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameValue::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const NameValue*>(&from));
}

void NameValue::MergeFrom(const NameValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NameValue::CopyFrom(const NameValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NameValue::Swap(NameValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameValue::InternalSwap(NameValue* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NameValue::GetTypeName() const {
  return "YouMeCommonProtocol.NameValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameValue

// required string name = 1;
bool NameValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NameValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NameValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NameValue::clear_name() {
  name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& NameValue::name() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.NameValue.name)
  return name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.NameValue.name)
}
 void NameValue::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.NameValue.name)
}
 void NameValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.NameValue.name)
}
 ::std::string* NameValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.NameValue.name)
  return name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameValue::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.NameValue.name)
}

// required string value = 2;
bool NameValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NameValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void NameValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void NameValue::clear_value() {
  value_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& NameValue::value() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.NameValue.value)
  return value_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.NameValue.value)
}
 void NameValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.NameValue.value)
}
 void NameValue::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.NameValue.value)
}
 ::std::string* NameValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.NameValue.value)
  return value_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameValue::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.NameValue.value)
}

// required .YouMeCommonProtocol.NAME_TYPE type = 3;
bool NameValue::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NameValue::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void NameValue::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void NameValue::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::YouMeCommonProtocol::NAME_TYPE NameValue::type() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.NameValue.type)
  return static_cast< ::YouMeCommonProtocol::NAME_TYPE >(type_);
}
 void NameValue::set_type(::YouMeCommonProtocol::NAME_TYPE value) {
  assert(::YouMeCommonProtocol::NAME_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.NameValue.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PacketHead::kMsgtypeFieldNumber;
const int PacketHead::kMsgversionFieldNumber;
const int PacketHead::kPlatformFieldNumber;
const int PacketHead::kBrandFieldNumber;
const int PacketHead::kSysVersionFieldNumber;
const int PacketHead::kYmSdkVersionFieldNumber;
const int PacketHead::kCpuArchFieldNumber;
const int PacketHead::kPackageNameFieldNumber;
const int PacketHead::kIdentifyFieldNumber;
const int PacketHead::kAppKeyFieldNumber;
const int PacketHead::kSDKNameFieldNumber;
const int PacketHead::kModelFieldNumber;
const int PacketHead::kNetworkTypeFieldNumber;
const int PacketHead::kCPUChipFieldNumber;
#endif  // !_MSC_VER

PacketHead::PacketHead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeCommonProtocol.PacketHead)
}

void PacketHead::InitAsDefaultInstance() {
}

PacketHead::PacketHead(const PacketHead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeCommonProtocol.PacketHead)
}

void PacketHead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  msgversion_ = 0;
  platform_ = 0;
  brand_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sysversion_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ymsdkversion_ = 0;
  cpuarch_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  packagename_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  identify_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkname_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  networktype_ = 0;
  cpuchip_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketHead::~PacketHead() {
  // @@protoc_insertion_point(destructor:YouMeCommonProtocol.PacketHead)
  SharedDtor();
}

void PacketHead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sysversion_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cpuarch_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  packagename_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  identify_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkname_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cpuchip_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PacketHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PacketHead& PacketHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

PacketHead* PacketHead::default_instance_ = NULL;

PacketHead* PacketHead::New(::youmecommon::protobuf::Arena* arena) const {
  PacketHead* n = new PacketHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketHead::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PacketHead*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(msgtype_, msgversion_);
    ZR_(platform_, ymsdkversion_);
    if (has_brand()) {
      brand_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sysversion()) {
      sysversion_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cpuarch()) {
      cpuarch_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_packagename()) {
      packagename_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_identify()) {
      identify_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_appkey()) {
      appkey_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sdkname()) {
      sdkname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model()) {
      model_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    networktype_ = 0;
    if (has_cpuchip()) {
      cpuchip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PacketHead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeCommonProtocol.PacketHead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgversion;
        break;
      }

      // required int32 msgversion = 2;
      case 2: {
        if (tag == 16) {
         parse_msgversion:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgversion_)));
          set_has_msgversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // required .YouMeCommonProtocol.Device_Platform platform = 3;
      case 3: {
        if (tag == 24) {
         parse_platform:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeCommonProtocol::Device_Platform_IsValid(value)) {
            set_platform(static_cast< ::YouMeCommonProtocol::Device_Platform >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Brand;
        break;
      }

      // optional string Brand = 4;
      case 4: {
        if (tag == 34) {
         parse_Brand:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SysVersion;
        break;
      }

      // optional string SysVersion = 5;
      case 5: {
        if (tag == 42) {
         parse_SysVersion:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sysversion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_YmSdkVersion;
        break;
      }

      // optional int32 YmSdkVersion = 6;
      case 6: {
        if (tag == 48) {
         parse_YmSdkVersion:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymsdkversion_)));
          set_has_ymsdkversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CpuArch;
        break;
      }

      // optional string CpuArch = 7;
      case 7: {
        if (tag == 58) {
         parse_CpuArch:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuarch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_PackageName;
        break;
      }

      // optional string PackageName = 8;
      case 8: {
        if (tag == 66) {
         parse_PackageName:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packagename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Identify;
        break;
      }

      // optional string Identify = 9;
      case 9: {
        if (tag == 74) {
         parse_Identify:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_AppKey;
        break;
      }

      // optional string AppKey = 10;
      case 10: {
        if (tag == 82) {
         parse_AppKey:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_SDKName;
        break;
      }

      // optional string SDKName = 11;
      case 11: {
        if (tag == 90) {
         parse_SDKName:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdkname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Model;
        break;
      }

      // optional string Model = 12;
      case 12: {
        if (tag == 98) {
         parse_Model:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_NetworkType;
        break;
      }

      // optional .YouMeCommonProtocol.NetworkType NetworkType = 13;
      case 13: {
        if (tag == 104) {
         parse_NetworkType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeCommonProtocol::NetworkType_IsValid(value)) {
            set_networktype(static_cast< ::YouMeCommonProtocol::NetworkType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_CPUChip;
        break;
      }

      // optional string CPUChip = 14;
      case 14: {
        if (tag == 114) {
         parse_CPUChip:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuchip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeCommonProtocol.PacketHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeCommonProtocol.PacketHead)
  return false;
#undef DO_
}

void PacketHead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeCommonProtocol.PacketHead)
  // required int32 msgtype = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgtype(), output);
  }

  // required int32 msgversion = 2;
  if (has_msgversion()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgversion(), output);
  }

  // required .YouMeCommonProtocol.Device_Platform platform = 3;
  if (has_platform()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platform(), output);
  }

  // optional string Brand = 4;
  if (has_brand()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->brand(), output);
  }

  // optional string SysVersion = 5;
  if (has_sysversion()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sysversion(), output);
  }

  // optional int32 YmSdkVersion = 6;
  if (has_ymsdkversion()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->ymsdkversion(), output);
  }

  // optional string CpuArch = 7;
  if (has_cpuarch()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cpuarch(), output);
  }

  // optional string PackageName = 8;
  if (has_packagename()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->packagename(), output);
  }

  // optional string Identify = 9;
  if (has_identify()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->identify(), output);
  }

  // optional string AppKey = 10;
  if (has_appkey()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->appkey(), output);
  }

  // optional string SDKName = 11;
  if (has_sdkname()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sdkname(), output);
  }

  // optional string Model = 12;
  if (has_model()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->model(), output);
  }

  // optional .YouMeCommonProtocol.NetworkType NetworkType = 13;
  if (has_networktype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->networktype(), output);
  }

  // optional string CPUChip = 14;
  if (has_cpuchip()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->cpuchip(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeCommonProtocol.PacketHead)
}

int PacketHead::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required int32 msgtype = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());
  }

  if (has_msgversion()) {
    // required int32 msgversion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgversion());
  }

  if (has_platform()) {
    // required .YouMeCommonProtocol.Device_Platform platform = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->platform());
  }

  return total_size;
}
int PacketHead::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 msgtype = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());

    // required int32 msgversion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgversion());

    // required .YouMeCommonProtocol.Device_Platform platform = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->platform());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional string Brand = 4;
    if (has_brand()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string SysVersion = 5;
    if (has_sysversion()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->sysversion());
    }

    // optional int32 YmSdkVersion = 6;
    if (has_ymsdkversion()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->ymsdkversion());
    }

    // optional string CpuArch = 7;
    if (has_cpuarch()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->cpuarch());
    }

    // optional string PackageName = 8;
    if (has_packagename()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->packagename());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional string Identify = 9;
    if (has_identify()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->identify());
    }

    // optional string AppKey = 10;
    if (has_appkey()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->appkey());
    }

    // optional string SDKName = 11;
    if (has_sdkname()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->sdkname());
    }

    // optional string Model = 12;
    if (has_model()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional .YouMeCommonProtocol.NetworkType NetworkType = 13;
    if (has_networktype()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->networktype());
    }

    // optional string CPUChip = 14;
    if (has_cpuchip()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->cpuchip());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const PacketHead*>(&from));
}

void PacketHead::MergeFrom(const PacketHead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgversion()) {
      set_msgversion(from.msgversion());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_brand()) {
      set_has_brand();
      brand_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
    }
    if (from.has_sysversion()) {
      set_has_sysversion();
      sysversion_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sysversion_);
    }
    if (from.has_ymsdkversion()) {
      set_ymsdkversion(from.ymsdkversion());
    }
    if (from.has_cpuarch()) {
      set_has_cpuarch();
      cpuarch_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpuarch_);
    }
    if (from.has_packagename()) {
      set_has_packagename();
      packagename_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.packagename_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_identify()) {
      set_has_identify();
      identify_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.identify_);
    }
    if (from.has_appkey()) {
      set_has_appkey();
      appkey_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
    }
    if (from.has_sdkname()) {
      set_has_sdkname();
      sdkname_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdkname_);
    }
    if (from.has_model()) {
      set_has_model();
      model_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (from.has_networktype()) {
      set_networktype(from.networktype());
    }
    if (from.has_cpuchip()) {
      set_has_cpuchip();
      cpuchip_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpuchip_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PacketHead::CopyFrom(const PacketHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PacketHead::Swap(PacketHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketHead::InternalSwap(PacketHead* other) {
  std::swap(msgtype_, other->msgtype_);
  std::swap(msgversion_, other->msgversion_);
  std::swap(platform_, other->platform_);
  brand_.Swap(&other->brand_);
  sysversion_.Swap(&other->sysversion_);
  std::swap(ymsdkversion_, other->ymsdkversion_);
  cpuarch_.Swap(&other->cpuarch_);
  packagename_.Swap(&other->packagename_);
  identify_.Swap(&other->identify_);
  appkey_.Swap(&other->appkey_);
  sdkname_.Swap(&other->sdkname_);
  model_.Swap(&other->model_);
  std::swap(networktype_, other->networktype_);
  cpuchip_.Swap(&other->cpuchip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PacketHead::GetTypeName() const {
  return "YouMeCommonProtocol.PacketHead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketHead

// required int32 msgtype = 1;
bool PacketHead::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketHead::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketHead::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketHead::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::youmecommon::protobuf::int32 PacketHead::msgtype() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.msgtype)
  return msgtype_;
}
 void PacketHead::set_msgtype(::youmecommon::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.msgtype)
}

// required int32 msgversion = 2;
bool PacketHead::has_msgversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketHead::set_has_msgversion() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketHead::clear_has_msgversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketHead::clear_msgversion() {
  msgversion_ = 0;
  clear_has_msgversion();
}
 ::youmecommon::protobuf::int32 PacketHead::msgversion() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.msgversion)
  return msgversion_;
}
 void PacketHead::set_msgversion(::youmecommon::protobuf::int32 value) {
  set_has_msgversion();
  msgversion_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.msgversion)
}

// required .YouMeCommonProtocol.Device_Platform platform = 3;
bool PacketHead::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketHead::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketHead::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketHead::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
 ::YouMeCommonProtocol::Device_Platform PacketHead::platform() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.platform)
  return static_cast< ::YouMeCommonProtocol::Device_Platform >(platform_);
}
 void PacketHead::set_platform(::YouMeCommonProtocol::Device_Platform value) {
  assert(::YouMeCommonProtocol::Device_Platform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.platform)
}

// optional string Brand = 4;
bool PacketHead::has_brand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketHead::set_has_brand() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketHead::clear_has_brand() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketHead::clear_brand() {
  brand_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand();
}
 const ::std::string& PacketHead::brand() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.Brand)
  return brand_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_brand(const ::std::string& value) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.Brand)
}
 void PacketHead::set_brand(const char* value) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.PacketHead.Brand)
}
 void PacketHead::set_brand(const char* value, size_t size) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.PacketHead.Brand)
}
 ::std::string* PacketHead::mutable_brand() {
  set_has_brand();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.PacketHead.Brand)
  return brand_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_brand() {
  clear_has_brand();
  return brand_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    set_has_brand();
  } else {
    clear_has_brand();
  }
  brand_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.PacketHead.Brand)
}

// optional string SysVersion = 5;
bool PacketHead::has_sysversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PacketHead::set_has_sysversion() {
  _has_bits_[0] |= 0x00000010u;
}
void PacketHead::clear_has_sysversion() {
  _has_bits_[0] &= ~0x00000010u;
}
void PacketHead::clear_sysversion() {
  sysversion_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sysversion();
}
 const ::std::string& PacketHead::sysversion() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.SysVersion)
  return sysversion_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_sysversion(const ::std::string& value) {
  set_has_sysversion();
  sysversion_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.SysVersion)
}
 void PacketHead::set_sysversion(const char* value) {
  set_has_sysversion();
  sysversion_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.PacketHead.SysVersion)
}
 void PacketHead::set_sysversion(const char* value, size_t size) {
  set_has_sysversion();
  sysversion_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.PacketHead.SysVersion)
}
 ::std::string* PacketHead::mutable_sysversion() {
  set_has_sysversion();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.PacketHead.SysVersion)
  return sysversion_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_sysversion() {
  clear_has_sysversion();
  return sysversion_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_sysversion(::std::string* sysversion) {
  if (sysversion != NULL) {
    set_has_sysversion();
  } else {
    clear_has_sysversion();
  }
  sysversion_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sysversion);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.PacketHead.SysVersion)
}

// optional int32 YmSdkVersion = 6;
bool PacketHead::has_ymsdkversion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PacketHead::set_has_ymsdkversion() {
  _has_bits_[0] |= 0x00000020u;
}
void PacketHead::clear_has_ymsdkversion() {
  _has_bits_[0] &= ~0x00000020u;
}
void PacketHead::clear_ymsdkversion() {
  ymsdkversion_ = 0;
  clear_has_ymsdkversion();
}
 ::youmecommon::protobuf::int32 PacketHead::ymsdkversion() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.YmSdkVersion)
  return ymsdkversion_;
}
 void PacketHead::set_ymsdkversion(::youmecommon::protobuf::int32 value) {
  set_has_ymsdkversion();
  ymsdkversion_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.YmSdkVersion)
}

// optional string CpuArch = 7;
bool PacketHead::has_cpuarch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PacketHead::set_has_cpuarch() {
  _has_bits_[0] |= 0x00000040u;
}
void PacketHead::clear_has_cpuarch() {
  _has_bits_[0] &= ~0x00000040u;
}
void PacketHead::clear_cpuarch() {
  cpuarch_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpuarch();
}
 const ::std::string& PacketHead::cpuarch() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.CpuArch)
  return cpuarch_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_cpuarch(const ::std::string& value) {
  set_has_cpuarch();
  cpuarch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.CpuArch)
}
 void PacketHead::set_cpuarch(const char* value) {
  set_has_cpuarch();
  cpuarch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.PacketHead.CpuArch)
}
 void PacketHead::set_cpuarch(const char* value, size_t size) {
  set_has_cpuarch();
  cpuarch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.PacketHead.CpuArch)
}
 ::std::string* PacketHead::mutable_cpuarch() {
  set_has_cpuarch();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.PacketHead.CpuArch)
  return cpuarch_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_cpuarch() {
  clear_has_cpuarch();
  return cpuarch_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_cpuarch(::std::string* cpuarch) {
  if (cpuarch != NULL) {
    set_has_cpuarch();
  } else {
    clear_has_cpuarch();
  }
  cpuarch_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), cpuarch);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.PacketHead.CpuArch)
}

// optional string PackageName = 8;
bool PacketHead::has_packagename() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PacketHead::set_has_packagename() {
  _has_bits_[0] |= 0x00000080u;
}
void PacketHead::clear_has_packagename() {
  _has_bits_[0] &= ~0x00000080u;
}
void PacketHead::clear_packagename() {
  packagename_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packagename();
}
 const ::std::string& PacketHead::packagename() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.PackageName)
  return packagename_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_packagename(const ::std::string& value) {
  set_has_packagename();
  packagename_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.PackageName)
}
 void PacketHead::set_packagename(const char* value) {
  set_has_packagename();
  packagename_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.PacketHead.PackageName)
}
 void PacketHead::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  packagename_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.PacketHead.PackageName)
}
 ::std::string* PacketHead::mutable_packagename() {
  set_has_packagename();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.PacketHead.PackageName)
  return packagename_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_packagename() {
  clear_has_packagename();
  return packagename_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_packagename(::std::string* packagename) {
  if (packagename != NULL) {
    set_has_packagename();
  } else {
    clear_has_packagename();
  }
  packagename_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), packagename);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.PacketHead.PackageName)
}

// optional string Identify = 9;
bool PacketHead::has_identify() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PacketHead::set_has_identify() {
  _has_bits_[0] |= 0x00000100u;
}
void PacketHead::clear_has_identify() {
  _has_bits_[0] &= ~0x00000100u;
}
void PacketHead::clear_identify() {
  identify_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identify();
}
 const ::std::string& PacketHead::identify() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.Identify)
  return identify_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_identify(const ::std::string& value) {
  set_has_identify();
  identify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.Identify)
}
 void PacketHead::set_identify(const char* value) {
  set_has_identify();
  identify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.PacketHead.Identify)
}
 void PacketHead::set_identify(const char* value, size_t size) {
  set_has_identify();
  identify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.PacketHead.Identify)
}
 ::std::string* PacketHead::mutable_identify() {
  set_has_identify();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.PacketHead.Identify)
  return identify_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_identify() {
  clear_has_identify();
  return identify_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_identify(::std::string* identify) {
  if (identify != NULL) {
    set_has_identify();
  } else {
    clear_has_identify();
  }
  identify_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), identify);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.PacketHead.Identify)
}

// optional string AppKey = 10;
bool PacketHead::has_appkey() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PacketHead::set_has_appkey() {
  _has_bits_[0] |= 0x00000200u;
}
void PacketHead::clear_has_appkey() {
  _has_bits_[0] &= ~0x00000200u;
}
void PacketHead::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appkey();
}
 const ::std::string& PacketHead::appkey() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.AppKey)
  return appkey_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_appkey(const ::std::string& value) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.AppKey)
}
 void PacketHead::set_appkey(const char* value) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.PacketHead.AppKey)
}
 void PacketHead::set_appkey(const char* value, size_t size) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.PacketHead.AppKey)
}
 ::std::string* PacketHead::mutable_appkey() {
  set_has_appkey();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.PacketHead.AppKey)
  return appkey_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_appkey() {
  clear_has_appkey();
  return appkey_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    set_has_appkey();
  } else {
    clear_has_appkey();
  }
  appkey_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.PacketHead.AppKey)
}

// optional string SDKName = 11;
bool PacketHead::has_sdkname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PacketHead::set_has_sdkname() {
  _has_bits_[0] |= 0x00000400u;
}
void PacketHead::clear_has_sdkname() {
  _has_bits_[0] &= ~0x00000400u;
}
void PacketHead::clear_sdkname() {
  sdkname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdkname();
}
 const ::std::string& PacketHead::sdkname() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.SDKName)
  return sdkname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_sdkname(const ::std::string& value) {
  set_has_sdkname();
  sdkname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.SDKName)
}
 void PacketHead::set_sdkname(const char* value) {
  set_has_sdkname();
  sdkname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.PacketHead.SDKName)
}
 void PacketHead::set_sdkname(const char* value, size_t size) {
  set_has_sdkname();
  sdkname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.PacketHead.SDKName)
}
 ::std::string* PacketHead::mutable_sdkname() {
  set_has_sdkname();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.PacketHead.SDKName)
  return sdkname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_sdkname() {
  clear_has_sdkname();
  return sdkname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_sdkname(::std::string* sdkname) {
  if (sdkname != NULL) {
    set_has_sdkname();
  } else {
    clear_has_sdkname();
  }
  sdkname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sdkname);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.PacketHead.SDKName)
}

// optional string Model = 12;
bool PacketHead::has_model() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PacketHead::set_has_model() {
  _has_bits_[0] |= 0x00000800u;
}
void PacketHead::clear_has_model() {
  _has_bits_[0] &= ~0x00000800u;
}
void PacketHead::clear_model() {
  model_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
 const ::std::string& PacketHead::model() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.Model)
  return model_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.Model)
}
 void PacketHead::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.PacketHead.Model)
}
 void PacketHead::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.PacketHead.Model)
}
 ::std::string* PacketHead::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.PacketHead.Model)
  return model_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_model() {
  clear_has_model();
  return model_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.PacketHead.Model)
}

// optional .YouMeCommonProtocol.NetworkType NetworkType = 13;
bool PacketHead::has_networktype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PacketHead::set_has_networktype() {
  _has_bits_[0] |= 0x00001000u;
}
void PacketHead::clear_has_networktype() {
  _has_bits_[0] &= ~0x00001000u;
}
void PacketHead::clear_networktype() {
  networktype_ = 0;
  clear_has_networktype();
}
 ::YouMeCommonProtocol::NetworkType PacketHead::networktype() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.NetworkType)
  return static_cast< ::YouMeCommonProtocol::NetworkType >(networktype_);
}
 void PacketHead::set_networktype(::YouMeCommonProtocol::NetworkType value) {
  assert(::YouMeCommonProtocol::NetworkType_IsValid(value));
  set_has_networktype();
  networktype_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.NetworkType)
}

// optional string CPUChip = 14;
bool PacketHead::has_cpuchip() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PacketHead::set_has_cpuchip() {
  _has_bits_[0] |= 0x00002000u;
}
void PacketHead::clear_has_cpuchip() {
  _has_bits_[0] &= ~0x00002000u;
}
void PacketHead::clear_cpuchip() {
  cpuchip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpuchip();
}
 const ::std::string& PacketHead::cpuchip() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.PacketHead.CPUChip)
  return cpuchip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_cpuchip(const ::std::string& value) {
  set_has_cpuchip();
  cpuchip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.PacketHead.CPUChip)
}
 void PacketHead::set_cpuchip(const char* value) {
  set_has_cpuchip();
  cpuchip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.PacketHead.CPUChip)
}
 void PacketHead::set_cpuchip(const char* value, size_t size) {
  set_has_cpuchip();
  cpuchip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.PacketHead.CPUChip)
}
 ::std::string* PacketHead::mutable_cpuchip() {
  set_has_cpuchip();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.PacketHead.CPUChip)
  return cpuchip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketHead::release_cpuchip() {
  clear_has_cpuchip();
  return cpuchip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketHead::set_allocated_cpuchip(::std::string* cpuchip) {
  if (cpuchip != NULL) {
    set_has_cpuchip();
  } else {
    clear_has_cpuchip();
  }
  cpuchip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), cpuchip);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.PacketHead.CPUChip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ReqHead::kHeadFieldNumber;
#endif  // !_MSC_VER

ReqHead::ReqHead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeCommonProtocol.ReqHead)
}

void ReqHead::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeCommonProtocol::PacketHead*>(
      ::YouMeCommonProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeCommonProtocol::PacketHead*>(&::YouMeCommonProtocol::PacketHead::default_instance());
#endif
}

ReqHead::ReqHead(const ReqHead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeCommonProtocol.ReqHead)
}

void ReqHead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHead::~ReqHead() {
  // @@protoc_insertion_point(destructor:YouMeCommonProtocol.ReqHead)
  SharedDtor();
}

void ReqHead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void ReqHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReqHead& ReqHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

ReqHead* ReqHead::default_instance_ = NULL;

ReqHead* ReqHead::New(::youmecommon::protobuf::Arena* arena) const {
  ReqHead* n = new ReqHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHead::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeCommonProtocol::PacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReqHead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeCommonProtocol.ReqHead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeCommonProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeCommonProtocol.ReqHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeCommonProtocol.ReqHead)
  return false;
#undef DO_
}

void ReqHead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeCommonProtocol.ReqHead)
  // required .YouMeCommonProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeCommonProtocol.ReqHead)
}

int ReqHead::ByteSize() const {
  int total_size = 0;

  // required .YouMeCommonProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ReqHead*>(&from));
}

void ReqHead::MergeFrom(const ReqHead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeCommonProtocol::PacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReqHead::CopyFrom(const ReqHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void ReqHead::Swap(ReqHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHead::InternalSwap(ReqHead* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReqHead::GetTypeName() const {
  return "YouMeCommonProtocol.ReqHead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqHead

// required .YouMeCommonProtocol.PacketHead head = 1;
bool ReqHead::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqHead::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqHead::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqHead::clear_head() {
  if (head_ != NULL) head_->::YouMeCommonProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeCommonProtocol::PacketHead& ReqHead::head() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.ReqHead.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeCommonProtocol::PacketHead* ReqHead::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeCommonProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.ReqHead.head)
  return head_;
}
::YouMeCommonProtocol::PacketHead* ReqHead::release_head() {
  clear_has_head();
  ::YouMeCommonProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void ReqHead::set_allocated_head(::YouMeCommonProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.ReqHead.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerPacketHead::kMsgtypeFieldNumber;
const int ServerPacketHead::kMsgversionFieldNumber;
const int ServerPacketHead::kMsgSerialNumFieldNumber;
const int ServerPacketHead::kCodeFieldNumber;
#endif  // !_MSC_VER

ServerPacketHead::ServerPacketHead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeCommonProtocol.ServerPacketHead)
}

void ServerPacketHead::InitAsDefaultInstance() {
}

ServerPacketHead::ServerPacketHead(const ServerPacketHead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeCommonProtocol.ServerPacketHead)
}

void ServerPacketHead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  msgversion_ = 0;
  msgserialnum_ = GOOGLE_LONGLONG(0);
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPacketHead::~ServerPacketHead() {
  // @@protoc_insertion_point(destructor:YouMeCommonProtocol.ServerPacketHead)
  SharedDtor();
}

void ServerPacketHead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerPacketHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerPacketHead& ServerPacketHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

ServerPacketHead* ServerPacketHead::default_instance_ = NULL;

ServerPacketHead* ServerPacketHead::New(::youmecommon::protobuf::Arena* arena) const {
  ServerPacketHead* n = new ServerPacketHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerPacketHead::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerPacketHead*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msgtype_, code_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerPacketHead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeCommonProtocol.ServerPacketHead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgversion;
        break;
      }

      // required int32 msgversion = 2;
      case 2: {
        if (tag == 16) {
         parse_msgversion:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgversion_)));
          set_has_msgversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgSerialNum;
        break;
      }

      // required int64 msgSerialNum = 3;
      case 3: {
        if (tag == 24) {
         parse_msgSerialNum:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgserialnum_)));
          set_has_msgserialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // required int32 code = 4;
      case 4: {
        if (tag == 32) {
         parse_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeCommonProtocol.ServerPacketHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeCommonProtocol.ServerPacketHead)
  return false;
#undef DO_
}

void ServerPacketHead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeCommonProtocol.ServerPacketHead)
  // required int32 msgtype = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgtype(), output);
  }

  // required int32 msgversion = 2;
  if (has_msgversion()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgversion(), output);
  }

  // required int64 msgSerialNum = 3;
  if (has_msgserialnum()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(3, this->msgserialnum(), output);
  }

  // required int32 code = 4;
  if (has_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeCommonProtocol.ServerPacketHead)
}

int ServerPacketHead::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required int32 msgtype = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());
  }

  if (has_msgversion()) {
    // required int32 msgversion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgversion());
  }

  if (has_msgserialnum()) {
    // required int64 msgSerialNum = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->msgserialnum());
  }

  if (has_code()) {
    // required int32 code = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  return total_size;
}
int ServerPacketHead::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 msgtype = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());

    // required int32 msgversion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msgversion());

    // required int64 msgSerialNum = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->msgserialnum());

    // required int32 code = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPacketHead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ServerPacketHead*>(&from));
}

void ServerPacketHead::MergeFrom(const ServerPacketHead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgversion()) {
      set_msgversion(from.msgversion());
    }
    if (from.has_msgserialnum()) {
      set_msgserialnum(from.msgserialnum());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerPacketHead::CopyFrom(const ServerPacketHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPacketHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerPacketHead::Swap(ServerPacketHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerPacketHead::InternalSwap(ServerPacketHead* other) {
  std::swap(msgtype_, other->msgtype_);
  std::swap(msgversion_, other->msgversion_);
  std::swap(msgserialnum_, other->msgserialnum_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerPacketHead::GetTypeName() const {
  return "YouMeCommonProtocol.ServerPacketHead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerPacketHead

// required int32 msgtype = 1;
bool ServerPacketHead::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerPacketHead::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerPacketHead::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerPacketHead::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::youmecommon::protobuf::int32 ServerPacketHead::msgtype() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.ServerPacketHead.msgtype)
  return msgtype_;
}
 void ServerPacketHead::set_msgtype(::youmecommon::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.ServerPacketHead.msgtype)
}

// required int32 msgversion = 2;
bool ServerPacketHead::has_msgversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerPacketHead::set_has_msgversion() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerPacketHead::clear_has_msgversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerPacketHead::clear_msgversion() {
  msgversion_ = 0;
  clear_has_msgversion();
}
 ::youmecommon::protobuf::int32 ServerPacketHead::msgversion() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.ServerPacketHead.msgversion)
  return msgversion_;
}
 void ServerPacketHead::set_msgversion(::youmecommon::protobuf::int32 value) {
  set_has_msgversion();
  msgversion_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.ServerPacketHead.msgversion)
}

// required int64 msgSerialNum = 3;
bool ServerPacketHead::has_msgserialnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerPacketHead::set_has_msgserialnum() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerPacketHead::clear_has_msgserialnum() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerPacketHead::clear_msgserialnum() {
  msgserialnum_ = GOOGLE_LONGLONG(0);
  clear_has_msgserialnum();
}
 ::youmecommon::protobuf::int64 ServerPacketHead::msgserialnum() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.ServerPacketHead.msgSerialNum)
  return msgserialnum_;
}
 void ServerPacketHead::set_msgserialnum(::youmecommon::protobuf::int64 value) {
  set_has_msgserialnum();
  msgserialnum_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.ServerPacketHead.msgSerialNum)
}

// required int32 code = 4;
bool ServerPacketHead::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerPacketHead::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerPacketHead::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerPacketHead::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::youmecommon::protobuf::int32 ServerPacketHead::code() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.ServerPacketHead.code)
  return code_;
}
 void ServerPacketHead::set_code(::youmecommon::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.ServerPacketHead.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerReqHead::kHeadFieldNumber;
#endif  // !_MSC_VER

ServerReqHead::ServerReqHead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeCommonProtocol.ServerReqHead)
}

void ServerReqHead::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeCommonProtocol::ServerPacketHead*>(
      ::YouMeCommonProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeCommonProtocol::ServerPacketHead*>(&::YouMeCommonProtocol::ServerPacketHead::default_instance());
#endif
}

ServerReqHead::ServerReqHead(const ServerReqHead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeCommonProtocol.ServerReqHead)
}

void ServerReqHead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerReqHead::~ServerReqHead() {
  // @@protoc_insertion_point(destructor:YouMeCommonProtocol.ServerReqHead)
  SharedDtor();
}

void ServerReqHead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void ServerReqHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerReqHead& ServerReqHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

ServerReqHead* ServerReqHead::default_instance_ = NULL;

ServerReqHead* ServerReqHead::New(::youmecommon::protobuf::Arena* arena) const {
  ServerReqHead* n = new ServerReqHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerReqHead::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeCommonProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerReqHead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeCommonProtocol.ServerReqHead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeCommonProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeCommonProtocol.ServerReqHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeCommonProtocol.ServerReqHead)
  return false;
#undef DO_
}

void ServerReqHead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeCommonProtocol.ServerReqHead)
  // required .YouMeCommonProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeCommonProtocol.ServerReqHead)
}

int ServerReqHead::ByteSize() const {
  int total_size = 0;

  // required .YouMeCommonProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerReqHead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ServerReqHead*>(&from));
}

void ServerReqHead::MergeFrom(const ServerReqHead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeCommonProtocol::ServerPacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerReqHead::CopyFrom(const ServerReqHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReqHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void ServerReqHead::Swap(ServerReqHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerReqHead::InternalSwap(ServerReqHead* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerReqHead::GetTypeName() const {
  return "YouMeCommonProtocol.ServerReqHead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerReqHead

// required .YouMeCommonProtocol.ServerPacketHead head = 1;
bool ServerReqHead::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerReqHead::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerReqHead::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerReqHead::clear_head() {
  if (head_ != NULL) head_->::YouMeCommonProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeCommonProtocol::ServerPacketHead& ServerReqHead::head() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.ServerReqHead.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeCommonProtocol::ServerPacketHead* ServerReqHead::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeCommonProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.ServerReqHead.head)
  return head_;
}
::YouMeCommonProtocol::ServerPacketHead* ServerReqHead::release_head() {
  clear_has_head();
  ::YouMeCommonProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void ServerReqHead::set_allocated_head(::YouMeCommonProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.ServerReqHead.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SDKValidateRequest::kHeadFieldNumber;
const int SDKValidateRequest::kDataFieldNumber;
#endif  // !_MSC_VER

SDKValidateRequest::SDKValidateRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeCommonProtocol.SDKValidateRequest)
}

void SDKValidateRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeCommonProtocol::PacketHead*>(
      ::YouMeCommonProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeCommonProtocol::PacketHead*>(&::YouMeCommonProtocol::PacketHead::default_instance());
#endif
}

SDKValidateRequest::SDKValidateRequest(const SDKValidateRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeCommonProtocol.SDKValidateRequest)
}

void SDKValidateRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  data_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDKValidateRequest::~SDKValidateRequest() {
  // @@protoc_insertion_point(destructor:YouMeCommonProtocol.SDKValidateRequest)
  SharedDtor();
}

void SDKValidateRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void SDKValidateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SDKValidateRequest& SDKValidateRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

SDKValidateRequest* SDKValidateRequest::default_instance_ = NULL;

SDKValidateRequest* SDKValidateRequest::New(::youmecommon::protobuf::Arena* arena) const {
  SDKValidateRequest* n = new SDKValidateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SDKValidateRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeCommonProtocol::PacketHead::Clear();
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SDKValidateRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeCommonProtocol.SDKValidateRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeCommonProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeCommonProtocol.SDKValidateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeCommonProtocol.SDKValidateRequest)
  return false;
#undef DO_
}

void SDKValidateRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeCommonProtocol.SDKValidateRequest)
  // required .YouMeCommonProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeCommonProtocol.SDKValidateRequest)
}

int SDKValidateRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeCommonProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
int SDKValidateRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeCommonProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required bytes data = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDKValidateRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const SDKValidateRequest*>(&from));
}

void SDKValidateRequest::MergeFrom(const SDKValidateRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeCommonProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SDKValidateRequest::CopyFrom(const SDKValidateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKValidateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void SDKValidateRequest::Swap(SDKValidateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SDKValidateRequest::InternalSwap(SDKValidateRequest* other) {
  std::swap(head_, other->head_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SDKValidateRequest::GetTypeName() const {
  return "YouMeCommonProtocol.SDKValidateRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SDKValidateRequest

// required .YouMeCommonProtocol.PacketHead head = 1;
bool SDKValidateRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SDKValidateRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void SDKValidateRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void SDKValidateRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeCommonProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeCommonProtocol::PacketHead& SDKValidateRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.SDKValidateRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeCommonProtocol::PacketHead* SDKValidateRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeCommonProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.SDKValidateRequest.head)
  return head_;
}
::YouMeCommonProtocol::PacketHead* SDKValidateRequest::release_head() {
  clear_has_head();
  ::YouMeCommonProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void SDKValidateRequest::set_allocated_head(::YouMeCommonProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.SDKValidateRequest.head)
}

// required bytes data = 2;
bool SDKValidateRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SDKValidateRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void SDKValidateRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void SDKValidateRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& SDKValidateRequest::data() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.SDKValidateRequest.data)
  return data_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKValidateRequest::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.SDKValidateRequest.data)
}
 void SDKValidateRequest::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.SDKValidateRequest.data)
}
 void SDKValidateRequest::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.SDKValidateRequest.data)
}
 ::std::string* SDKValidateRequest::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.SDKValidateRequest.data)
  return data_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SDKValidateRequest::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKValidateRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.SDKValidateRequest.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SDKValidateResponse::kStatusFieldNumber;
const int SDKValidateResponse::kDataFieldNumber;
const int SDKValidateResponse::kConfigurationsFieldNumber;
const int SDKValidateResponse::kTimeoutFieldNumber;
#endif  // !_MSC_VER

SDKValidateResponse::SDKValidateResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeCommonProtocol.SDKValidateResponse)
}

void SDKValidateResponse::InitAsDefaultInstance() {
}

SDKValidateResponse::SDKValidateResponse(const SDKValidateResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeCommonProtocol.SDKValidateResponse)
}

void SDKValidateResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  data_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDKValidateResponse::~SDKValidateResponse() {
  // @@protoc_insertion_point(destructor:YouMeCommonProtocol.SDKValidateResponse)
  SharedDtor();
}

void SDKValidateResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SDKValidateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SDKValidateResponse& SDKValidateResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

SDKValidateResponse* SDKValidateResponse::default_instance_ = NULL;

SDKValidateResponse* SDKValidateResponse::New(::youmecommon::protobuf::Arena* arena) const {
  SDKValidateResponse* n = new SDKValidateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SDKValidateResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SDKValidateResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(status_, timeout_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  configurations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SDKValidateResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeCommonProtocol.SDKValidateResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_configurations;
        break;
      }

      // repeated .YouMeCommonProtocol.NameValue configurations = 3;
      case 3: {
        if (tag == 26) {
         parse_configurations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_configurations:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_configurations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_configurations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_timeout:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeCommonProtocol.SDKValidateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeCommonProtocol.SDKValidateResponse)
  return false;
#undef DO_
}

void SDKValidateResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeCommonProtocol.SDKValidateResponse)
  // required int32 status = 1;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // repeated .YouMeCommonProtocol.NameValue configurations = 3;
  for (unsigned int i = 0, n = this->configurations_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->configurations(i), output);
  }

  // optional int32 timeout = 4;
  if (has_timeout()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeCommonProtocol.SDKValidateResponse)
}

int SDKValidateResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_status()) {
    // required int32 status = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
int SDKValidateResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 status = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required bytes data = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 timeout = 4;
  if (has_timeout()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->timeout());
  }

  // repeated .YouMeCommonProtocol.NameValue configurations = 3;
  total_size += 1 * this->configurations_size();
  for (int i = 0; i < this->configurations_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configurations(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDKValidateResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const SDKValidateResponse*>(&from));
}

void SDKValidateResponse::MergeFrom(const SDKValidateResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  configurations_.MergeFrom(from.configurations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SDKValidateResponse::CopyFrom(const SDKValidateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKValidateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->configurations())) return false;
  return true;
}

void SDKValidateResponse::Swap(SDKValidateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SDKValidateResponse::InternalSwap(SDKValidateResponse* other) {
  std::swap(status_, other->status_);
  data_.Swap(&other->data_);
  configurations_.UnsafeArenaSwap(&other->configurations_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SDKValidateResponse::GetTypeName() const {
  return "YouMeCommonProtocol.SDKValidateResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SDKValidateResponse

// required int32 status = 1;
bool SDKValidateResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SDKValidateResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void SDKValidateResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void SDKValidateResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 SDKValidateResponse::status() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.SDKValidateResponse.status)
  return status_;
}
 void SDKValidateResponse::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.SDKValidateResponse.status)
}

// required bytes data = 2;
bool SDKValidateResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SDKValidateResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void SDKValidateResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void SDKValidateResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& SDKValidateResponse::data() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.SDKValidateResponse.data)
  return data_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKValidateResponse::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.SDKValidateResponse.data)
}
 void SDKValidateResponse::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeCommonProtocol.SDKValidateResponse.data)
}
 void SDKValidateResponse::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeCommonProtocol.SDKValidateResponse.data)
}
 ::std::string* SDKValidateResponse::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.SDKValidateResponse.data)
  return data_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SDKValidateResponse::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKValidateResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:YouMeCommonProtocol.SDKValidateResponse.data)
}

// repeated .YouMeCommonProtocol.NameValue configurations = 3;
int SDKValidateResponse::configurations_size() const {
  return configurations_.size();
}
void SDKValidateResponse::clear_configurations() {
  configurations_.Clear();
}
const ::YouMeCommonProtocol::NameValue& SDKValidateResponse::configurations(int index) const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.SDKValidateResponse.configurations)
  return configurations_.Get(index);
}
::YouMeCommonProtocol::NameValue* SDKValidateResponse::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeCommonProtocol.SDKValidateResponse.configurations)
  return configurations_.Mutable(index);
}
::YouMeCommonProtocol::NameValue* SDKValidateResponse::add_configurations() {
  // @@protoc_insertion_point(field_add:YouMeCommonProtocol.SDKValidateResponse.configurations)
  return configurations_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeCommonProtocol::NameValue >*
SDKValidateResponse::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:YouMeCommonProtocol.SDKValidateResponse.configurations)
  return &configurations_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeCommonProtocol::NameValue >&
SDKValidateResponse::configurations() const {
  // @@protoc_insertion_point(field_list:YouMeCommonProtocol.SDKValidateResponse.configurations)
  return configurations_;
}

// optional int32 timeout = 4;
bool SDKValidateResponse::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SDKValidateResponse::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
void SDKValidateResponse::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
void SDKValidateResponse::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
 ::youmecommon::protobuf::int32 SDKValidateResponse::timeout() const {
  // @@protoc_insertion_point(field_get:YouMeCommonProtocol.SDKValidateResponse.timeout)
  return timeout_;
}
 void SDKValidateResponse::set_timeout(::youmecommon::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:YouMeCommonProtocol.SDKValidateResponse.timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeCommonProtocol

// @@protoc_insertion_point(global_scope)
